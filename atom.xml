<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AzuSemisa&#39;s Blog</title>
  
  <subtitle>一个OI蒟蒻的小窝</subtitle>
  <link href="http://beta.azusemisa.top/atom.xml" rel="self"/>
  
  <link href="http://beta.azusemisa.top/"/>
  <updated>2020-08-17T12:44:04.763Z</updated>
  <id>http://beta.azusemisa.top/</id>
  
  <author>
    <name>AzuSemisa</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【CodeForces 609E】 Minimum spanning tree for each edge</title>
    <link href="http://beta.azusemisa.top/posts/3582173013.html"/>
    <id>http://beta.azusemisa.top/posts/3582173013.html</id>
    <published>2020-08-10T11:10:08.000Z</published>
    <updated>2020-08-17T12:44:04.763Z</updated>
    
    <content type="html"><![CDATA[<p>题意很清楚，给定一张带权无向图，对于图上的每一条边，询问包括这一条边的生成树中边权权值之和最小的。</p><p>首先想到的方法是每次都先把要求的这条边加入最小生成树，然后跑一遍 Kruskal，但用膝盖想一下都知道这样肯定是会 T 飞的，所以我们可以直接在原来的最小生成树上进行修改，也就是说，把这一条边强行塞进最小生成树，由于这样很明显会形成一个环，所以我们还需要从这个环里再删掉一条边。</p><p>假设此时这条边连接的是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span> 两个点，则从 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span> 到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span> 的最短路径应该会经过 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>LCA</mtext><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\text{LCA}(u,v)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">LCA</span></span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span>，所以这个环应该是从 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span> 到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>LCA</mtext><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\text{LCA}(u,v)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">LCA</span></span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span> 再到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span> 最后回到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>，因此，我们需要删掉的边应该是在从 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span> 到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>LCA</mtext><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\text{LCA}(u,v)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">LCA</span></span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span> 再到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span> 这条路径上，又因为要求新的最小生成树的权值和最小，所以我们应该尽量删掉权值较大的边。</p><p>因此，这道题就变成了先求出最小生成树，然后对于每一条边，询问其两个端点在树上的最短路径中边权最大的边。</p><p>这种问题本来可以用树剖做，但由于没有修改操作，不需要那么麻烦<s>其实就是懒</s>，使用倍增求 LCA，在求每个点的第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>i</mi></msup></mrow><annotation encoding="application/x-tex">2^i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.824664em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span></span></span> 个父亲的时候，另外开一个数组，求每个点到它第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>i</mi></msup></mrow><annotation encoding="application/x-tex">2^i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.824664em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span></span></span> 个父亲这条路径上最大的边权，然后在往上跳的时候顺便用一个变量统计一下就可以了，具体的看代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp(a,b) make_pair(a,b)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pll pair<span class="meta-string">&lt;long long,long long&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> u;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> v;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> c;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> id;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Edge a,Edge b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.c&lt;b.c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(Edge a,Edge b)</span><span class="comment">//这个是求完最小生成树后还原所有边的顺序的，虽然也可以再开一个数组，但是我懒。</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.id&lt;b.id;</span><br><span class="line">&#125;</span><br><span class="line">Edge a[<span class="number">200001</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;pll&gt; edge[<span class="number">200001</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,m,cnt,k,log2n,f[<span class="number">200001</span>],dep[<span class="number">200001</span>],fa[<span class="number">200001</span>][<span class="number">21</span>],maxn[<span class="number">200001</span>][<span class="number">21</span>];</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">find</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> f[x]==x? f[x]:f[x]=find(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> u,<span class="keyword">long</span> <span class="keyword">long</span> father)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">fa[u][<span class="number">0</span>]=father;</span><br><span class="line">dep[u]=dep[father]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;i)&lt;=dep[u];i++)</span><br><span class="line">&#123;</span><br><span class="line">fa[u][i]=fa[fa[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">maxn[u][i]=max(maxn[u][i<span class="number">-1</span>],maxn[fa[u][i<span class="number">-1</span>]][i<span class="number">-1</span>]);<span class="comment">//求 u 到它第 2^i 个父亲这条路径上最大的边权。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i=<span class="number">0</span>;i&lt;edge[u].size();i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> v=edge[u][i].first,c=edge[u][i].second;</span><br><span class="line"><span class="keyword">if</span>(v!=father)</span><br><span class="line">&#123;</span><br><span class="line">maxn[v][<span class="number">0</span>]=c;<span class="comment">//在搜索儿子前先把这个初始化一下。</span></span><br><span class="line">dfs(v,u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">lca</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> u,<span class="keyword">long</span> <span class="keyword">long</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> depu=dep[u],depv=dep[v],ans=<span class="number">0</span>;<span class="comment">//ans 用来统计最大边权。</span></span><br><span class="line"><span class="keyword">if</span>(depu!=depv)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(depu&lt;depv)</span><br><span class="line">&#123;</span><br><span class="line">swap(depu,depv);</span><br><span class="line">swap(u,v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i=<span class="number">0</span>;(<span class="number">1</span>&lt;&lt;i)&lt;=depu-depv;i++)</span><br><span class="line"><span class="keyword">if</span>((depu-depv)&amp;(<span class="number">1</span>&lt;&lt;i))</span><br><span class="line">&#123;</span><br><span class="line">ans=max(ans,maxn[u][i]);</span><br><span class="line">u=fa[u][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(u==v)</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i=log2n;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line"><span class="keyword">if</span>(fa[u][i]!=fa[v][i])</span><br><span class="line">&#123;</span><br><span class="line">ans=max(ans,max(maxn[u][i],maxn[v][i]));</span><br><span class="line">u=fa[u][i];</span><br><span class="line">v=fa[v][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> max(ans,max(maxn[u][<span class="number">0</span>],maxn[v][<span class="number">0</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">f[i]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;a[i].u,&amp;a[i].v,&amp;a[i].c);</span><br><span class="line">a[i].id=i;</span><br><span class="line">&#125;</span><br><span class="line">sort(a+<span class="number">1</span>,a+<span class="number">1</span>+m,cmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i=<span class="number">1</span>;i&lt;=m;i++)<span class="comment">//Kruskal 求最小生成树。</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> t1=find(a[i].u),t2=find(a[i].v);</span><br><span class="line"><span class="keyword">if</span>(t1!=t2)</span><br><span class="line">&#123;</span><br><span class="line">f[t1]=t2;</span><br><span class="line">cnt++;</span><br><span class="line">k+=a[i].c;</span><br><span class="line">edge[a[i].u].push_back(mp(a[i].v,a[i].c));</span><br><span class="line">edge[a[i].v].push_back(mp(a[i].u,a[i].c));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cnt==n<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">sort(a+<span class="number">1</span>,a+<span class="number">1</span>+m,cmp2);</span><br><span class="line">log2n=<span class="built_in">log</span>(n)/<span class="built_in">log</span>(<span class="number">2</span>)+<span class="number">0.5</span>;</span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,k+a[i].c-lca(a[i].u,a[i].v));<span class="comment">//加上当前这条的边权，删去路径上最大的边权。</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一开始的时候我还想着要不要判断一下这条边是否是树边，但其实如果是树边的话，那么加上的也是它，删去的也是它，根本没有发生变化，所以没必要特判。</p><p>另外，这道题一定要开 long long，因为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup><mo>×</mo><mn>2</mn><mo>⋅</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">10^9\times 2\cdot10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span> 很明显炸 int 了。</p>]]></content>
    
    
    <summary type="html">一道结合最小生成树来做的LCA板子题&lt;del&gt;虽然用树剖也可以但我懒得打代码&lt;/del&gt;</summary>
    
    
    
    <category term="题解" scheme="http://beta.azusemisa.top/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="LCA" scheme="http://beta.azusemisa.top/tags/LCA/"/>
    
  </entry>
  
  <entry>
    <title>【笔记】图论-树链剖分</title>
    <link href="http://beta.azusemisa.top/posts/499196864.html"/>
    <id>http://beta.azusemisa.top/posts/499196864.html</id>
    <published>2020-08-06T11:04:33.000Z</published>
    <updated>2020-08-17T12:42:02.919Z</updated>
    
    <content type="html"><![CDATA[<p>树链剖分，听起来确实是一种很高级的算法，但其实它并没有想象中的那么难以理解，事实上，个人觉得，树剖其实根本没有什么太大的思维难度（<s>老实说我觉得怕不是背包都比它要难理解</s>），只是码量大<s>亿</s>点，但只要熟练掌握了，打代码其实也并没有那么难</p><p>所谓树链剖分，是用来解决一类树上问题的，它将一棵树剖成很多条链，把树上问题转化成序列问题，然后用其它一些数据结构，比如线段树来维护树上路径的信息</p><p>举个例子，比如给定一棵树，每个点有自己的权值，要求查询某两点之间的路径上的所有点的点权和，看起来很简单是不是？用倍增在跳的时候顺便统计就行了，那么如果再要求支持改变某个点的点权呢，或是给某两点之间的路径上的所有点的点权全部加上一个数呢？倍增很明显就不行了吧，这时候就要用到树剖了</p><h1 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h1><p>树链剖分一般指的是重链剖分，在讲解它的思路之前，我们先要明确几个概念</p><ul><li>重儿子：一个点的所有儿子中子树节点数量最多的儿子，如果有多个，那就随便选一个</li><li>轻儿子：一个点所有儿子中除重儿子以外的其他儿子，也就是说，对于一个点，重儿子是唯一的，但轻儿子不唯一</li><li>重边：一个点到它的重儿子之间的边</li><li>轻边：一个点到它的轻儿子之间的边</li><li>重链：一大堆重边组成的一条链</li></ul><p>这么说起来可能有点抽象，还是拿张图最容易理解</p><p><img src="https://cdn.jsdelivr.net/gh/xiao-lin52/image-upload/20200806200329.png" alt="" /></p><p>在这张图中，蓝色节点表示轻儿子，橙色节点表示重儿子，相应的，蓝色边表示轻边，橙色边表示重边，由绿框框起来的就是重链，特别的，单独一个点也可以叫做重链</p><p>这个过程完了之后，整棵树就会被完全剖分成一条一条的重链</p><p>接下来是重点</p><p>对于这一条一条的重链，很明显我们还是不能直接用线段树去维护，因为每条链中的节点编号并不是连续的，所以，我们还要引入一个东西——DFS序</p><p>这个东西就是树剖把树上问题转化成序列问题的关键，所谓DFS序呢，就是在对这棵树进行DFS的时候，标记每个点是第几个到达的，其实也就是强连通分量Tarjan算法里的dfn数组，但树剖不太一样，因为我们需要让一条重链上所有点的DFS序连续，这样才好让这条链变成一个区间，所以，我们在对这棵树进行DFS的时候，优先遍历重儿子，这样就可以保证一条重链上的点的DFS序连续，因为是先把这条重链一拉到底之后再遍历其他的重链</p><p>对于上面那棵树，它的DFS序如下（拿蓝框框起来的就是）</p><p><img src="https://cdn.jsdelivr.net/gh/xiao-lin52/image-upload/20200806201911.png" alt="" /></p><p>我们可以用每个节点的DFS序建一棵线段树，这样，一条重链就是一个连续的区间了，也便于维护</p><h1 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h1><p>首先我们先来看一些变量</p><ul><li>dep[]：记录每个点的深度</li><li>son[]：记录每个点的重儿子</li><li>size[]：记录以当前点为根的子树的节点个数</li><li>id[]：记录每个点的DFS序</li><li>rk[]：记录每个DFS序对应的点</li><li>top[]：记录当前点所在重链的顶部（下称链头），也就是深度最浅的点</li></ul><p>其实树链剖分一共只需要两次DFS就可以解决了，第一次求出每个点的深度和重儿子（dep[]，son[]，size[]），第二次记录每个点的DFS序，相当于是连重边（id[]，rk[]，top[]），代码很短，也很好理解</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> father)</span><span class="comment">//第一次DFS</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dep[u]=dep[father]+<span class="number">1</span>;</span><br><span class="line">fa[u]=father;</span><br><span class="line">size[u]=<span class="number">1</span>;<span class="comment">//这个是把u点自己给算进去</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;edge[u].size();i++)<span class="comment">//这里是用的vector存图</span></span><br><span class="line"><span class="keyword">if</span>(edge[u][i]!=father)</span><br><span class="line">&#123;</span><br><span class="line">dfs1(edge[u][i],u);<span class="comment">//先遍历子树</span></span><br><span class="line">size[u]+=size[edge[u][i]];<span class="comment">//累加当前点的子树的节点数</span></span><br><span class="line">son[u]=size[edge[u][i]]&gt;size[son[u]]? edge[u][i]:son[u];<span class="comment">//找重儿子，如果当前儿子的子树比重儿子的子树节点数量更多的话就换过去</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> father,<span class="keyword">int</span> t)</span><span class="comment">//第二次DFS，t是当前点所在重链的顶部</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cnt++;<span class="comment">//DFS序</span></span><br><span class="line">top[u]=t;</span><br><span class="line">rk[cnt]=u;<span class="comment">//当前DFS序对应的节点编号</span></span><br><span class="line">id[u]=cnt;<span class="comment">//当前节点对应的DFS序</span></span><br><span class="line"><span class="keyword">if</span>(son[u])</span><br><span class="line">dfs2(son[u],u,t);<span class="comment">//一定要优先遍历重儿子啊！！！</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;edge[u].size();i++)</span><br><span class="line"><span class="keyword">if</span>(edge[u][i]!=son[u]&amp;&amp;edge[u][i]!=father)</span><br><span class="line">dfs2(edge[u][i],u,edge[u][i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在第二个DFS中，之所以下面遍历轻儿子的时候把轻儿子所在的重链顶部设成是轻儿子，是因为当前节点和轻儿子并不在一条重链里，自然也就无法充当它所在的重链的顶部</p><p>代码是真的很短了，但这其实只是树剖本身的实现，不要忘了，它是用来解决一类问题的，剖的过程确实很简单，但要维护却比较恼火，上面提到过，可以用线段树来维护重链上的信息，这玩意本来码量就很大，再加上有时候还会结合LCA，就更令人难受了</p><p>接下来，我会讲一下如何用树剖求LCA，当然，一般来说用树剖求LCA，就一定会有路径查询和路径修改，我会顺带着把这两个也讲一下的</p><h1 id="树剖lca"><a class="markdownIt-Anchor" href="#树剖lca"></a> 树剖+LCA</h1><p>如果是做过树剖的题的人，应该知道在这种题中一般会有这种要求，即求这棵树上从<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>的最短路径上所有点权之和，以及将这棵树上从<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>的最短路径上所有点的点权加上一个数，而这个最短路径，很明显就是要求LCA</p><p>树剖求LCA，思路其实和倍增差不多，都是往上跳，直到跳到同一个点结束，但树剖与倍增又有一点不同，倍增是往上跳<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>k</mi></msup></mrow><annotation encoding="application/x-tex">2^k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span></span>个祖先，而树剖则是直接跳到链头的父亲，因为如果<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>在同一条重链上，那么可以肯定他们中有一个是对方的祖先，比较一下深度就行了，如果不在同一条重链上，那么我们就先让他们跳到同一条重链上，再按照前面的方法执行</p><p>首先，我们比较<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span><strong>链头的深度</strong>，避免跳过头，接下来，我们把链头深度较深的那一个（假设是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>）跳到他链头的父亲，因为如果只跳到链头，那么很明显这个点所在的重链并没有变，只有跳到链头的父亲才是到了另外一条重链，如此循环，直到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>的链头是同一个点，也就是它们处于同一条重链上，这时深度浅的那一个就是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>LCA</mtext><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\text{LCA}(u,v)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">LCA</span></span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span></p><p>老规矩，用上面那张图手动模拟一下</p><p><img src="https://cdn.jsdelivr.net/gh/xiao-lin52/image-upload/20200806200329.png" alt="" /></p><p>假设我们求14和16号点的LCA，过程如下：</p><ol><li>首先比较各自链头的深度，很明显是16号点的链头深度更深，因此把16号点跳到链头的父亲11号点</li><li>再次比较14号点和11号点的链头深度，这次是14号点，跳到链头的父亲，为7号点</li><li>发现7号点和11号点的链头相同，也就是它们处于同一条重链，退出循环</li><li>因为7号点深度比11号点的深度更浅，所以<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>LCA</mtext><mo stretchy="false">(</mo><mn>14</mn><mo separator="true">,</mo><mn>16</mn><mo stretchy="false">)</mo><mo>=</mo><mn>7</mn></mrow><annotation encoding="application/x-tex">\text{LCA}(14,16)=7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">LCA</span></span><span class="mopen">(</span><span class="mord">1</span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">6</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">7</span></span></span></span></li></ol><p>当然，一般来说如果只是单纯求LCA还用不到树剖上场，如果必须要用树剖，那就肯定是加了路径修改和路径查询，这两个也是导致树剖码量大的一个很重要的原因。。。</p><p>其实只要掌握了树剖求LCA的方法，修改和查询也不是什么难事，上面说过，我们是用节点的DFS序建的线段树，因此每条重链都是一个连续的区间，而重链上的每个点到链头很明显也是连续的，结合刚刚求LCA的跳法，我们只需要在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>（或<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>）跳到链头的父亲之前先修改（或查询）<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>到链头的点，并在最后出于同一重链上时把<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>之间的点进行修改（或查询）就行了，具体的可以看一下代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca_query</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span><span class="comment">//查询</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(top[u]!=top[v])<span class="comment">//比较链头是否相同</span></span><br><span class="line"><span class="keyword">if</span>(dep[top[u]]&gt;=dep[top[v]])</span><br><span class="line">&#123;</span><br><span class="line">ans=ans+query(<span class="number">1</span>,id[top[u]],id[u]);<span class="comment">//query是线段树的区间查询函数，和普通写法是一样的</span></span><br><span class="line">u=fa[top[u]];<span class="comment">//让这个点跳到链头的父亲</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ans=ans+query(<span class="number">1</span>,id[top[v]],id[v]);</span><br><span class="line">v=fa[top[v]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[u]&gt;=dep[v])</span><br><span class="line">ans=ans+query(<span class="number">1</span>,id[v],id[u]);<span class="comment">//u和v处于同一重链上时单独处理</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">ans=ans+query(<span class="number">1</span>,id[u],id[v]);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lca_update</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> k)</span><span class="comment">//和上面是一样的</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(top[u]!=top[v])</span><br><span class="line"><span class="keyword">if</span>(dep[top[u]]&gt;=dep[top[v]])</span><br><span class="line">&#123;</span><br><span class="line">update(<span class="number">1</span>,id[top[u]],id[u],k);<span class="comment">//update是线段树的区间修改函数，和普通写法也是一样的</span></span><br><span class="line">u=fa[top[u]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">update(<span class="number">1</span>,id[top[v]],id[v],k);</span><br><span class="line">v=fa[top[v]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[u]&gt;=dep[v])</span><br><span class="line">update(<span class="number">1</span>,id[v],id[u],k);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">update(<span class="number">1</span>,id[u],id[v],k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（感觉其实不算很难啊）</p><p>一般来说，树剖的题基本上就是路径修改，路径查询，单点修改，单点查询，修改子树，查询子树这几种，后面四种都可以直接用线段树来完成，因为一个点的子树的DFS序也是一个完整的区间，比如上图中7的子树的DFS序就是从3到8，由于之前记录了每棵子树的节点数量，所以这里只需要修改从id[i]到id[i]+size[i]-1这个区间就行了</p><p>另外，树剖求LCA的时间复杂度是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，且常数较小，不容易被卡掉，预处理也是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>级别的，所以还算比较优秀了</p><h1 id="参考代码"><a class="markdownIt-Anchor" href="#参考代码"></a> 参考代码</h1><p>题目：<a href="https://www.luogu.com.cn/problem/P3384">P3384 【模板】轻重链剖分</a></p><p>这道题要求支持路径修改，路径查询，子树修改，子树查询四种操作，上面都已经讲过了，就直接贴代码了</p><p>感受树剖的码量吧！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> l;</span><br><span class="line"><span class="keyword">int</span> r;</span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line"><span class="keyword">int</span> f;</span><br><span class="line">&#125;;</span><br><span class="line">node tree[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; edge[MAXN];</span><br><span class="line"><span class="keyword">int</span> n,m,r,p,cnt,w[MAXN];</span><br><span class="line"><span class="keyword">int</span> dep[MAXN],fa[MAXN],son[MAXN],size[MAXN],top[MAXN],rk[MAXN],id[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> father)</span><span class="comment">//第一次DFS</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dep[u]=dep[father]+<span class="number">1</span>;</span><br><span class="line">fa[u]=father;</span><br><span class="line">size[u]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;edge[u].size();i++)</span><br><span class="line"><span class="keyword">if</span>(edge[u][i]!=father)</span><br><span class="line">&#123;</span><br><span class="line">dfs1(edge[u][i],u);</span><br><span class="line">size[u]+=size[edge[u][i]];</span><br><span class="line">son[u]=size[edge[u][i]]&gt;size[son[u]]? edge[u][i]:son[u];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> father,<span class="keyword">int</span> t)</span><span class="comment">//第二次DFS</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cnt++;</span><br><span class="line">top[u]=t;</span><br><span class="line">rk[cnt]=u;</span><br><span class="line">id[u]=cnt;</span><br><span class="line"><span class="keyword">if</span>(son[u])</span><br><span class="line">dfs2(son[u],u,t);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;edge[u].size();i++)</span><br><span class="line"><span class="keyword">if</span>(edge[u][i]!=son[u]&amp;&amp;edge[u][i]!=father)</span><br><span class="line">dfs2(edge[u][i],u,edge[u][i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> i)</span><span class="comment">//懒标记下传</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l=i&lt;&lt;<span class="number">1</span>,r=i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(!tree[i].f)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">tree[l].data=(tree[l].data+tree[i].f*(tree[l].r-tree[l].l+<span class="number">1</span>)%p)%p;</span><br><span class="line">tree[r].data=(tree[r].data+tree[i].f*(tree[r].r-tree[r].l+<span class="number">1</span>)%p)%p;</span><br><span class="line">tree[l].f=(tree[l].f+tree[i].f)%p;</span><br><span class="line">tree[r].f=(tree[r].f+tree[i].f)%p;</span><br><span class="line">tree[i].f=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span><span class="comment">//建线段树</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tree[i].l=l;</span><br><span class="line">tree[i].r=r;</span><br><span class="line"><span class="keyword">if</span>(l==r)</span><br><span class="line">&#123;</span><br><span class="line">tree[i].data=w[rk[l]]%p;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">build(i&lt;&lt;<span class="number">1</span>,l,(l+r)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">build(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,((l+r)&gt;&gt;<span class="number">1</span>)+<span class="number">1</span>,r);</span><br><span class="line">tree[i].data=(tree[i&lt;&lt;<span class="number">1</span>].data+tree[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].data)%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span><span class="comment">//线段树区间修改</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree[i].l&gt;=l&amp;&amp;tree[i].r&lt;=r)</span><br><span class="line">&#123;</span><br><span class="line">tree[i].data=(tree[i].data+(tree[i].r-tree[i].l+<span class="number">1</span>)*k%p)%p;</span><br><span class="line">tree[i].f=(tree[i].f+k)%p;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">push_down(i);</span><br><span class="line"><span class="keyword">if</span>(tree[i&lt;&lt;<span class="number">1</span>].r&gt;=l)</span><br><span class="line">update(i&lt;&lt;<span class="number">1</span>,l,r,k);</span><br><span class="line"><span class="keyword">if</span>(tree[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l&lt;=r)</span><br><span class="line">update(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r,k);</span><br><span class="line">tree[i].data=(tree[i&lt;&lt;<span class="number">1</span>].data+tree[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].data)%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span><span class="comment">//线段树区间查询</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(tree[i].l&gt;=l&amp;&amp;tree[i].r&lt;=r)</span><br><span class="line"><span class="keyword">return</span> tree[i].data%p;</span><br><span class="line">push_down(i);</span><br><span class="line"><span class="keyword">if</span>(tree[i&lt;&lt;<span class="number">1</span>].r&gt;=l)</span><br><span class="line">ans=(ans+query(i&lt;&lt;<span class="number">1</span>,l,r))%p;</span><br><span class="line"><span class="keyword">if</span>(tree[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l&lt;=r)</span><br><span class="line">ans=(ans+query(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r))%p;</span><br><span class="line"><span class="keyword">return</span> ans%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca_query</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span><span class="comment">//路径查询</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(top[u]!=top[v])</span><br><span class="line"><span class="keyword">if</span>(dep[top[u]]&gt;=dep[top[v]])</span><br><span class="line">&#123;</span><br><span class="line">ans=(ans+query(<span class="number">1</span>,id[top[u]],id[u]))%p;</span><br><span class="line">u=fa[top[u]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ans=(ans+query(<span class="number">1</span>,id[top[v]],id[v]))%p;</span><br><span class="line">v=fa[top[v]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[u]&gt;=dep[v])</span><br><span class="line">ans=(ans+query(<span class="number">1</span>,id[v],id[u]))%p;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">ans=(ans+query(<span class="number">1</span>,id[u],id[v]))%p;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lca_update</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> k)</span><span class="comment">//路径修改</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(top[u]!=top[v])</span><br><span class="line"><span class="keyword">if</span>(dep[top[u]]&gt;=dep[top[v]])</span><br><span class="line">&#123;</span><br><span class="line">update(<span class="number">1</span>,id[top[u]],id[u],k);</span><br><span class="line">u=fa[top[u]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">update(<span class="number">1</span>,id[top[v]],id[v],k);</span><br><span class="line">v=fa[top[v]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[u]&gt;=dep[v])</span><br><span class="line">update(<span class="number">1</span>,id[v],id[u],k);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">update(<span class="number">1</span>,id[u],id[v],k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;r,&amp;p);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;w[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;u,&amp;v);</span><br><span class="line">edge[u].push_back(v);</span><br><span class="line">edge[v].push_back(u);</span><br><span class="line">&#125;</span><br><span class="line">dfs1(r,<span class="number">0</span>);</span><br><span class="line">dfs2(r,<span class="number">0</span>,r);</span><br><span class="line">build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> op,x,y,z;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;op);</span><br><span class="line"><span class="keyword">switch</span>(op)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">lca_update(x,y,z);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,lca_query(x,y));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;z);</span><br><span class="line">update(<span class="number">1</span>,id[x],id[x]+size[x]<span class="number">-1</span>,z);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,query(<span class="number">1</span>,id[x],id[x]+size[x]<span class="number">-1</span>));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实不算很难懂啦，关键就是码量太大了。。。</p><h1 id="相关题目"><a class="markdownIt-Anchor" href="#相关题目"></a> 相关题目</h1><ul><li><a href="https://www.luogu.com.cn/problem/P3038">P3038 [USACO11DEC]Grass Planting G</a>（树剖维护边权，其实可以把边权转化成点权）</li><li><a href="https://www.luogu.com.cn/problem/P4092">P4092 [HEOI2016/TJOI2016]树</a>（跟上面说的不太一样，但可以用树剖解决）</li><li><a href="https://www.luogu.com.cn/problem/P4315">P4315 月下“毛景树”</a>（差点把我心态搞崩，码量不是一般的大）</li><li><a href="https://www.luogu.com.cn/problem/P2146">P2146 [NOI2015]软件包管理器</a>（树剖经典题）</li><li><a href="https://www.luogu.com.cn/problem/P2486">P2486 [SDOI2011]染色</a>（有些思维难度，加油！）</li><li><a href="https://www.luogu.com.cn/problem/P3178">P3178 [HAOI2015]树上操作</a>（板子题）</li></ul><p>其实真正开始做树剖的题就会发现，其实很多代码是通用的，完全可以把上一道题的代码复制过来稍微改一下就行了，但我个人不推荐这样做，毕竟要想熟练掌握代码，最好的方法就是多打几遍嘛，而且这样还可以练手速，做题做多了之后就可以越打越快（<s>我有一次曾经一天内做了8道树剖题，手都快打废了</s>）</p>]]></content>
    
    
    <summary type="html">记录了树链剖分的方法及其一些应用</summary>
    
    
    
    <category term="学习笔记" scheme="http://beta.azusemisa.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="图论" scheme="http://beta.azusemisa.top/tags/%E5%9B%BE%E8%AE%BA/"/>
    
    <category term="树链剖分" scheme="http://beta.azusemisa.top/tags/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>【CodeForces 163A】 Substring and Subsequence</title>
    <link href="http://beta.azusemisa.top/posts/3200880746.html"/>
    <id>http://beta.azusemisa.top/posts/3200880746.html</id>
    <published>2020-07-31T14:24:46.000Z</published>
    <updated>2020-08-17T12:44:20.017Z</updated>
    
    <content type="html"><![CDATA[<p>印象中好像是唯一一道自己做对的除背包以外的线性DP题（<s>我太菜了QAQ</s>），因此想写篇题解纪念一下</p><h1 id="题目大意"><a class="markdownIt-Anchor" href="#题目大意"></a> 题目大意</h1><p><a href="https://www.luogu.com.cn/problem/CF163A">题目传送门</a></p><p>翻译有点问题，我这里重新翻一下</p><p>大概意思就是说，给你两个字符串<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span></span></span></span>，求出有多少对字符串<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span>，满足<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span></span></span></span>的子串且<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span>是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span></span></span></span>的子序列，答案对<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1000000007</mn><mo stretchy="false">(</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup><mo>+</mo><mn>7</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">1000000007(10^9+7)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">7</span><span class="mopen">(</span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">7</span><span class="mclose">)</span></span></span></span>取模</p><p>关于子串和子序列的区别，可以理解为子串是一段连续的区间，而子序列则不一定是连续的</p><h1 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h1><p>这道题乍一看其实很像最长公共子序列，唯一不同的在于对于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span></span></span></span>要取它的子串，我们类比一下最长公共子序列的状态转移方程</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn><mtext> </mtext><mo stretchy="false">(</mo><mi>i</mi><mo>=</mo><mn>0</mn><mtext> or </mtext><mi>j</mi><mo>=</mo><mn>0</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo>+</mo><mn>1</mn><mtext> </mtext><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>=</mo><mi>t</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>max</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">)</mo><mtext> </mtext><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>≠</mo><mi>t</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">dp[i,j]=\begin{cases}0\ (i=0 \text{ or }j=0)\\dp[i-1,j-1]+1\ (s[i]=t[j])\\\max(dp[i-1,j],dp[i,j-1])\ (s[i]\not =t[j])\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:4.32em;vertical-align:-1.9099999999999997em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.35002em;"><span style="top:-2.19999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.19999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.1500100000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.30001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.60002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.8500199999999998em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.41em;"><span style="top:-4.41em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">0</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mord text"><span class="mord"> or </span></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span><span style="top:-2.97em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mclose">)</span></span></span><span style="top:-1.5300000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mop">max</span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mclose">)</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.9099999999999997em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[i,j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span>表示的是在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span></span></span></span>的前<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>个字符和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span></span></span></span>的前<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span>个字符中的最长公共子序列的长度，因此，对于这道题，我们不妨设<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[i,j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span>为<strong>以</strong><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span></span></span></span><strong>的第</strong><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span><strong>个字符为结尾的子串与</strong><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span></span></span></span><strong>的前</strong><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span><strong>个字符中的子序列相同的个数</strong>，同样，我们分成两种情况来讨论，一种是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>=</mo><mi>t</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">s[i]=t[j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span>，一种是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>≠</mo><mi>t</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">s[i]\not =t[j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span></p><p>如果<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>=</mo><mi>t</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">s[i]=t[j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span>，那么当前状态首先应该包括了<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[i-1,j-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>的所有情况，因为这两个字符是相同的，那么我们相当于是可以在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[i-1,j-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>的所有情况后面加上一个相同的字符，结果一定还是成立的，然后还应该包括<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[i,j-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>的所有情况，因为不管当前两个字符是否相同，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[i,j-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>的所有情况肯定都适用于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[i,j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span>，最后，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[i,j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span>还应该包括<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">s[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">t[j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span>这对组合，因为很明显前面两种情况都没有把<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">t[j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span>算进去，所以最后的状态转移方程应该是这样的</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo>+</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">dp[i,j]=dp[i,j-1]+dp[i-1,j-1]+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p><p>如果<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>≠</mo><mi>t</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">s[i]\not = t[j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span>，那么上面所说的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[i-1,j-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>的情况就不适用于当前情况，也没有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">s[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">t[j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span>这对组合，所以状态转移方程就是这样的</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[i,j]=dp[i,j-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span></span></p><p>最后，由于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[i,j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span>只统计了以<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">s[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>为结尾的子串，所以最终答案应该把所有的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo separator="true">,</mo><mi mathvariant="normal">∣</mi><mi>s</mi><mi mathvariant="normal">∣</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[i,|s|]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">∣</span><span class="mord mathdefault">s</span><span class="mord">∣</span><span class="mclose">]</span></span></span></span>加起来，另外，不要忘记取模</p><h1 id="参考代码"><a class="markdownIt-Anchor" href="#参考代码"></a> 参考代码</h1><p>其实只要搞清楚状态转移方程了，代码什么的就很好写了，<s>这就是你懒得写注释的理由吗！</s>，关键是要理解思路</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> a,b;</span><br><span class="line"><span class="keyword">int</span> n,m,ans,dp[<span class="number">5001</span>][<span class="number">5001</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">getline(<span class="built_in">cin</span>,a);</span><br><span class="line">getline(<span class="built_in">cin</span>,b);</span><br><span class="line">n=a.length();</span><br><span class="line">m=b.length();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line"><span class="keyword">if</span>(a[i<span class="number">-1</span>]==b[j<span class="number">-1</span>])</span><br><span class="line">dp[i][j]=(dp[i][j<span class="number">-1</span>]+dp[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span>)%mod;<span class="comment">//取模！！</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">dp[i][j]=dp[i][j<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">ans=(ans+dp[i][m])%mod;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">一道有点思维难度的线性DP题</summary>
    
    
    
    <category term="题解" scheme="http://beta.azusemisa.top/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="DP" scheme="http://beta.azusemisa.top/tags/DP/"/>
    
    <category term="字符串" scheme="http://beta.azusemisa.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>【笔记】图论-最近公共祖先</title>
    <link href="http://beta.azusemisa.top/posts/undefined.html"/>
    <id>http://beta.azusemisa.top/posts/undefined.html</id>
    <published>2020-07-19T01:48:05.000Z</published>
    <updated>2020-08-17T12:42:23.212Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前置知识：<a href="https://oi-wiki.org/graph/tree-basic/">树</a></strong></p><h1 id="概念"><a class="markdownIt-Anchor" href="#概念"></a> 概念</h1><p>众所周知，在一棵树上，每个点都有其祖先，而最近公共祖先，顾名思义，就是指一个或几个点共有的祖先，且这个祖先的深度最大，为了方便，我们把一个或几个点的最近公共祖先记为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>LCA</mtext><mo stretchy="false">(</mo><msub><mi>u</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>u</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>u</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\text{LCA}(u_1,u_2,\cdots,u_n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">LCA</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><p>举个例子，这是一棵树：</p><img src="https://cdn.jsdelivr.net/gh/xiao-lin52/image-upload/20200719102713.png" alt="一棵树" style="zoom: 70%;" /><p>其中，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>LCA</mtext><mo stretchy="false">(</mo><mn>3</mn><mo separator="true">,</mo><mn>12</mn><mo stretchy="false">)</mo><mo>=</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">\text{LCA}(3,12)=2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">LCA</span></span><span class="mopen">(</span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>LCA</mtext><mo stretchy="false">(</mo><mn>11</mn><mo separator="true">,</mo><mn>12</mn><mo stretchy="false">)</mo><mo>=</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">\text{LCA}(11,12)=4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">LCA</span></span><span class="mopen">(</span><span class="mord">1</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>LCA</mtext><mo stretchy="false">(</mo><mn>10</mn><mo separator="true">,</mo><mn>14</mn><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\text{LCA}(10,14)=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">LCA</span></span><span class="mopen">(</span><span class="mord">1</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">4</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>LCA</mtext><mo stretchy="false">(</mo><mn>12</mn><mo separator="true">,</mo><mn>2</mn><mo stretchy="false">)</mo><mo>=</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">\text{LCA}(12,2)=2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">LCA</span></span><span class="mopen">(</span><span class="mord">1</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>，而<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>LCA</mtext><mo stretchy="false">(</mo><mn>7</mn><mo separator="true">,</mo><mn>8</mn><mo stretchy="false">)</mo><mi mathvariant="normal">≠</mi><mn>1</mn></mrow><annotation encoding="application/x-tex">\text{LCA}(7,8)\neq 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">LCA</span></span><span class="mopen">(</span><span class="mord">7</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">8</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，因为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>5</mn></mrow><annotation encoding="application/x-tex">5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span></span></span></span>也是他们的公共祖先，并且<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>5</mn></mrow><annotation encoding="application/x-tex">5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span></span></span></span>的深度比<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>大。</p><p>另外，LCA不一定只是在二叉树上才有（<s>废话</s>），上图很明显就不是一个二叉树</p><p>一般来说，LCA有四种求法，即倍增、Tarjan、RMQ+ST表和树链剖分，但本文只记录了三种，没有关于树链剖分的介绍，主要是因为树剖码量比较大，而且如果只是单纯地求某两点的LCA的话很浪费，这玩意用途很大，后面会专门写一篇文章来介绍，到时候反正也要说，所以这里就先不管了</p><h1 id="倍增"><a class="markdownIt-Anchor" href="#倍增"></a> 倍增</h1><p>倍增算是比较常见的求LCA的方法了，同时也是我个人比较喜欢用的一种方法。倍增是在线算法，相当于就是不管什么时候，只要你想求LCA，就可以跑一遍倍增，不需要事先知道所有的输入数据，也就是常说的输入一个回答一个，与之相反的是离线算法，这在Tarjan里面会更详细地讲</p><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>一般来说，当我们还没有学过LCA的算法之前，我们首先想到的是暴力，先把两个点挪到相同的高度，然后把它们一层一层往上挪，它们相遇的时候所在的点就是它们的最近公共祖先，但是很明显，这样子太慢了，首先是需要用DFS预处理出每个节点的父亲及其深度，时间复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，然后每次查询的时间复杂度大约为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>（特殊情况另当别论）</p><p>而倍增相当于是对暴力算法的优化，不再是一层一层地挪，而是用一个<code>fa[u][i]</code>数组来表示<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>的第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>i</mi></msup></mrow><annotation encoding="application/x-tex">2^i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.824664em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span></span></span>个祖先，实现快速移动</p><p>要想理解这一点，首先要理解一点，即通过上述方法，可以使树上的一个点移动到任意一个祖先节点</p><p>假设这个点的深度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>e</mi><msub><mi>p</mi><mi>u</mi></msub></mrow><annotation encoding="application/x-tex">dep_u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">u</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，它的祖先节点的深度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>e</mi><msub><mi>p</mi><mi>v</mi></msub></mrow><annotation encoding="application/x-tex">dep_v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，那么要跳到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>去，之间会经过<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>e</mi><msub><mi>p</mi><mi>u</mi></msub><mo>−</mo><mi>d</mi><mi>e</mi><msub><mi>p</mi><mi>v</mi></msub><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">dep_u-dep_v+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">u</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>个点，我们把这个数转化成二进制（假设为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>5</mn></mrow><annotation encoding="application/x-tex">5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span></span></span></span>），则有：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>5</mn><msub><mo stretchy="false">)</mo><mn>10</mn></msub><mo>=</mo><mo stretchy="false">(</mo><mn>101</mn><msub><mo stretchy="false">)</mo><mn>2</mn></msub><mo>=</mo><msup><mn>2</mn><mn>0</mn></msup><mo>+</mo><msup><mn>2</mn><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">(5)_{10}=(101)_2=2^0+2^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">5</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><p>也就是说，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>只需要先跳到<code>fa[u][0]</code>，再跳到<code>fa[u][2]</code>（这里的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>已经是原来的<code>fa[u][0]</code>了）就可以到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>了</p><p>另外这个数组有一个递推公式，思路也比较简单，就是自己的第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">2^{i-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.824664em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>个父亲的第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">2^{i-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.824664em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>个父亲就是自己的第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>i</mi></msup></mrow><annotation encoding="application/x-tex">2^i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.824664em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span></span></span>个父亲，即<code>fa[u][i]=fa[fa[u][i-1]][i-1]</code></p><p>既然如此，倍增算法的思路也就出来了，在一开始用DFS预处理出所有的<code>fa[u][i]</code>，然后每次查询时先把两点调到相同的高度，再让两点一起移动就可以了，而这两个过程都可以采用上述方法</p><p>但这样又会有一个小问题，我并不知道<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>LCA</mtext><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\text{LCA}(u,v)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">LCA</span></span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span>的深度，没有办法预先知道要跳多少，所以在这个过程中就有可能跳到LCA的上方，这个问题也好解决，既然我不知道哪个祖先是它们的最近公共祖先，那我就干脆不跳到他们的公共祖先，只是跳到最接近它们公共祖先的地方，即它们LCA的下一层，然后最后返回<code>fa[u][0]</code>就可以了，这样判断起来也很容易，如果是跳到了共同的祖先，那么<code>fa[u][i]</code>一定会等于<code>fa[v][i]</code>，所以在每次循环时判断一下就好了</p><p>还有一点，在最后这里<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>一起跳的时候，这个循环的顺序和移动<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>的深度时的顺序是相反的，也就是说这里要把<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>从大往小循环，可以这样理解，这个跳的过程就是为这个深度差的二进制位填<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>的过程，每填一个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，就跳到对应的<code>fa[u][i]</code>（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>为这个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>在二进制数里面的位数），之前我们知道这个值是多少，所以可以从低位开始一位一位按照这个给定的值去填，但此时我们并不知道这个值是多少，所以我们必须要尝试，如果从低位开始，那么有可能这一位本来是为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>的，但填了<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>之后并没有超过原数的大小，只有到后面我们才会发现填错了，而如果从高位开始，那么就不会有这种问题。可以联系一下我们小学时学的比较数的大小的方法，先把最低位对齐，然后从最高位一位一位开始比，如果在某一位上一个数的数字小于另一个，那么就可以判断这个数一定小于那个数，这里也是一样的，如果本来是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，被填成了<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，那么马上就可以发现这个数大于了深度差，也就是跳到了公共祖先上去</p><p>大概的思路就是这样了，可能写的有点迷，要是搞不懂的可以在评论里说一声，我好改进一下</p><h2 id="过程模拟"><a class="markdownIt-Anchor" href="#过程模拟"></a> 过程模拟</h2><p><s>众所周知，手动模拟能解决一切疑惑</s></p><p>我们用上面那棵树来模拟一下这个过程，假设我们求的是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>LCA</mtext><mo stretchy="false">(</mo><mn>13</mn><mo separator="true">,</mo><mn>12</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\text{LCA}(13,12)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">LCA</span></span><span class="mopen">(</span><span class="mord">1</span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mclose">)</span></span></span></span></p><img src="https://cdn.jsdelivr.net/gh/xiao-lin52/image-upload/20200719102713.png" style="zoom: 70%;" /><ol><li>发现<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>12</mn></mrow><annotation encoding="application/x-tex">12</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">2</span></span></span></span>的深度和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>13</mn></mrow><annotation encoding="application/x-tex">13</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">3</span></span></span></span>不一样，并且比它深，所以要将其上移，此时深度的差值为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，因此只需要一次<code>u=fa[u][0]</code>即可解决问题，此时<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>12</mn></mrow><annotation encoding="application/x-tex">12</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">2</span></span></span></span>变为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn></mrow><annotation encoding="application/x-tex">4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span>，而<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn></mrow><annotation encoding="application/x-tex">4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span>不为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>13</mn></mrow><annotation encoding="application/x-tex">13</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">3</span></span></span></span>，所以<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>13</mn></mrow><annotation encoding="application/x-tex">13</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">3</span></span></span></span>并不是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>LCA</mtext><mo stretchy="false">(</mo><mn>13</mn><mo separator="true">,</mo><mn>12</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\text{LCA}(13,12)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">LCA</span></span><span class="mopen">(</span><span class="mord">1</span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mclose">)</span></span></span></span></li><li>然后是上跳，从<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>（点数）的二进制最高位开始试（这里求<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>的二进制最高位的位数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>就是求<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">\log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span></span></span></span>，有一个简便方法：<code>i=log(n)/log(2)+0.5</code>，这个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0.5</mn></mrow><annotation encoding="application/x-tex">0.5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span></span></span></span>是起四舍五入的作用的），首先是<code>fa[4][4]</code>和<code>fa[13][4]</code>，发现它们都等于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，则不管它，继续。然后是<code>fa[4][3]</code>和<code>fa[13][3]</code>，和上面一样，不管，继续。<code>fa[4][2]</code>和<code>fa[13][2]</code>也是都等于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，直到<code>fa[4][1]</code>和<code>fa[13][1]</code>才都等于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，虽然我们知道这就是它们的LCA，但程序并不能分辨这是不是最近的公共祖先，所以还是跳过，最后<code>fa[4][0]=2</code>和<code>fa[13][0]=6</code>，这下才能执行<code>u=fa[u][i],v=fa[v][i]</code>的程序，两个点分别变为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>6</mn></mrow><annotation encoding="application/x-tex">6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span></span></span></span></li><li>最后，返回<code>fa[2][0]=1</code>，求出<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>LCA</mtext><mo stretchy="false">(</mo><mn>13</mn><mo separator="true">,</mo><mn>12</mn><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\text{LCA}(13,12)=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">LCA</span></span><span class="mopen">(</span><span class="mord">1</span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，完毕</li></ol><h2 id="参考代码"><a class="markdownIt-Anchor" href="#参考代码"></a> 参考代码</h2><p>题目：<a href="https://www.luogu.com.cn/problem/P3379">洛谷 P3379 【模板】最近公共祖先（LCA）</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> next;</span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line">&#125;;</span><br><span class="line">Edge edge[<span class="number">1000001</span>];<span class="comment">//记得要建双向边，因为在输入的时候并不知道谁是谁的父亲</span></span><br><span class="line"><span class="keyword">int</span> n,m,s,cnt,head[<span class="number">500001</span>];</span><br><span class="line"><span class="keyword">int</span> log2n,dep[<span class="number">500001</span>],fa[<span class="number">500001</span>][<span class="number">21</span>];</span><br><span class="line"><span class="comment">//log2n上面提到过，记录的是log(n)，dep数组记录每个点的深度，fa[u][i]记录第u个点的第2^i个父亲</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cnt++;</span><br><span class="line">edge[cnt].next=head[u];</span><br><span class="line">edge[cnt].to=v;</span><br><span class="line">head[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> father)</span><span class="comment">//预处理求出dep和fa数组</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">fa[u][<span class="number">0</span>]=father;</span><br><span class="line">dep[u]=dep[father]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;i)&lt;=dep[u];i++)<span class="comment">//1&lt;&lt;i相当于2^i，这里要保证2^i小于u的深度</span></span><br><span class="line">fa[u][i]=fa[fa[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=edge[i].next)</span><br><span class="line"><span class="keyword">if</span>(edge[i].to!=father)</span><br><span class="line">dfs(edge[i].to,u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span><span class="comment">//倍增求LCA</span></span></span><br><span class="line"><span class="function"><span class="comment">//因为u和v的值会在函数里发生改变，所以一定要用传参函数，也就是我们平时习惯的那样</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> depu=dep[u],depv=dep[v];</span><br><span class="line">    <span class="comment">//这里也不能少，和上面一样，u和v的值会在函数里发生改变，但深度又要保持不变，所以另外用两个变量来代替</span></span><br><span class="line"><span class="keyword">if</span>(depu!=depv)<span class="comment">//如果两个点深度不一样，所以需要调到相同高度</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(depu&lt;depv)<span class="comment">//因为默认是移动u点，所以要保证u在v的下方</span></span><br><span class="line">&#123;</span><br><span class="line">swap(u,v);</span><br><span class="line">swap(depu,depv);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=depu-depv;i++)</span><br><span class="line">        <span class="comment">//准确来说这里应该是log(depu-depv)/log(2)+0.5，但我嫌麻烦，而且这样也是对的</span></span><br><span class="line"><span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;i)&amp;(depu-depv))<span class="comment">//判断第(depu-depv)的第i位是否为1，可以自己算一下</span></span><br><span class="line">u=fa[u][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(u==v)<span class="comment">//不要忘了判断，如果这里漏了，那么最后的返回值就是fa[LCA(u,v)][0]</span></span><br><span class="line"><span class="keyword">return</span> u;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=log2n;i&gt;=<span class="number">0</span>;i--)<span class="comment">//从高位向低位填1</span></span><br><span class="line"><span class="keyword">if</span>(fa[u][i]!=fa[v][i])<span class="comment">//判断这一次所跳的点是否为公共祖先</span></span><br><span class="line">&#123;</span><br><span class="line">u=fa[u][i];</span><br><span class="line">v=fa[v][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;s);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">add_edge(x,y);</span><br><span class="line">add_edge(y,x);</span><br><span class="line">&#125;</span><br><span class="line">log2n=<span class="built_in">log</span>(n)/<span class="built_in">log</span>(<span class="number">2</span>)+<span class="number">0.5</span>;</span><br><span class="line">dfs(s,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,lca(a,b));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个程序不算太难，比较简洁，定义的数组也不多，所以我个人（当然也是很多人）比较喜欢这种算法</p><p>倍增的时间复杂度算是比较不错的了，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>预处理，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>查询，同时这个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>一般来说最大也就是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi>e</mi><mn>5</mn></mrow><annotation encoding="application/x-tex">1e5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord mathdefault">e</span><span class="mord">5</span></span></span></span>左右，而<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">\log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span></span></span></span>则不会超过<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>20</mn></mrow><annotation encoding="application/x-tex">20</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">0</span></span></span></span>，所以总体来说是很优秀的</p><h1 id="tarjan"><a class="markdownIt-Anchor" href="#tarjan"></a> Tarjan</h1><p>这个Tarjan并不是求强连通分量的那个Tarjan，只是因为是同一个人发明的，所以都叫一样的名字（误导了我整整一学期=_=），关于这一点有兴趣的同志可以看一下这篇文章：<a href="https://jcf94.com/2017/09/27/2017-09-27-tarjan/">Tarjan 大佬的算法们</a>（根据这篇文章和百度百科看来，Tarjan这个巨佬至少发明了三四种算法和数据结构。。。）</p><p>Tarjan是一种离线算法，也就是说和上面的倍增不同，它需要事先知道我们有哪些问题，然后一次性全部解决掉，好处是时间复杂度很棒，对于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span></span>次询问，Tarjan的时间复杂度仅为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>q</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n+q)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mclose">)</span></span></span></span>，但坏处也显而易见，不够灵活</p><h2 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h2><p>Tarjan其实比较容易理解，先对整棵树进行DFS，在这个过程中，每到一个点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>并搜完这个点所有的子树后，查看有没有要查询的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>LCA</mtext><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\text{LCA}(u,v)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">LCA</span></span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span>（下称“有询问关系”），如果有，再看一下<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>是否遍历完毕，如果是，那么就找<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>的<strong>并查集的祖宗</strong>（也就是并查集的根结点，不是指这棵树上<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>的祖宗），这个祖宗就是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>LCA</mtext><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\text{LCA}(u,v)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">LCA</span></span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span>，最后标记自己已经遍历完毕，并把自己合并到父亲节点上（用并查集）</p><p>这时有一个小问题</p><p>为什么并查集的祖宗就是LCA？？？</p><p>因为在这个过程中，我们是先遍历完所有子树才把自己合并到父亲节点上，此时我们分两种情况讨论，如果<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>互相都不是对方的祖先，那么它们就处在两棵不同的子树上，如果遍历到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>时发现<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>已经被遍历过了，那么此时<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>的并查集的祖宗一定在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>所属的子树分叉的地方，因为这个点的子树还没有遍历完，还差<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>这棵，所以自然也就不会合并到自己的父亲上去，而这个分叉的地方很明显就是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>LCA</mtext><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\text{LCA}(u,v)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">LCA</span></span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span>。如果<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>中某一个点是对方的祖先（假设<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>的祖先），那就更好办了，当遍历到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>时，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>由于自己的子树还没遍历完，所以不会打标记，而回溯到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>时，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>已经遍历完毕，而<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>还没有把自己合并到父亲节点，所以目前<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>的所属的并查集的根是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>，也就是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>LCA</mtext><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo><mo>=</mo><mi>v</mi></mrow><annotation encoding="application/x-tex">\text{LCA}(u,v)=v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">LCA</span></span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span></p><p>搞清楚了这一点，这个算法也就很简单了，如果还有点搞不清楚，那就来手动模拟一次</p><h2 id="过程模拟-2"><a class="markdownIt-Anchor" href="#过程模拟-2"></a> 过程模拟</h2><p>老规矩，上图</p><p><img src="https://cdn.jsdelivr.net/gh/xiao-lin52/image-upload/20200805191802.png" alt="" /></p><p>这次我们多弄一点，要求求出<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>LCA</mtext><mo stretchy="false">(</mo><mn>5</mn><mo separator="true">,</mo><mn>3</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mtext>LCA</mtext><mo stretchy="false">(</mo><mn>7</mn><mo separator="true">,</mo><mn>8</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mtext>LCA</mtext><mo stretchy="false">(</mo><mn>2</mn><mo separator="true">,</mo><mn>5</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mtext>LCA</mtext><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>4</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\text{LCA}(5,3),\text{LCA}(7,8),\text{LCA}(2,5),\text{LCA}(1,4)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">LCA</span></span><span class="mopen">(</span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord text"><span class="mord">LCA</span></span><span class="mopen">(</span><span class="mord">7</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">8</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord text"><span class="mord">LCA</span></span><span class="mopen">(</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">5</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord text"><span class="mord">LCA</span></span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mclose">)</span></span></span></span></p><ol><li>首先从点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>开始，一路向下，一直到点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>5</mn></mrow><annotation encoding="application/x-tex">5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span></span></span></span>，发现这是叶子节点，查看与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>5</mn></mrow><annotation encoding="application/x-tex">5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span></span></span></span>有询问关系的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn></mrow><annotation encoding="application/x-tex">3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>，发现它们都还没有标记，所以不管，标记<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mi>i</mi><msub><mi>s</mi><mn>5</mn></msub><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mi>f</mi><msub><mi>a</mi><mn>5</mn></msub><mo>=</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">vis_5=1,fa_5=2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">i</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>，然后回溯</li><li>回溯到点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>，发现它的子节点都搜完了，而有询问关系的点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>5</mn></mrow><annotation encoding="application/x-tex">5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span></span></span></span>已经被打了标记，所以查看它的祖先为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>，因此<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>LCA</mtext><mo stretchy="false">(</mo><mn>2</mn><mo separator="true">,</mo><mn>5</mn><mo stretchy="false">)</mo><mo>=</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">\text{LCA}(2,5)=2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">LCA</span></span><span class="mopen">(</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">5</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>，标记一下<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mi>i</mi><msub><mi>s</mi><mn>2</mn></msub><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mi>f</mi><msub><mi>a</mi><mn>2</mn></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">vis_2=1,fa_2=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">i</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，回溯</li><li>又到了点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，由于子树还没有搜完，因此暂时不查看与点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>有询问关系的点，也不打标记，先搜一下点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn></mrow><annotation encoding="application/x-tex">3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>，一直往下到点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>7</mn></mrow><annotation encoding="application/x-tex">7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">7</span></span></span></span></li><li>点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>7</mn></mrow><annotation encoding="application/x-tex">7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">7</span></span></span></span>也是个叶子节点，但与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>7</mn></mrow><annotation encoding="application/x-tex">7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">7</span></span></span></span>有询问关系的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>8</mn></mrow><annotation encoding="application/x-tex">8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">8</span></span></span></span>还没有标记，所以也不管，标记<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mi>i</mi><msub><mi>s</mi><mn>7</mn></msub><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mi>f</mi><msub><mi>a</mi><mn>7</mn></msub><mo>=</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">vis_7=1,fa_7=3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">i</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>，回溯到点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn></mrow><annotation encoding="application/x-tex">3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>，接着又搜点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>8</mn></mrow><annotation encoding="application/x-tex">8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">8</span></span></span></span></li><li>到了点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>8</mn></mrow><annotation encoding="application/x-tex">8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">8</span></span></span></span>，发现有询问关系的点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>7</mn></mrow><annotation encoding="application/x-tex">7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">7</span></span></span></span>已经被打了标记，所以查看<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>7</mn></mrow><annotation encoding="application/x-tex">7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">7</span></span></span></span>的祖宗，为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn></mrow><annotation encoding="application/x-tex">3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>，所以<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>LCA</mtext><mo stretchy="false">(</mo><mn>7</mn><mo separator="true">,</mo><mn>8</mn><mo stretchy="false">)</mo><mo>=</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">\text{LCA}(7,8)=3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">LCA</span></span><span class="mopen">(</span><span class="mord">7</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">8</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>，再标记<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mi>i</mi><msub><mi>s</mi><mn>8</mn></msub><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mi>f</mi><msub><mi>a</mi><mn>8</mn></msub><mo>=</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">vis_8=1,fa_8=3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">i</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>，回溯</li><li>回到点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn></mrow><annotation encoding="application/x-tex">3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>，这时点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn></mrow><annotation encoding="application/x-tex">3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>的子节点全部搜完，所以查看与点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn></mrow><annotation encoding="application/x-tex">3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>有询问关系的点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>5</mn></mrow><annotation encoding="application/x-tex">5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span></span></span></span>，发现已经被打了标记，所以查看其祖宗，为点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><msub><mi>a</mi><mn>5</mn></msub><mo>=</mo><mn>2</mn><mo separator="true">,</mo><mi>f</mi><msub><mi>a</mi><mn>2</mn></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">fa_5=2,fa_2=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，并查集基本操作），因此<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>LCA</mtext><mo stretchy="false">(</mo><mn>5</mn><mo separator="true">,</mo><mn>3</mn><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\text{LCA}(5,3)=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">LCA</span></span><span class="mopen">(</span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，老规矩，打个标记，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mi>i</mi><msub><mi>s</mi><mn>3</mn></msub><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mi>f</mi><msub><mi>a</mi><mn>3</mn></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">vis_3=1,fa_3=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">i</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，回溯</li><li>又回到了点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，还是没有搜完它的儿子，所以还是不管，来到点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn></mrow><annotation encoding="application/x-tex">4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span></li><li>这点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn></mrow><annotation encoding="application/x-tex">4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span>也是个叶子节点，与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>有询问关系，但<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>还没被打标记，所以还是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mi>i</mi><msub><mi>s</mi><mn>4</mn></msub><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mi>f</mi><msub><mi>a</mi><mn>4</mn></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">vis_4=1,fa_4=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">i</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，回溯</li><li>回到点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，这回终于把它的儿子搜完了，查看点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn></mrow><annotation encoding="application/x-tex">4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span>的祖宗为点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，因此<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>LCA</mtext><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>4</mn><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\text{LCA}(1,4)=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">LCA</span></span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，搜索结束</li><li>至此，所有要求的LCA都求出来了，直接输出即可</li></ol><p>个人感觉不难懂吧，但顺序一定要整好，先查看有询问关系的点，再标记自己，否则就会出现<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>LCA</mtext><mo stretchy="false">(</mo><mn>2</mn><mo separator="true">,</mo><mn>5</mn><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\text{LCA}(2,5)=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">LCA</span></span><span class="mopen">(</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">5</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>的事情</p><h2 id="参考代码-2"><a class="markdownIt-Anchor" href="#参考代码-2"></a> 参考代码</h2><p>老实说我个人并不是很喜欢用Tarjan算法来求<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>LCA</mtext></mrow><annotation encoding="application/x-tex">\text{LCA}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord text"><span class="mord">LCA</span></span></span></span></span>，因为这玩意数组太多，相对应的函数也很多，整个码量都比较大，不过有时候题目可能会强制离线，比如设置一大堆询问这种，这时候用倍增就有可能会超时，所以还是应该掌握这种算法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> next;</span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Que</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> next;</span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line"><span class="keyword">int</span> p;<span class="comment">//p表示的是这个询问对应的是第几个问题，方便最后按照顺序输出答案</span></span><br><span class="line">&#125;;</span><br><span class="line">Edge edge[<span class="number">1000001</span>];</span><br><span class="line">Que que[<span class="number">1000001</span>];<span class="comment">//我这里使用链式前向星存储询问，这样便于查询某一个点的所有询问，而不用每次都遍历所有问题</span></span><br><span class="line">                 <span class="comment">//其实是因为当时我太弱了，否则用vector来存其实更方便</span></span><br><span class="line"><span class="keyword">int</span> n,m,s,cnt,f[<span class="number">500001</span>],head[<span class="number">500001</span>],queh[<span class="number">500001</span>],vis[<span class="number">500001</span>],ans[<span class="number">500001</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span><span class="comment">//并查集基础操作不解释</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> f[x]==x?f[x]:f[x]=find(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cnt++;</span><br><span class="line">edge[cnt].next=head[u];</span><br><span class="line">edge[cnt].to=v;</span><br><span class="line">head[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_que</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cnt++;</span><br><span class="line">que[cnt].next=queh[u];</span><br><span class="line">que[cnt].to=v;</span><br><span class="line">que[cnt].p=i;</span><br><span class="line">queh[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> father)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=edge[i].next)<span class="comment">//首先搜索这个点的所有子树</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=edge[i].to;</span><br><span class="line"><span class="keyword">if</span>(v!=father&amp;&amp;!vis[v])</span><br><span class="line">&#123;</span><br><span class="line">lca(v,u);</span><br><span class="line">f[find(v)]=find(u);<span class="comment">//这里我是回溯到父节点时才打标记，效果和上面说的查看完所有询问再标记是一样的</span></span><br><span class="line">                               <span class="comment">//另外，其实直接f[v]=u就可以了，这里只是打并查集习惯了而已</span></span><br><span class="line">vis[v]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=queh[u];i;i=que[i].next)<span class="comment">//查看所有询问，如果对方已经被打了标记，就求出答案</span></span><br><span class="line"><span class="keyword">if</span>(vis[que[i].to])</span><br><span class="line">ans[que[i].p]=find(que[i].to);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;s);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">f[i]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;u,&amp;v);</span><br><span class="line">add_edge(u,v);</span><br><span class="line">add_edge(v,u);</span><br><span class="line">&#125;</span><br><span class="line">cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">add_que(a,b,i);<span class="comment">//这里要建双向边，但对应的p值应该是一样的</span></span><br><span class="line">add_que(b,a,i);</span><br><span class="line">&#125;</span><br><span class="line">lca(s,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个过程还是很简单，如果还有什么不懂的可以在评论里问<s>反正也不会有人看我博客的</s></p><h1 id="rmqst表"><a class="markdownIt-Anchor" href="#rmqst表"></a> RMQ+ST表</h1><p>这也是一种在线算法，时间复杂度很强，预处理<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，而询问只需要<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>，不过有点难想，最重要的就是怎样把求LCA转化成RMQ，以及为什么这样做是对的，搞懂了这一点后，代码其实就好写了</p><p>关于ST表以及相应的用它来求RMQ，请自行上网查找，这里不再赘述</p><h2 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h2><p>在开始之前，我们先引入一个东西，欧拉序列</p><p>所谓欧拉序列，其实就是一棵树的DFS序，只不过每到一个节点都得记录一下，就连回溯时也是一样</p><p>以上面Tarjan算法那张图为例</p><p><img src="https://cdn.jsdelivr.net/gh/xiao-lin52/image-upload/20200805191802.png" alt="" /></p><p>这棵树的欧拉序列是这样的</p><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th><th style="text-align:center">7</th><th style="text-align:center">8</th><th style="text-align:center">9</th><th style="text-align:center">10</th><th style="text-align:center">11</th><th style="text-align:center">12</th><th style="text-align:center">13</th></tr></thead><tbody><tr><td style="text-align:center">点</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">5</td><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">3</td><td style="text-align:center">7</td><td style="text-align:center">3</td><td style="text-align:center">8</td><td style="text-align:center">3</td><td style="text-align:center">1</td><td style="text-align:center">4</td><td style="text-align:center">1</td></tr></tbody></table><p>这个序列的长度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>为这棵树的点数（其实上面这张图只有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>7</mn></mrow><annotation encoding="application/x-tex">7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">7</span></span></span></span>个点，我漏了一个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>6</mn></mrow><annotation encoding="application/x-tex">6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span></span></span></span>。。。），这个看网上都很少有证明的，虽然不是很重要，但我觉得还是应该知道为妙</p><p>首先设点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>u</mi></msub></mrow><annotation encoding="application/x-tex">x_u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">u</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>个儿子，点的标号从<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>，易得，点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>在这个序列中出现的次数为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>u</mi></msub><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">x_u+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">u</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，因为每个儿子回溯时都会出现一次，同时一开始从父亲下来的时候还会出现一次</p><p>容易得出</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>x</mi><mi>i</mi></msub><mo>=</mo><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\sum\limits_{i=1}^n x_i=n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p><p>因为每个点会且只会被算一次（因为每个点只有一个父亲嘛），同时点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>作为根节点，没有父亲，所以是没有被算过的，要减去<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p><p>这样的话，所有点在这个序列中出现的总次数，也就是这个序列的长度，就是</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>e</mi><mi>n</mi><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>x</mi><mi>i</mi></msub><mo>+</mo><mn>1</mn><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>x</mi><mi>i</mi></msub><mo>+</mo><mi>n</mi><mo>=</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>+</mo><mi>n</mi><mo>=</mo><mn>2</mn><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">len=\sum\limits_{i=1}^{n}x_i+1=\sum\limits_{i=1}^nx_i+n=n-1+n=2n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p><p>完事</p><p>好了，回归正题，既然有了欧拉序列，我们就可以把树上问题转化成序列问题了</p><p>不过问题来了，你怎么知道这就是RMQ呢？</p><p>我们来看，对于任意两点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>，设它们第一次出现的位置的序号为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mi>o</mi><msub><mi>s</mi><mi>u</mi></msub></mrow><annotation encoding="application/x-tex">pos_u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">u</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mi>o</mi><msub><mi>s</mi><mi>v</mi></msub></mrow><annotation encoding="application/x-tex">pos_v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，且<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mi>o</mi><msub><mi>s</mi><mi>u</mi></msub><mo>&lt;</mo><mi>p</mi><mi>o</mi><msub><mi>s</mi><mi>v</mi></msub></mrow><annotation encoding="application/x-tex">pos_u&lt;pos_v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">u</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>（大不了如果不满足的话可以把<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>换一下嘛，不影响），那么在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mi>o</mi><msub><mi>s</mi><mi>u</mi></msub></mrow><annotation encoding="application/x-tex">pos_u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">u</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mi>o</mi><msub><mi>s</mi><mi>v</mi></msub></mrow><annotation encoding="application/x-tex">pos_v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>之间，深度最浅的点是哪个？</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>LCA</mtext><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\text{LCA}(u,v)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">LCA</span></span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span>！</p><p>这个可以结合Tarjan算法的并查集合并来想，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>要么是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>的祖先，要么不是（因为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>在序列中先出现，所以如果有一个点是对方的祖先的话，那么<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>一定深度更浅，也就一定是对方的祖先），如果是的话，由于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>的子树上的点，所以在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>第一次出现的时候，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>的子树一定还没有搜完，也就不可能回溯到比<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>更浅的点，所以在这段区间中，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>的深度一定是最浅的。如果不是，那么<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>一定处在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>LCA</mtext><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\text{LCA}(u,v)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">LCA</span></span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span>的两棵不同的子树上，而在搜完自己所有的子树前，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>LCA</mtext><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\text{LCA}(u,v)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">LCA</span></span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span>是不会回溯的，所以它也是这段区间中最浅的点，所以，对于任意两个点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>和点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mi>o</mi><msub><mi>s</mi><mi>u</mi></msub><mo>&lt;</mo><mi>p</mi><mi>o</mi><msub><mi>s</mi><mi>v</mi></msub></mrow><annotation encoding="application/x-tex">pos_u&lt;pos_v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">u</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>），我们只需要找到在序列中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mi>o</mi><msub><mi>s</mi><mi>u</mi></msub></mrow><annotation encoding="application/x-tex">pos_u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">u</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mi>o</mi><msub><mi>s</mi><mi>v</mi></msub></mrow><annotation encoding="application/x-tex">pos_v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>之间的深度最小的点，就可以找到它们的LCA，而这很明显就是RMQ</p><p>那么为什么非要取每个点第一次出现的位置来作为区间的起讫点呢（<s>不然你想取第几个啊喂</s>）？其实主要还是为了方便，因为有的点只会出现一次嘛，所以记录第一次出现的位置是最方便的了（当然也有可能是其他原因，不过我不太清楚，如果哪位大佬知道可以在评论里说一下）</p><p>知道以上几点之后，思路就很简单了，我们先DFS一遍，求出欧拉序列，然后预处理ST表，最后查询就完事了</p><h2 id="参考代码-3"><a class="markdownIt-Anchor" href="#参考代码-3"></a> 参考代码</h2><p>这玩意的代码比较难懂，我个人其实也不是很喜欢用</p><p>另外，这里面的ST表数组（也就是那个dp）记录的其实是<strong>序列中从</strong><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span><strong>到</strong><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mo>+</mo><msup><mn>2</mn><mi>j</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">i+2^j-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.907994em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span><strong>这个区间里的点中具有最小深度的点在这个序列中的下标</strong>，并不是最小深度，因为我们只关心这个点是哪个点，而不关心它的具体深度</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> next;</span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line">&#125;;</span><br><span class="line">Edge edge[<span class="number">1000001</span>];</span><br><span class="line"><span class="keyword">int</span> n,m,s,cnt,k,head[<span class="number">500001</span>],f[<span class="number">1000001</span>],dep[<span class="number">1000001</span>],p[<span class="number">500001</span>],dp[<span class="number">1000001</span>][<span class="number">21</span>];</span><br><span class="line"><span class="comment">//f是欧拉序列，dep是序列中每个位置的点的深度，p是每个点在这个序列中第一次出现的位置</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cnt++;</span><br><span class="line">edge[cnt].next=head[u];</span><br><span class="line">edge[cnt].to=v;</span><br><span class="line">head[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> father,<span class="keyword">int</span> depth)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">k++;</span><br><span class="line">dep[k]=depth;</span><br><span class="line">f[k]=u;</span><br><span class="line">p[u]=k;<span class="comment">//这是从父亲节点下来的那一次，所以一定是这个点在序列中第一次出现</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=edge[i].next)</span><br><span class="line"><span class="keyword">if</span>(edge[i].to!=father)</span><br><span class="line">&#123;</span><br><span class="line">dfs(edge[i].to,u,depth+<span class="number">1</span>);</span><br><span class="line">k++;<span class="comment">//搜完一棵子树回溯时也要记录</span></span><br><span class="line">dep[k]=depth;</span><br><span class="line">f[k]=u;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RMQ</span><span class="params">()</span><span class="comment">//ST表初始化</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>*n<span class="number">-1</span>;i++)</span><br><span class="line">dp[i][<span class="number">0</span>]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;i)&lt;=<span class="number">2</span>*n<span class="number">-1</span>;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j+(<span class="number">1</span>&lt;&lt;i)<span class="number">-1</span>&lt;=<span class="number">2</span>*n<span class="number">-1</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a=dp[j][i<span class="number">-1</span>],b=dp[j+(<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>))][i<span class="number">-1</span>];</span><br><span class="line">dp[j][i]=dep[a]&lt;dep[b]? a:b;<span class="comment">//记录下标，而不是深度</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span><span class="comment">//查询</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t=<span class="built_in">log</span>(r-l)/<span class="built_in">log</span>(<span class="number">2.0</span>);</span><br><span class="line"><span class="keyword">int</span> a=dp[l][t],b=dp[r-(<span class="number">1</span>&lt;&lt;t)+<span class="number">1</span>][t];</span><br><span class="line"><span class="keyword">return</span> dep[a]&lt;dep[b]? f[a]:f[b];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;s);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">add_edge(x,y);</span><br><span class="line">add_edge(y,x);</span><br><span class="line">&#125;</span><br><span class="line">dfs(s,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">RMQ();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,query(min(p[a],p[b]),max(p[a],p[b])));<span class="comment">//这里就相当于调换顺序</span></span><br><span class="line">                                                            <span class="comment">//当然也可以在函数中比较两者大小</span></span><br><span class="line">                                                            <span class="comment">//如果前大后小，就调换顺序</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="相关题目"><a class="markdownIt-Anchor" href="#相关题目"></a> 相关题目</h1><ul><li><p><a href="https://www.luogu.com.cn/problem/SP14932">SP14932 LCA - Lowest Common Ancestor</a>（板子题）</p></li><li><p><a href="https://www.luogu.com.cn/problem/P2420">P2420 让我们异或吧</a>（LCA结合路径查询，其实用树剖要好整一点，不过倍增也可以解决）</p></li><li><p><a href="https://www.luogu.com.cn/problem/P3398">P3398 仓鼠找sugar</a>（主要是证明树上两条路径相交的条件，与LCA有大关系）</p></li><li><p><a href="https://www.luogu.com.cn/problem/P2245">P2245 星际导航</a>（最小生成树+LCA，这玩意整整恶心了我一个半小时）</p></li><li><p><a href="https://www.luogu.com.cn/problem/P3258">P3258 [JLOI2014]松鼠的新家</a>（LCA+树上差分，也是很常见的组合了）</p></li><li><p><a href="https://www.luogu.com.cn/problem/CF191C">CF191C Fools and Roads</a>（LCA+树上差分）</p></li></ul><p>LCA其实也不算多难的算法吧，但这玩意如果是和其他东西结合起来，可以让人觉得十分恶心，所以还是应该加强训练，提高自己的水平</p>]]></content>
    
    
    <summary type="html">主要记录了求最近公共祖先的三种方法</summary>
    
    
    
    <category term="学习笔记" scheme="http://beta.azusemisa.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="LCA" scheme="http://beta.azusemisa.top/tags/LCA/"/>
    
    <category term="图论" scheme="http://beta.azusemisa.top/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>Emoji一览表</title>
    <link href="http://beta.azusemisa.top/posts/2868108500.html"/>
    <id>http://beta.azusemisa.top/posts/2868108500.html</id>
    <published>2020-05-30T02:53:30.000Z</published>
    <updated>2020-08-17T12:43:37.980Z</updated>
    
    <content type="html"><![CDATA[<p>这张表用来便于预览和复制Emoji语法，<a href="https://gitee.com/yeshang5/emoji-cheat-sheet">源地址</a></p><a id="more"></a><h1 id="people"><a class="markdownIt-Anchor" href="#people"></a> People</h1><table><thead><tr><th style="text-align:center">预览</th><th style="text-align:center">语法</th><th style="text-align:center">预览</th><th style="text-align:center">语法</th><th style="text-align:center">预览</th><th style="text-align:center">语法</th></tr></thead><tbody><tr><td style="text-align:center">:bowtie:</td><td style="text-align:center"><code>:bowtie:</code></td><td style="text-align:center">😄</td><td style="text-align:center"><code>:smile:</code></td><td style="text-align:center">😃</td><td style="text-align:center"><code>:smiley:</code></td></tr><tr><td style="text-align:center">☺️</td><td style="text-align:center"><code>:relaxed:</code></td><td style="text-align:center">😏</td><td style="text-align:center"><code>:smirk:</code></td><td style="text-align:center">😍</td><td style="text-align:center"><code>:heart_eyes:</code></td></tr><tr><td style="text-align:center">😘</td><td style="text-align:center"><code>:kissing_heart:</code></td><td style="text-align:center">😚</td><td style="text-align:center"><code>:kissing_closed_eyes:</code></td><td style="text-align:center">😳</td><td style="text-align:center"><code>:flushed:</code></td></tr><tr><td style="text-align:center">😌</td><td style="text-align:center"><code>:relieved:</code></td><td style="text-align:center">😆</td><td style="text-align:center"><code>:satisfied:</code></td><td style="text-align:center">😁</td><td style="text-align:center"><code>:grin:</code></td></tr><tr><td style="text-align:center">😉</td><td style="text-align:center"><code>:wink:</code></td><td style="text-align:center">😜</td><td style="text-align:center"><code>:stuck_out_tongue_winking_eye:</code></td><td style="text-align:center">😝</td><td style="text-align:center"><code>:stuck_out_tongue_closed_eyes:</code></td></tr><tr><td style="text-align:center">😀</td><td style="text-align:center"><code>:grinning:</code></td><td style="text-align:center">😗</td><td style="text-align:center"><code>:kissing:</code></td><td style="text-align:center">😙</td><td style="text-align:center"><code>:kissing_smiling_eyes:</code></td></tr><tr><td style="text-align:center">😛</td><td style="text-align:center"><code>:stuck_out_tongue:</code></td><td style="text-align:center">😴</td><td style="text-align:center"><code>:sleeping:</code></td><td style="text-align:center">😟</td><td style="text-align:center"><code>:worried:</code></td></tr><tr><td style="text-align:center">😧</td><td style="text-align:center"><code>:anguished:</code></td><td style="text-align:center">😮</td><td style="text-align:center"><code>:open_mouth:</code></td><td style="text-align:center">😬</td><td style="text-align:center"><code>:grimacing:</code></td></tr><tr><td style="text-align:center">😕</td><td style="text-align:center"><code>:confused:</code></td><td style="text-align:center">😯</td><td style="text-align:center"><code>:hushed:</code></td><td style="text-align:center">😑</td><td style="text-align:center"><code>:expressionless:</code></td></tr><tr><td style="text-align:center">😒</td><td style="text-align:center"><code>:unamused:</code></td><td style="text-align:center">😅</td><td style="text-align:center"><code>:sweat_smile:</code></td><td style="text-align:center">😓</td><td style="text-align:center"><code>:sweat:</code></td></tr><tr><td style="text-align:center">😥</td><td style="text-align:center"><code>:disappointed_relieved:</code></td><td style="text-align:center">😩</td><td style="text-align:center"><code>:weary:</code></td><td style="text-align:center">😔</td><td style="text-align:center"><code>:pensive:</code></td></tr><tr><td style="text-align:center">😞</td><td style="text-align:center"><code>:disappointed:</code></td><td style="text-align:center">😖</td><td style="text-align:center"><code>:confounded:</code></td><td style="text-align:center">😨</td><td style="text-align:center"><code>:fearful:</code></td></tr><tr><td style="text-align:center">😰</td><td style="text-align:center"><code>:cold_sweat:</code></td><td style="text-align:center">😣</td><td style="text-align:center"><code>:persevere:</code></td><td style="text-align:center">😢</td><td style="text-align:center"><code>:cry:</code></td></tr><tr><td style="text-align:center">😭</td><td style="text-align:center"><code>:sob:</code></td><td style="text-align:center">😂</td><td style="text-align:center"><code>:joy:</code></td><td style="text-align:center">😲</td><td style="text-align:center"><code>:astonished:</code></td></tr><tr><td style="text-align:center">😱</td><td style="text-align:center"><code>:scream:</code></td><td style="text-align:center">:neckbeard:</td><td style="text-align:center"><code>:neckbeard:</code></td><td style="text-align:center">😫</td><td style="text-align:center"><code>:tired_face:</code></td></tr><tr><td style="text-align:center">😠</td><td style="text-align:center"><code>:angry:</code></td><td style="text-align:center">😡</td><td style="text-align:center"><code>:rage:</code></td><td style="text-align:center">😤</td><td style="text-align:center"><code>:triumph:</code></td></tr><tr><td style="text-align:center">😪</td><td style="text-align:center"><code>:sleepy:</code></td><td style="text-align:center">😋</td><td style="text-align:center"><code>:yum:</code></td><td style="text-align:center">😷</td><td style="text-align:center"><code>:mask:</code></td></tr><tr><td style="text-align:center">😎</td><td style="text-align:center"><code>:sunglasses:</code></td><td style="text-align:center">😵</td><td style="text-align:center"><code>:dizzy_face:</code></td><td style="text-align:center">👿</td><td style="text-align:center"><code>:imp:</code></td></tr><tr><td style="text-align:center">😈</td><td style="text-align:center"><code>:smiling_imp:</code></td><td style="text-align:center">😐</td><td style="text-align:center"><code>:neutral_face:</code></td><td style="text-align:center">😶</td><td style="text-align:center"><code>:no_mouth:</code></td></tr><tr><td style="text-align:center">😇</td><td style="text-align:center"><code>:innocent:</code></td><td style="text-align:center">👽</td><td style="text-align:center"><code>:alien:</code></td><td style="text-align:center">💛</td><td style="text-align:center"><code>:yellow_heart:</code></td></tr><tr><td style="text-align:center">💙</td><td style="text-align:center"><code>:blue_heart:</code></td><td style="text-align:center">💜</td><td style="text-align:center"><code>:purple_heart:</code></td><td style="text-align:center">❤️</td><td style="text-align:center"><code>:heart:</code></td></tr><tr><td style="text-align:center">💚</td><td style="text-align:center"><code>:green_heart:</code></td><td style="text-align:center">💔</td><td style="text-align:center"><code>:broken_heart:</code></td><td style="text-align:center">💓</td><td style="text-align:center"><code>:heartbeat:</code></td></tr><tr><td style="text-align:center">💗</td><td style="text-align:center"><code>:heartpulse:</code></td><td style="text-align:center">💕</td><td style="text-align:center"><code>:two_hearts:</code></td><td style="text-align:center">💞</td><td style="text-align:center"><code>:revolving_hearts:</code></td></tr><tr><td style="text-align:center">💘</td><td style="text-align:center"><code>:cupid:</code></td><td style="text-align:center">💖</td><td style="text-align:center"><code>:sparkling_heart:</code></td><td style="text-align:center">✨</td><td style="text-align:center"><code>:sparkles:</code></td></tr><tr><td style="text-align:center">⭐️</td><td style="text-align:center"><code>:star:</code></td><td style="text-align:center">🌟</td><td style="text-align:center"><code>:star2:</code></td><td style="text-align:center">💫</td><td style="text-align:center"><code>:dizzy:</code></td></tr><tr><td style="text-align:center">💥</td><td style="text-align:center"><code>:collision:</code></td><td style="text-align:center">💢</td><td style="text-align:center"><code>:anger:</code></td><td style="text-align:center">❗️</td><td style="text-align:center"><code>:exclamation:</code></td></tr><tr><td style="text-align:center">❓</td><td style="text-align:center"><code>:question:</code></td><td style="text-align:center">❕</td><td style="text-align:center"><code>:grey_exclamation:</code></td><td style="text-align:center">❔</td><td style="text-align:center"><code>:grey_question:</code></td></tr><tr><td style="text-align:center">💤</td><td style="text-align:center"><code>:zzz:</code></td><td style="text-align:center">💨</td><td style="text-align:center"><code>:dash:</code></td><td style="text-align:center">💦</td><td style="text-align:center"><code>:sweat_drops:</code></td></tr><tr><td style="text-align:center">🎶</td><td style="text-align:center"><code>:notes:</code></td><td style="text-align:center">🎵</td><td style="text-align:center"><code>:musical_note:</code></td><td style="text-align:center">🔥</td><td style="text-align:center"><code>:fire:</code></td></tr><tr><td style="text-align:center">💩</td><td style="text-align:center"><code>:hankey:</code></td><td style="text-align:center">💩</td><td style="text-align:center"><code>:poop:</code></td><td style="text-align:center">💩</td><td style="text-align:center"><code>:shit:</code></td></tr><tr><td style="text-align:center">👍</td><td style="text-align:center"><code>:+1:</code></td><td style="text-align:center">👍</td><td style="text-align:center"><code>:thumbsup:</code></td><td style="text-align:center">👎</td><td style="text-align:center"><code>:-1:</code></td></tr><tr><td style="text-align:center">👎</td><td style="text-align:center"><code>:thumbsdown:</code></td><td style="text-align:center">👌</td><td style="text-align:center"><code>:ok_hand:</code></td><td style="text-align:center">👊</td><td style="text-align:center"><code>:punch:</code></td></tr><tr><td style="text-align:center">👊</td><td style="text-align:center"><code>:facepunch:</code></td><td style="text-align:center">✊</td><td style="text-align:center"><code>:fist:</code></td><td style="text-align:center">✌️</td><td style="text-align:center"><code>:v:</code></td></tr><tr><td style="text-align:center">👋</td><td style="text-align:center"><code>:wave:</code></td><td style="text-align:center">✋</td><td style="text-align:center"><code>:hand:</code></td><td style="text-align:center">✋</td><td style="text-align:center"><code>:raised_hand:</code></td></tr><tr><td style="text-align:center">👐</td><td style="text-align:center"><code>:open_hands:</code></td><td style="text-align:center">☝️</td><td style="text-align:center"><code>:point_up:</code></td><td style="text-align:center">👇</td><td style="text-align:center"><code>:point_down:</code></td></tr><tr><td style="text-align:center">👈</td><td style="text-align:center"><code>:point_left:</code></td><td style="text-align:center">👉</td><td style="text-align:center"><code>:point_right:</code></td><td style="text-align:center">🙌</td><td style="text-align:center"><code>:raised_hands:</code></td></tr><tr><td style="text-align:center">🙏</td><td style="text-align:center"><code>:pray:</code></td><td style="text-align:center">👆</td><td style="text-align:center"><code>:point_up_2:</code></td><td style="text-align:center">👏</td><td style="text-align:center"><code>:clap:</code></td></tr><tr><td style="text-align:center">💪</td><td style="text-align:center"><code>:muscle:</code></td><td style="text-align:center">🤘</td><td style="text-align:center"><code>:metal:</code></td><td style="text-align:center">🖕</td><td style="text-align:center"><code>:fu:</code></td></tr><tr><td style="text-align:center">🏃</td><td style="text-align:center"><code>:runner:</code></td><td style="text-align:center">🏃</td><td style="text-align:center"><code>:running:</code></td><td style="text-align:center">👫</td><td style="text-align:center"><code>:couple:</code></td></tr><tr><td style="text-align:center">👪</td><td style="text-align:center"><code>:family:</code></td><td style="text-align:center">👬</td><td style="text-align:center"><code>:two_men_holding_hands:</code></td><td style="text-align:center">👭</td><td style="text-align:center"><code>:two_women_holding_hands:</code></td></tr><tr><td style="text-align:center">💃</td><td style="text-align:center"><code>:dancer:</code></td><td style="text-align:center">👯</td><td style="text-align:center"><code>:dancers:</code></td><td style="text-align:center">🙆</td><td style="text-align:center"><code>:ok_woman:</code></td></tr><tr><td style="text-align:center">🙅</td><td style="text-align:center"><code>:no_good:</code></td><td style="text-align:center">💁</td><td style="text-align:center"><code>:information_desk_person:</code></td><td style="text-align:center">🙋</td><td style="text-align:center"><code>:raising_hand:</code></td></tr><tr><td style="text-align:center">👰</td><td style="text-align:center"><code>:bride_with_veil:</code></td><td style="text-align:center">🙎</td><td style="text-align:center"><code>:person_with_pouting_face:</code></td><td style="text-align:center">🙍</td><td style="text-align:center"><code>:person_frowning:</code></td></tr><tr><td style="text-align:center">🙇</td><td style="text-align:center"><code>:bow:</code></td><td style="text-align:center">:couplekiss:</td><td style="text-align:center"><code>:couplekiss:</code></td><td style="text-align:center">💑</td><td style="text-align:center"><code>:couple_with_heart:</code></td></tr><tr><td style="text-align:center">💆</td><td style="text-align:center"><code>:massage:</code></td><td style="text-align:center">💇</td><td style="text-align:center"><code>:haircut:</code></td><td style="text-align:center">💅</td><td style="text-align:center"><code>:nail_care:</code></td></tr><tr><td style="text-align:center">👦</td><td style="text-align:center"><code>:boy:</code></td><td style="text-align:center">👧</td><td style="text-align:center"><code>:girl:</code></td><td style="text-align:center">👩</td><td style="text-align:center"><code>:woman:</code></td></tr><tr><td style="text-align:center">👨</td><td style="text-align:center"><code>:man:</code></td><td style="text-align:center">👶</td><td style="text-align:center"><code>:baby:</code></td><td style="text-align:center">👵</td><td style="text-align:center"><code>:older_woman:</code></td></tr><tr><td style="text-align:center">👴</td><td style="text-align:center"><code>:older_man:</code></td><td style="text-align:center">👱</td><td style="text-align:center"><code>:person_with_blond_hair:</code></td><td style="text-align:center">👲</td><td style="text-align:center"><code>:man_with_gua_pi_mao:</code></td></tr><tr><td style="text-align:center">👳</td><td style="text-align:center"><code>:man_with_turban:</code></td><td style="text-align:center">👷</td><td style="text-align:center"><code>:construction_worker:</code></td><td style="text-align:center">👮</td><td style="text-align:center"><code>:cop:</code></td></tr><tr><td style="text-align:center">👼</td><td style="text-align:center"><code>:angel:</code></td><td style="text-align:center">👸</td><td style="text-align:center"><code>:princess:</code></td><td style="text-align:center">😺</td><td style="text-align:center"><code>:smiley_cat:</code></td></tr><tr><td style="text-align:center">😸</td><td style="text-align:center"><code>:smile_cat:</code></td><td style="text-align:center">😻</td><td style="text-align:center"><code>:heart_eyes_cat:</code></td><td style="text-align:center">😽</td><td style="text-align:center"><code>:kissing_cat:</code></td></tr><tr><td style="text-align:center">😼</td><td style="text-align:center"><code>:smirk_cat:</code></td><td style="text-align:center">🙀</td><td style="text-align:center"><code>:scream_cat:</code></td><td style="text-align:center">😿</td><td style="text-align:center"><code>:crying_cat_face:</code></td></tr><tr><td style="text-align:center">😹</td><td style="text-align:center"><code>:joy_cat:</code></td><td style="text-align:center">😾</td><td style="text-align:center"><code>:pouting_cat:</code></td><td style="text-align:center">👹</td><td style="text-align:center"><code>:japanese_ogre:</code></td></tr><tr><td style="text-align:center">👺</td><td style="text-align:center"><code>:japanese_goblin:</code></td><td style="text-align:center">🙈</td><td style="text-align:center"><code>:see_no_evil:</code></td><td style="text-align:center">🙉</td><td style="text-align:center"><code>:hear_no_evil:</code></td></tr><tr><td style="text-align:center">🙊</td><td style="text-align:center"><code>:speak_no_evil:</code></td><td style="text-align:center">💂</td><td style="text-align:center"><code>:guardsman:</code></td><td style="text-align:center">💀</td><td style="text-align:center"><code>:skull:</code></td></tr><tr><td style="text-align:center">🐾</td><td style="text-align:center"><code>:feet:</code></td><td style="text-align:center">👄</td><td style="text-align:center"><code>:lips:</code></td><td style="text-align:center">💋</td><td style="text-align:center"><code>:kiss:</code></td></tr><tr><td style="text-align:center">💧</td><td style="text-align:center"><code>:droplet:</code></td><td style="text-align:center">👂</td><td style="text-align:center"><code>:ear:</code></td><td style="text-align:center">👀</td><td style="text-align:center"><code>:eyes:</code></td></tr><tr><td style="text-align:center">👃</td><td style="text-align:center"><code>:nose:</code></td><td style="text-align:center">👅</td><td style="text-align:center"><code>:tongue:</code></td><td style="text-align:center">💌</td><td style="text-align:center"><code>:love_letter:</code></td></tr><tr><td style="text-align:center">👤</td><td style="text-align:center"><code>:bust_in_silhouette:</code></td><td style="text-align:center">👥</td><td style="text-align:center"><code>:busts_in_silhouette:</code></td><td style="text-align:center">💬</td><td style="text-align:center"><code>:speech_balloon:</code></td></tr><tr><td style="text-align:center">💭</td><td style="text-align:center"><code>:thought_balloon:</code></td><td style="text-align:center">:feelsgood:</td><td style="text-align:center"><code>:feelsgood:</code></td><td style="text-align:center">:finnadie:</td><td style="text-align:center"><code>:finnadie:</code></td></tr><tr><td style="text-align:center">:goberserk:</td><td style="text-align:center"><code>:goberserk:</code></td><td style="text-align:center">:godmode:</td><td style="text-align:center"><code>:godmode:</code></td><td style="text-align:center">:hurtrealbad:</td><td style="text-align:center"><code>:hurtrealbad:</code></td></tr><tr><td style="text-align:center">:rage1:</td><td style="text-align:center"><code>:rage1:</code></td><td style="text-align:center">:rage2:</td><td style="text-align:center"><code>:rage2:</code></td><td style="text-align:center">:rage3:</td><td style="text-align:center"><code>:rage3:</code></td></tr><tr><td style="text-align:center">:rage4:</td><td style="text-align:center"><code>:rage4:</code></td><td style="text-align:center">:suspect:</td><td style="text-align:center"><code>:suspect:</code></td><td style="text-align:center">:trollface:</td><td style="text-align:center"><code>:trollface:</code></td></tr></tbody></table><h1 id="nature"><a class="markdownIt-Anchor" href="#nature"></a> Nature</h1><table><thead><tr><th style="text-align:center">预览</th><th style="text-align:center">语法</th><th style="text-align:center">预览</th><th style="text-align:center">语法</th><th style="text-align:center">预览</th><th style="text-align:center">语法</th></tr></thead><tbody><tr><td style="text-align:center">☀️</td><td style="text-align:center"><code>:sunny:</code></td><td style="text-align:center">☔️</td><td style="text-align:center"><code>:umbrella:</code></td><td style="text-align:center">☁️</td><td style="text-align:center"><code>:cloud:</code></td></tr><tr><td style="text-align:center">❄️</td><td style="text-align:center"><code>:snowflake:</code></td><td style="text-align:center">⛄️</td><td style="text-align:center"><code>:snowman:</code></td><td style="text-align:center">⚡️</td><td style="text-align:center"><code>:zap:</code></td></tr><tr><td style="text-align:center">🌀</td><td style="text-align:center"><code>:cyclone:</code></td><td style="text-align:center">🌁</td><td style="text-align:center"><code>:foggy:</code></td><td style="text-align:center">🌊</td><td style="text-align:center"><code>:ocean:</code></td></tr><tr><td style="text-align:center">🐱</td><td style="text-align:center"><code>:cat:</code></td><td style="text-align:center">🐶</td><td style="text-align:center"><code>:dog:</code></td><td style="text-align:center">🐭</td><td style="text-align:center"><code>:mouse:</code></td></tr><tr><td style="text-align:center">🐹</td><td style="text-align:center"><code>:hamster:</code></td><td style="text-align:center">🐰</td><td style="text-align:center"><code>:rabbit:</code></td><td style="text-align:center">🐺</td><td style="text-align:center"><code>:wolf:</code></td></tr><tr><td style="text-align:center">🐸</td><td style="text-align:center"><code>:frog:</code></td><td style="text-align:center">🐯</td><td style="text-align:center"><code>:tiger:</code></td><td style="text-align:center">🐨</td><td style="text-align:center"><code>:koala:</code></td></tr><tr><td style="text-align:center">🐻</td><td style="text-align:center"><code>:bear:</code></td><td style="text-align:center">🐷</td><td style="text-align:center"><code>:pig:</code></td><td style="text-align:center">🐽</td><td style="text-align:center"><code>:pig_nose:</code></td></tr><tr><td style="text-align:center">🐮</td><td style="text-align:center"><code>:cow:</code></td><td style="text-align:center">🐗</td><td style="text-align:center"><code>:boar:</code></td><td style="text-align:center">🐵</td><td style="text-align:center"><code>:monkey_face:</code></td></tr><tr><td style="text-align:center">🐒</td><td style="text-align:center"><code>:monkey:</code></td><td style="text-align:center">🐴</td><td style="text-align:center"><code>:horse:</code></td><td style="text-align:center">🐎</td><td style="text-align:center"><code>:racehorse:</code></td></tr><tr><td style="text-align:center">🐫</td><td style="text-align:center"><code>:camel:</code></td><td style="text-align:center">🐑</td><td style="text-align:center"><code>:sheep:</code></td><td style="text-align:center">🐘</td><td style="text-align:center"><code>:elephant:</code></td></tr><tr><td style="text-align:center">🐼</td><td style="text-align:center"><code>:panda_face:</code></td><td style="text-align:center">🐍</td><td style="text-align:center"><code>:snake:</code></td><td style="text-align:center">🐦</td><td style="text-align:center"><code>:bird:</code></td></tr><tr><td style="text-align:center">🐤</td><td style="text-align:center"><code>:baby_chick:</code></td><td style="text-align:center">🐥</td><td style="text-align:center"><code>:hatched_chick:</code></td><td style="text-align:center">🐣</td><td style="text-align:center"><code>:hatching_chick:</code></td></tr><tr><td style="text-align:center">🐔</td><td style="text-align:center"><code>:chicken:</code></td><td style="text-align:center">🐧</td><td style="text-align:center"><code>:penguin:</code></td><td style="text-align:center">🐢</td><td style="text-align:center"><code>:turtle:</code></td></tr><tr><td style="text-align:center">🐛</td><td style="text-align:center"><code>:bug:</code></td><td style="text-align:center">🐝</td><td style="text-align:center"><code>:honeybee:</code></td><td style="text-align:center">🐜</td><td style="text-align:center"><code>:ant:</code></td></tr><tr><td style="text-align:center">🐞</td><td style="text-align:center"><code>:beetle:</code></td><td style="text-align:center">🐌</td><td style="text-align:center"><code>:snail:</code></td><td style="text-align:center">🐙</td><td style="text-align:center"><code>:octopus:</code></td></tr><tr><td style="text-align:center">🐠</td><td style="text-align:center"><code>:tropical_fish:</code></td><td style="text-align:center">🐟</td><td style="text-align:center"><code>:fish:</code></td><td style="text-align:center">🐳</td><td style="text-align:center"><code>:whale:</code></td></tr><tr><td style="text-align:center">🐋</td><td style="text-align:center"><code>:whale2:</code></td><td style="text-align:center">🐬</td><td style="text-align:center"><code>:dolphin:</code></td><td style="text-align:center">🐄</td><td style="text-align:center"><code>:cow2:</code></td></tr><tr><td style="text-align:center">🐏</td><td style="text-align:center"><code>:ram:</code></td><td style="text-align:center">🐀</td><td style="text-align:center"><code>:rat:</code></td><td style="text-align:center">🐃</td><td style="text-align:center"><code>:water_buffalo:</code></td></tr><tr><td style="text-align:center">🐅</td><td style="text-align:center"><code>:tiger2:</code></td><td style="text-align:center">🐇</td><td style="text-align:center"><code>:rabbit2:</code></td><td style="text-align:center">🐉</td><td style="text-align:center"><code>:dragon:</code></td></tr><tr><td style="text-align:center">🐐</td><td style="text-align:center"><code>:goat:</code></td><td style="text-align:center">🐓</td><td style="text-align:center"><code>:rooster:</code></td><td style="text-align:center">🐕</td><td style="text-align:center"><code>:dog2:</code></td></tr><tr><td style="text-align:center">🐖</td><td style="text-align:center"><code>:pig2:</code></td><td style="text-align:center">🐁</td><td style="text-align:center"><code>:mouse2:</code></td><td style="text-align:center">🐂</td><td style="text-align:center"><code>:ox:</code></td></tr><tr><td style="text-align:center">🐲</td><td style="text-align:center"><code>:dragon_face:</code></td><td style="text-align:center">🐡</td><td style="text-align:center"><code>:blowfish:</code></td><td style="text-align:center">🐊</td><td style="text-align:center"><code>:crocodile:</code></td></tr><tr><td style="text-align:center">🐪</td><td style="text-align:center"><code>:dromedary_camel:</code></td><td style="text-align:center">🐆</td><td style="text-align:center"><code>:leopard:</code></td><td style="text-align:center">🐈</td><td style="text-align:center"><code>:cat2:</code></td></tr><tr><td style="text-align:center">🐩</td><td style="text-align:center"><code>:poodle:</code></td><td style="text-align:center">🐾</td><td style="text-align:center"><code>:paw_prints:</code></td><td style="text-align:center">💐</td><td style="text-align:center"><code>:bouquet:</code></td></tr><tr><td style="text-align:center">🌸</td><td style="text-align:center"><code>:cherry_blossom:</code></td><td style="text-align:center">🌷</td><td style="text-align:center"><code>:tulip:</code></td><td style="text-align:center">🍀</td><td style="text-align:center"><code>:four_leaf_clover:</code></td></tr><tr><td style="text-align:center">🌹</td><td style="text-align:center"><code>:rose:</code></td><td style="text-align:center">🌻</td><td style="text-align:center"><code>:sunflower:</code></td><td style="text-align:center">🌺</td><td style="text-align:center"><code>:hibiscus:</code></td></tr><tr><td style="text-align:center">🍁</td><td style="text-align:center"><code>:maple_leaf:</code></td><td style="text-align:center">🍃</td><td style="text-align:center"><code>:leaves:</code></td><td style="text-align:center">🍂</td><td style="text-align:center"><code>:fallen_leaf:</code></td></tr><tr><td style="text-align:center">🌿</td><td style="text-align:center"><code>:herb:</code></td><td style="text-align:center">🍄</td><td style="text-align:center"><code>:mushroom:</code></td><td style="text-align:center">🌵</td><td style="text-align:center"><code>:cactus:</code></td></tr><tr><td style="text-align:center">🌴</td><td style="text-align:center"><code>:palm_tree:</code></td><td style="text-align:center">🌲</td><td style="text-align:center"><code>:evergreen_tree:</code></td><td style="text-align:center">🌳</td><td style="text-align:center"><code>:deciduous_tree:</code></td></tr><tr><td style="text-align:center">🌰</td><td style="text-align:center"><code>:chestnut:</code></td><td style="text-align:center">🌱</td><td style="text-align:center"><code>:seedling:</code></td><td style="text-align:center">🌼</td><td style="text-align:center"><code>:blossom:</code></td></tr><tr><td style="text-align:center">🌾</td><td style="text-align:center"><code>:ear_of_rice:</code></td><td style="text-align:center">🐚</td><td style="text-align:center"><code>:shell:</code></td><td style="text-align:center">🌐</td><td style="text-align:center"><code>:globe_with_meridians:</code></td></tr><tr><td style="text-align:center">🌞</td><td style="text-align:center"><code>:sun_with_face:</code></td><td style="text-align:center">🌝</td><td style="text-align:center"><code>:full_moon_with_face:</code></td><td style="text-align:center">🌚</td><td style="text-align:center"><code>:new_moon_with_face:</code></td></tr><tr><td style="text-align:center">🌑</td><td style="text-align:center"><code>:new_moon:</code></td><td style="text-align:center">🌒</td><td style="text-align:center"><code>:waxing_crescent_moon:</code></td><td style="text-align:center">🌓</td><td style="text-align:center"><code>:first_quarter_moon:</code></td></tr><tr><td style="text-align:center">🌔</td><td style="text-align:center"><code>:waxing_gibbous_moon:</code></td><td style="text-align:center">🌕</td><td style="text-align:center"><code>:full_moon:</code></td><td style="text-align:center">🌖</td><td style="text-align:center"><code>:waning_gibbous_moon:</code></td></tr><tr><td style="text-align:center">🌗</td><td style="text-align:center"><code>:last_quarter_moon:</code></td><td style="text-align:center">🌘</td><td style="text-align:center"><code>:waning_crescent_moon:</code></td><td style="text-align:center">🌜</td><td style="text-align:center"><code>:last_quarter_moon_with_face:</code></td></tr><tr><td style="text-align:center">🌛</td><td style="text-align:center"><code>:first_quarter_moon_with_face:</code></td><td style="text-align:center">🌙</td><td style="text-align:center"><code>:crescent_moon:</code></td><td style="text-align:center">🌍</td><td style="text-align:center"><code>:earth_africa:</code></td></tr><tr><td style="text-align:center">🌎</td><td style="text-align:center"><code>:earth_americas:</code></td><td style="text-align:center">🌏</td><td style="text-align:center"><code>:earth_asia:</code></td><td style="text-align:center">🌋</td><td style="text-align:center"><code>:volcano:</code></td></tr><tr><td style="text-align:center">🌌</td><td style="text-align:center"><code>:milky_way:</code></td><td style="text-align:center">⛅️</td><td style="text-align:center"><code>:partly_sunny:</code></td><td style="text-align:center">:octocat:</td><td style="text-align:center"><code>:octocat:</code></td></tr><tr><td style="text-align:center">:squirrel:</td><td style="text-align:center"><code>:squirrel:</code></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><h1 id="objects"><a class="markdownIt-Anchor" href="#objects"></a> Objects</h1><table><thead><tr><th style="text-align:center">预览</th><th style="text-align:center">语法</th><th style="text-align:center">预览</th><th style="text-align:center">语法</th><th style="text-align:center">预览</th><th style="text-align:center">语法</th></tr></thead><tbody><tr><td style="text-align:center">🎍</td><td style="text-align:center"><code>:bamboo:</code></td><td style="text-align:center">💝</td><td style="text-align:center"><code>:gift_heart:</code></td><td style="text-align:center">🎎</td><td style="text-align:center"><code>:dolls:</code></td></tr><tr><td style="text-align:center">🎒</td><td style="text-align:center"><code>:school_satchel:</code></td><td style="text-align:center">🎓</td><td style="text-align:center"><code>:mortar_board:</code></td><td style="text-align:center">🎏</td><td style="text-align:center"><code>:flags:</code></td></tr><tr><td style="text-align:center">🎆</td><td style="text-align:center"><code>:fireworks:</code></td><td style="text-align:center">🎇</td><td style="text-align:center"><code>:sparkler:</code></td><td style="text-align:center">🎐</td><td style="text-align:center"><code>:wind_chime:</code></td></tr><tr><td style="text-align:center">🎑</td><td style="text-align:center"><code>:rice_scene:</code></td><td style="text-align:center">🎃</td><td style="text-align:center"><code>:jack_o_lantern:</code></td><td style="text-align:center">👻</td><td style="text-align:center"><code>:ghost:</code></td></tr><tr><td style="text-align:center">🎅</td><td style="text-align:center"><code>:santa:</code></td><td style="text-align:center">🎄</td><td style="text-align:center"><code>:christmas_tree:</code></td><td style="text-align:center">🎁</td><td style="text-align:center"><code>:gift:</code></td></tr><tr><td style="text-align:center">🔔</td><td style="text-align:center"><code>:bell:</code></td><td style="text-align:center">🔕</td><td style="text-align:center"><code>:no_bell:</code></td><td style="text-align:center">🎋</td><td style="text-align:center"><code>:tanabata_tree:</code></td></tr><tr><td style="text-align:center">🎉</td><td style="text-align:center"><code>:tada:</code></td><td style="text-align:center">🎊</td><td style="text-align:center"><code>:confetti_ball:</code></td><td style="text-align:center">🎈</td><td style="text-align:center"><code>:balloon:</code></td></tr><tr><td style="text-align:center">🔮</td><td style="text-align:center"><code>:crystal_ball:</code></td><td style="text-align:center">💿</td><td style="text-align:center"><code>:cd:</code></td><td style="text-align:center">📀</td><td style="text-align:center"><code>:dvd:</code></td></tr><tr><td style="text-align:center">💾</td><td style="text-align:center"><code>:floppy_disk:</code></td><td style="text-align:center">📷</td><td style="text-align:center"><code>:camera:</code></td><td style="text-align:center">📹</td><td style="text-align:center"><code>:video_camera:</code></td></tr><tr><td style="text-align:center">🎥</td><td style="text-align:center"><code>:movie_camera:</code></td><td style="text-align:center">💻</td><td style="text-align:center"><code>:computer:</code></td><td style="text-align:center">📺</td><td style="text-align:center"><code>:tv:</code></td></tr><tr><td style="text-align:center">📱</td><td style="text-align:center"><code>:iphone:</code></td><td style="text-align:center">☎️</td><td style="text-align:center"><code>:phone:</code></td><td style="text-align:center">☎️</td><td style="text-align:center"><code>:telephone:</code></td></tr><tr><td style="text-align:center">📞</td><td style="text-align:center"><code>:telephone_receiver:</code></td><td style="text-align:center">📟</td><td style="text-align:center"><code>:pager:</code></td><td style="text-align:center">📠</td><td style="text-align:center"><code>:fax:</code></td></tr><tr><td style="text-align:center">💽</td><td style="text-align:center"><code>:minidisc:</code></td><td style="text-align:center">📼</td><td style="text-align:center"><code>:vhs:</code></td><td style="text-align:center">🔉</td><td style="text-align:center"><code>:sound:</code></td></tr><tr><td style="text-align:center">🔈</td><td style="text-align:center"><code>:speaker:</code></td><td style="text-align:center">🔇</td><td style="text-align:center"><code>:mute:</code></td><td style="text-align:center">📢</td><td style="text-align:center"><code>:loudspeaker:</code></td></tr><tr><td style="text-align:center">📣</td><td style="text-align:center"><code>:mega:</code></td><td style="text-align:center">⌛️</td><td style="text-align:center"><code>:hourglass:</code></td><td style="text-align:center">⏳</td><td style="text-align:center"><code>:hourglass_flowing_sand:</code></td></tr><tr><td style="text-align:center">⏰</td><td style="text-align:center"><code>:alarm_clock:</code></td><td style="text-align:center">⌚️</td><td style="text-align:center"><code>:watch:</code></td><td style="text-align:center">📻</td><td style="text-align:center"><code>:radio:</code></td></tr><tr><td style="text-align:center">📡</td><td style="text-align:center"><code>:satellite:</code></td><td style="text-align:center">➿</td><td style="text-align:center"><code>:loop:</code></td><td style="text-align:center">🔍</td><td style="text-align:center"><code>:mag:</code></td></tr><tr><td style="text-align:center">🔎</td><td style="text-align:center"><code>:mag_right:</code></td><td style="text-align:center">🔓</td><td style="text-align:center"><code>:unlock:</code></td><td style="text-align:center">🔒</td><td style="text-align:center"><code>:lock:</code></td></tr><tr><td style="text-align:center">🔏</td><td style="text-align:center"><code>:lock_with_ink_pen:</code></td><td style="text-align:center">🔐</td><td style="text-align:center"><code>:closed_lock_with_key:</code></td><td style="text-align:center">🔑</td><td style="text-align:center"><code>:key:</code></td></tr><tr><td style="text-align:center">💡</td><td style="text-align:center"><code>:bulb:</code></td><td style="text-align:center">🔦</td><td style="text-align:center"><code>:flashlight:</code></td><td style="text-align:center">🔆</td><td style="text-align:center"><code>:high_brightness:</code></td></tr><tr><td style="text-align:center">🔅</td><td style="text-align:center"><code>:low_brightness:</code></td><td style="text-align:center">🔌</td><td style="text-align:center"><code>:electric_plug:</code></td><td style="text-align:center">🔋</td><td style="text-align:center"><code>:battery:</code></td></tr><tr><td style="text-align:center">📲</td><td style="text-align:center"><code>:calling:</code></td><td style="text-align:center">✉️</td><td style="text-align:center"><code>:email:</code></td><td style="text-align:center">📫</td><td style="text-align:center"><code>:mailbox:</code></td></tr><tr><td style="text-align:center">📮</td><td style="text-align:center"><code>:postbox:</code></td><td style="text-align:center">🛀</td><td style="text-align:center"><code>:bath:</code></td><td style="text-align:center">🛁</td><td style="text-align:center"><code>:bathtub:</code></td></tr><tr><td style="text-align:center">🚿</td><td style="text-align:center"><code>:shower:</code></td><td style="text-align:center">🚽</td><td style="text-align:center"><code>:toilet:</code></td><td style="text-align:center">🔧</td><td style="text-align:center"><code>:wrench:</code></td></tr><tr><td style="text-align:center">🔩</td><td style="text-align:center"><code>:nut_and_bolt:</code></td><td style="text-align:center">🔨</td><td style="text-align:center"><code>:hammer:</code></td><td style="text-align:center">💺</td><td style="text-align:center"><code>:seat:</code></td></tr><tr><td style="text-align:center">💰</td><td style="text-align:center"><code>:moneybag:</code></td><td style="text-align:center">💴</td><td style="text-align:center"><code>:yen:</code></td><td style="text-align:center">💵</td><td style="text-align:center"><code>:dollar:</code></td></tr><tr><td style="text-align:center">💷</td><td style="text-align:center"><code>:pound:</code></td><td style="text-align:center">💶</td><td style="text-align:center"><code>:euro:</code></td><td style="text-align:center">💳</td><td style="text-align:center"><code>:credit_card:</code></td></tr><tr><td style="text-align:center">💸</td><td style="text-align:center"><code>:money_with_wings:</code></td><td style="text-align:center">📧</td><td style="text-align:center"><code>:e-mail:</code></td><td style="text-align:center">📥</td><td style="text-align:center"><code>:inbox_tray:</code></td></tr><tr><td style="text-align:center">📤</td><td style="text-align:center"><code>:outbox_tray:</code></td><td style="text-align:center">✉️</td><td style="text-align:center"><code>:envelope:</code></td><td style="text-align:center">📨</td><td style="text-align:center"><code>:incoming_envelope:</code></td></tr><tr><td style="text-align:center">📯</td><td style="text-align:center"><code>:postal_horn:</code></td><td style="text-align:center">📪</td><td style="text-align:center"><code>:mailbox_closed:</code></td><td style="text-align:center">📬</td><td style="text-align:center"><code>:mailbox_with_mail:</code></td></tr><tr><td style="text-align:center">📭</td><td style="text-align:center"><code>:mailbox_with_no_mail:</code></td><td style="text-align:center">📦</td><td style="text-align:center"><code>:package:</code></td><td style="text-align:center">🚪</td><td style="text-align:center"><code>:door:</code></td></tr><tr><td style="text-align:center">🚬</td><td style="text-align:center"><code>:smoking:</code></td><td style="text-align:center">💣</td><td style="text-align:center"><code>:bomb:</code></td><td style="text-align:center">🔫</td><td style="text-align:center"><code>:gun:</code></td></tr><tr><td style="text-align:center">🔪</td><td style="text-align:center"><code>:hocho:</code></td><td style="text-align:center">💊</td><td style="text-align:center"><code>:pill:</code></td><td style="text-align:center">💉</td><td style="text-align:center"><code>:syringe:</code></td></tr><tr><td style="text-align:center">📄</td><td style="text-align:center"><code>:page_facing_up:</code></td><td style="text-align:center">📃</td><td style="text-align:center"><code>:page_with_curl:</code></td><td style="text-align:center">📑</td><td style="text-align:center"><code>:bookmark_tabs:</code></td></tr><tr><td style="text-align:center">📊</td><td style="text-align:center"><code>:bar_chart:</code></td><td style="text-align:center">📈</td><td style="text-align:center"><code>:chart_with_upwards_trend:</code></td><td style="text-align:center">📉</td><td style="text-align:center"><code>:chart_with_downwards_trend:</code></td></tr><tr><td style="text-align:center">📜</td><td style="text-align:center"><code>:scroll:</code></td><td style="text-align:center">📋</td><td style="text-align:center"><code>:clipboard:</code></td><td style="text-align:center">📆</td><td style="text-align:center"><code>:calendar:</code></td></tr><tr><td style="text-align:center">📅</td><td style="text-align:center"><code>:date:</code></td><td style="text-align:center">📇</td><td style="text-align:center"><code>:card_index:</code></td><td style="text-align:center">📁</td><td style="text-align:center"><code>:file_folder:</code></td></tr><tr><td style="text-align:center">📂</td><td style="text-align:center"><code>:open_file_folder:</code></td><td style="text-align:center">✂️</td><td style="text-align:center"><code>:scissors:</code></td><td style="text-align:center">📌</td><td style="text-align:center"><code>:pushpin:</code></td></tr><tr><td style="text-align:center">📎</td><td style="text-align:center"><code>:paperclip:</code></td><td style="text-align:center">✒️</td><td style="text-align:center"><code>:black_nib:</code></td><td style="text-align:center">✏️</td><td style="text-align:center"><code>:pencil2:</code></td></tr><tr><td style="text-align:center">📏</td><td style="text-align:center"><code>:straight_ruler:</code></td><td style="text-align:center">📐</td><td style="text-align:center"><code>:triangular_ruler:</code></td><td style="text-align:center">📕</td><td style="text-align:center"><code>:closed_book:</code></td></tr><tr><td style="text-align:center">📗</td><td style="text-align:center"><code>:green_book:</code></td><td style="text-align:center">📘</td><td style="text-align:center"><code>:blue_book:</code></td><td style="text-align:center">📙</td><td style="text-align:center"><code>:orange_book:</code></td></tr><tr><td style="text-align:center">📓</td><td style="text-align:center"><code>:notebook:</code></td><td style="text-align:center">📔</td><td style="text-align:center"><code>:notebook_with_decorative_cover:</code></td><td style="text-align:center">📒</td><td style="text-align:center"><code>:ledger:</code></td></tr><tr><td style="text-align:center">📚</td><td style="text-align:center"><code>:books:</code></td><td style="text-align:center">🔖</td><td style="text-align:center"><code>:bookmark:</code></td><td style="text-align:center">📛</td><td style="text-align:center"><code>:name_badge:</code></td></tr><tr><td style="text-align:center">🔬</td><td style="text-align:center"><code>:microscope:</code></td><td style="text-align:center">🔭</td><td style="text-align:center"><code>:telescope:</code></td><td style="text-align:center">📰</td><td style="text-align:center"><code>:newspaper:</code></td></tr><tr><td style="text-align:center">🏈</td><td style="text-align:center"><code>:football:</code></td><td style="text-align:center">🏀</td><td style="text-align:center"><code>:basketball:</code></td><td style="text-align:center">⚽️</td><td style="text-align:center"><code>:soccer:</code></td></tr><tr><td style="text-align:center">⚾️</td><td style="text-align:center"><code>:baseball:</code></td><td style="text-align:center">🎾</td><td style="text-align:center"><code>:tennis:</code></td><td style="text-align:center">🎱</td><td style="text-align:center"><code>:8ball:</code></td></tr><tr><td style="text-align:center">🏉</td><td style="text-align:center"><code>:rugby_football:</code></td><td style="text-align:center">🎳</td><td style="text-align:center"><code>:bowling:</code></td><td style="text-align:center">⛳️</td><td style="text-align:center"><code>:golf:</code></td></tr><tr><td style="text-align:center">🚵</td><td style="text-align:center"><code>:mountain_bicyclist:</code></td><td style="text-align:center">🚴</td><td style="text-align:center"><code>:bicyclist:</code></td><td style="text-align:center">🏇</td><td style="text-align:center"><code>:horse_racing:</code></td></tr><tr><td style="text-align:center">🏂</td><td style="text-align:center"><code>:snowboarder:</code></td><td style="text-align:center">🏊</td><td style="text-align:center"><code>:swimmer:</code></td><td style="text-align:center">🏄</td><td style="text-align:center"><code>:surfer:</code></td></tr><tr><td style="text-align:center">🎿</td><td style="text-align:center"><code>:ski:</code></td><td style="text-align:center">♠️</td><td style="text-align:center"><code>:spades:</code></td><td style="text-align:center">♥️</td><td style="text-align:center"><code>:hearts:</code></td></tr><tr><td style="text-align:center">♣️</td><td style="text-align:center"><code>:clubs:</code></td><td style="text-align:center">♦️</td><td style="text-align:center"><code>:diamonds:</code></td><td style="text-align:center">💎</td><td style="text-align:center"><code>:gem:</code></td></tr><tr><td style="text-align:center">💍</td><td style="text-align:center"><code>:ring:</code></td><td style="text-align:center">🏆</td><td style="text-align:center"><code>:trophy:</code></td><td style="text-align:center">🎼</td><td style="text-align:center"><code>:musical_score:</code></td></tr><tr><td style="text-align:center">🎹</td><td style="text-align:center"><code>:musical_keyboard:</code></td><td style="text-align:center">🎻</td><td style="text-align:center"><code>:violin:</code></td><td style="text-align:center">👾</td><td style="text-align:center"><code>:space_invader:</code></td></tr><tr><td style="text-align:center">🎮</td><td style="text-align:center"><code>:video_game:</code></td><td style="text-align:center">🃏</td><td style="text-align:center"><code>:black_joker:</code></td><td style="text-align:center">🎴</td><td style="text-align:center"><code>:flower_playing_cards:</code></td></tr><tr><td style="text-align:center">🎲</td><td style="text-align:center"><code>:game_die:</code></td><td style="text-align:center">🎯</td><td style="text-align:center"><code>:dart:</code></td><td style="text-align:center">🀄️</td><td style="text-align:center"><code>:mahjong:</code></td></tr><tr><td style="text-align:center">🎬</td><td style="text-align:center"><code>:clapper:</code></td><td style="text-align:center">📝</td><td style="text-align:center"><code>:memo:</code></td><td style="text-align:center">📝</td><td style="text-align:center"><code>:pencil:</code></td></tr><tr><td style="text-align:center">📖</td><td style="text-align:center"><code>:book:</code></td><td style="text-align:center">🎨</td><td style="text-align:center"><code>:art:</code></td><td style="text-align:center">🎤</td><td style="text-align:center"><code>:microphone:</code></td></tr><tr><td style="text-align:center">🎧</td><td style="text-align:center"><code>:headphones:</code></td><td style="text-align:center">🎺</td><td style="text-align:center"><code>:trumpet:</code></td><td style="text-align:center">🎷</td><td style="text-align:center"><code>:saxophone:</code></td></tr><tr><td style="text-align:center">🎸</td><td style="text-align:center"><code>:guitar:</code></td><td style="text-align:center">👞</td><td style="text-align:center"><code>:shoe:</code></td><td style="text-align:center">👡</td><td style="text-align:center"><code>:sandal:</code></td></tr><tr><td style="text-align:center">👠</td><td style="text-align:center"><code>:high_heel:</code></td><td style="text-align:center">💄</td><td style="text-align:center"><code>:lipstick:</code></td><td style="text-align:center">👢</td><td style="text-align:center"><code>:boot:</code></td></tr><tr><td style="text-align:center">👕</td><td style="text-align:center"><code>:shirt:</code></td><td style="text-align:center">👕</td><td style="text-align:center"><code>:tshirt:</code></td><td style="text-align:center">👔</td><td style="text-align:center"><code>:necktie:</code></td></tr><tr><td style="text-align:center">👚</td><td style="text-align:center"><code>:womans_clothes:</code></td><td style="text-align:center">👗</td><td style="text-align:center"><code>:dress:</code></td><td style="text-align:center">🎽</td><td style="text-align:center"><code>:running_shirt_with_sash:</code></td></tr><tr><td style="text-align:center">👖</td><td style="text-align:center"><code>:jeans:</code></td><td style="text-align:center">👘</td><td style="text-align:center"><code>:kimono:</code></td><td style="text-align:center">👙</td><td style="text-align:center"><code>:bikini:</code></td></tr><tr><td style="text-align:center">🎀</td><td style="text-align:center"><code>:ribbon:</code></td><td style="text-align:center">🎩</td><td style="text-align:center"><code>:tophat:</code></td><td style="text-align:center">👑</td><td style="text-align:center"><code>:crown:</code></td></tr><tr><td style="text-align:center">👒</td><td style="text-align:center"><code>:womans_hat:</code></td><td style="text-align:center">👞</td><td style="text-align:center"><code>:mans_shoe:</code></td><td style="text-align:center">🌂</td><td style="text-align:center"><code>:closed_umbrella:</code></td></tr><tr><td style="text-align:center">💼</td><td style="text-align:center"><code>:briefcase:</code></td><td style="text-align:center">👜</td><td style="text-align:center"><code>:handbag:</code></td><td style="text-align:center">👝</td><td style="text-align:center"><code>:pouch:</code></td></tr><tr><td style="text-align:center">👛</td><td style="text-align:center"><code>:purse:</code></td><td style="text-align:center">👓</td><td style="text-align:center"><code>:eyeglasses:</code></td><td style="text-align:center">🎣</td><td style="text-align:center"><code>:fishing_pole_and_fish:</code></td></tr><tr><td style="text-align:center">☕️</td><td style="text-align:center"><code>:coffee:</code></td><td style="text-align:center">🍵</td><td style="text-align:center"><code>:tea:</code></td><td style="text-align:center">🍶</td><td style="text-align:center"><code>:sake:</code></td></tr><tr><td style="text-align:center">🍼</td><td style="text-align:center"><code>:baby_bottle:</code></td><td style="text-align:center">🍺</td><td style="text-align:center"><code>:beer:</code></td><td style="text-align:center">🍻</td><td style="text-align:center"><code>:beers:</code></td></tr><tr><td style="text-align:center">🍸</td><td style="text-align:center"><code>:cocktail:</code></td><td style="text-align:center">🍹</td><td style="text-align:center"><code>:tropical_drink:</code></td><td style="text-align:center">🍷</td><td style="text-align:center"><code>:wine_glass:</code></td></tr><tr><td style="text-align:center">🍴</td><td style="text-align:center"><code>:fork_and_knife:</code></td><td style="text-align:center">🍕</td><td style="text-align:center"><code>:pizza:</code></td><td style="text-align:center">🍔</td><td style="text-align:center"><code>:hamburger:</code></td></tr><tr><td style="text-align:center">🍟</td><td style="text-align:center"><code>:fries:</code></td><td style="text-align:center">🍗</td><td style="text-align:center"><code>:poultry_leg:</code></td><td style="text-align:center">🍖</td><td style="text-align:center"><code>:meat_on_bone:</code></td></tr><tr><td style="text-align:center">🍝</td><td style="text-align:center"><code>:spaghetti:</code></td><td style="text-align:center">🍛</td><td style="text-align:center"><code>:curry:</code></td><td style="text-align:center">🍤</td><td style="text-align:center"><code>:fried_shrimp:</code></td></tr><tr><td style="text-align:center">🍱</td><td style="text-align:center"><code>:bento:</code></td><td style="text-align:center">🍣</td><td style="text-align:center"><code>:sushi:</code></td><td style="text-align:center">🍥</td><td style="text-align:center"><code>:fish_cake:</code></td></tr><tr><td style="text-align:center">🍙</td><td style="text-align:center"><code>:rice_ball:</code></td><td style="text-align:center">🍘</td><td style="text-align:center"><code>:rice_cracker:</code></td><td style="text-align:center">🍚</td><td style="text-align:center"><code>:rice:</code></td></tr><tr><td style="text-align:center">🍜</td><td style="text-align:center"><code>:ramen:</code></td><td style="text-align:center">🍲</td><td style="text-align:center"><code>:stew:</code></td><td style="text-align:center">🍢</td><td style="text-align:center"><code>:oden:</code></td></tr><tr><td style="text-align:center">🍡</td><td style="text-align:center"><code>:dango:</code></td><td style="text-align:center">🥚</td><td style="text-align:center"><code>:egg:</code></td><td style="text-align:center">🍞</td><td style="text-align:center"><code>:bread:</code></td></tr><tr><td style="text-align:center">🍩</td><td style="text-align:center"><code>:doughnut:</code></td><td style="text-align:center">🍮</td><td style="text-align:center"><code>:custard:</code></td><td style="text-align:center">🍦</td><td style="text-align:center"><code>:icecream:</code></td></tr><tr><td style="text-align:center">🍨</td><td style="text-align:center"><code>:ice_cream:</code></td><td style="text-align:center">🍧</td><td style="text-align:center"><code>:shaved_ice:</code></td><td style="text-align:center">🎂</td><td style="text-align:center"><code>:birthday:</code></td></tr><tr><td style="text-align:center">🍰</td><td style="text-align:center"><code>:cake:</code></td><td style="text-align:center">🍪</td><td style="text-align:center"><code>:cookie:</code></td><td style="text-align:center">🍫</td><td style="text-align:center"><code>:chocolate_bar:</code></td></tr><tr><td style="text-align:center">🍬</td><td style="text-align:center"><code>:candy:</code></td><td style="text-align:center">🍭</td><td style="text-align:center"><code>:lollipop:</code></td><td style="text-align:center">🍯</td><td style="text-align:center"><code>:honey_pot:</code></td></tr><tr><td style="text-align:center">🍎</td><td style="text-align:center"><code>:apple:</code></td><td style="text-align:center">🍏</td><td style="text-align:center"><code>:green_apple:</code></td><td style="text-align:center">🍊</td><td style="text-align:center"><code>:tangerine:</code></td></tr><tr><td style="text-align:center">🍋</td><td style="text-align:center"><code>:lemon:</code></td><td style="text-align:center">🍒</td><td style="text-align:center"><code>:cherries:</code></td><td style="text-align:center">🍇</td><td style="text-align:center"><code>:grapes:</code></td></tr><tr><td style="text-align:center">🍉</td><td style="text-align:center"><code>:watermelon:</code></td><td style="text-align:center">🍓</td><td style="text-align:center"><code>:strawberry:</code></td><td style="text-align:center">🍑</td><td style="text-align:center"><code>:peach:</code></td></tr><tr><td style="text-align:center">🍈</td><td style="text-align:center"><code>:melon:</code></td><td style="text-align:center">🍌</td><td style="text-align:center"><code>:banana:</code></td><td style="text-align:center">🍐</td><td style="text-align:center"><code>:pear:</code></td></tr><tr><td style="text-align:center">🍍</td><td style="text-align:center"><code>:pineapple:</code></td><td style="text-align:center">🍠</td><td style="text-align:center"><code>:sweet_potato:</code></td><td style="text-align:center">🍆</td><td style="text-align:center"><code>:eggplant:</code></td></tr><tr><td style="text-align:center">🍅</td><td style="text-align:center"><code>:tomato:</code></td><td style="text-align:center">🌽</td><td style="text-align:center"><code>:corn:</code></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><h1 id="places"><a class="markdownIt-Anchor" href="#places"></a> Places</h1><table><thead><tr><th style="text-align:center">预览</th><th style="text-align:center">语法</th><th style="text-align:center">预览</th><th style="text-align:center">语法</th><th style="text-align:center">预览</th><th style="text-align:center">语法</th></tr></thead><tbody><tr><td style="text-align:center">🏠</td><td style="text-align:center"><code>:house:</code></td><td style="text-align:center">🏡</td><td style="text-align:center"><code>:house_with_garden:</code></td><td style="text-align:center">🏫</td><td style="text-align:center"><code>:school:</code></td></tr><tr><td style="text-align:center">🏢</td><td style="text-align:center"><code>:office:</code></td><td style="text-align:center">🏣</td><td style="text-align:center"><code>:post_office:</code></td><td style="text-align:center">🏥</td><td style="text-align:center"><code>:hospital:</code></td></tr><tr><td style="text-align:center">🏦</td><td style="text-align:center"><code>:bank:</code></td><td style="text-align:center">🏪</td><td style="text-align:center"><code>:convenience_store:</code></td><td style="text-align:center">🏩</td><td style="text-align:center"><code>:love_hotel:</code></td></tr><tr><td style="text-align:center">🏨</td><td style="text-align:center"><code>:hotel:</code></td><td style="text-align:center">💒</td><td style="text-align:center"><code>:wedding:</code></td><td style="text-align:center">⛪️</td><td style="text-align:center"><code>:church:</code></td></tr><tr><td style="text-align:center">🏬</td><td style="text-align:center"><code>:department_store:</code></td><td style="text-align:center">🏤</td><td style="text-align:center"><code>:european_post_office:</code></td><td style="text-align:center">🌇</td><td style="text-align:center"><code>:city_sunrise:</code></td></tr><tr><td style="text-align:center">🌆</td><td style="text-align:center"><code>:city_sunset:</code></td><td style="text-align:center">🏯</td><td style="text-align:center"><code>:japanese_castle:</code></td><td style="text-align:center">🏰</td><td style="text-align:center"><code>:european_castle:</code></td></tr><tr><td style="text-align:center">⛺️</td><td style="text-align:center"><code>:tent:</code></td><td style="text-align:center">🏭</td><td style="text-align:center"><code>:factory:</code></td><td style="text-align:center">🗼</td><td style="text-align:center"><code>:tokyo_tower:</code></td></tr><tr><td style="text-align:center">🗾</td><td style="text-align:center"><code>:japan:</code></td><td style="text-align:center">🗻</td><td style="text-align:center"><code>:mount_fuji:</code></td><td style="text-align:center">🌄</td><td style="text-align:center"><code>:sunrise_over_mountains:</code></td></tr><tr><td style="text-align:center">🌅</td><td style="text-align:center"><code>:sunrise:</code></td><td style="text-align:center">🌠</td><td style="text-align:center"><code>:stars:</code></td><td style="text-align:center">🗽</td><td style="text-align:center"><code>:statue_of_liberty:</code></td></tr><tr><td style="text-align:center">🌉</td><td style="text-align:center"><code>:bridge_at_night:</code></td><td style="text-align:center">🎠</td><td style="text-align:center"><code>:carousel_horse:</code></td><td style="text-align:center">🌈</td><td style="text-align:center"><code>:rainbow:</code></td></tr><tr><td style="text-align:center">🎡</td><td style="text-align:center"><code>:ferris_wheel:</code></td><td style="text-align:center">⛲️</td><td style="text-align:center"><code>:fountain:</code></td><td style="text-align:center">🎢</td><td style="text-align:center"><code>:roller_coaster:</code></td></tr><tr><td style="text-align:center">🚢</td><td style="text-align:center"><code>:ship:</code></td><td style="text-align:center">🚤</td><td style="text-align:center"><code>:speedboat:</code></td><td style="text-align:center">⛵️</td><td style="text-align:center"><code>:boat:</code></td></tr><tr><td style="text-align:center">⛵️</td><td style="text-align:center"><code>:sailboat:</code></td><td style="text-align:center">🚣</td><td style="text-align:center"><code>:rowboat:</code></td><td style="text-align:center">⚓️</td><td style="text-align:center"><code>:anchor:</code></td></tr><tr><td style="text-align:center">🚀</td><td style="text-align:center"><code>:rocket:</code></td><td style="text-align:center">✈️</td><td style="text-align:center"><code>:airplane:</code></td><td style="text-align:center">🚁</td><td style="text-align:center"><code>:helicopter:</code></td></tr><tr><td style="text-align:center">🚂</td><td style="text-align:center"><code>:steam_locomotive:</code></td><td style="text-align:center">🚊</td><td style="text-align:center"><code>:tram:</code></td><td style="text-align:center">🚞</td><td style="text-align:center"><code>:mountain_railway:</code></td></tr><tr><td style="text-align:center">🚲</td><td style="text-align:center"><code>:bike:</code></td><td style="text-align:center">🚡</td><td style="text-align:center"><code>:aerial_tramway:</code></td><td style="text-align:center">🚟</td><td style="text-align:center"><code>:suspension_railway:</code></td></tr><tr><td style="text-align:center">🚠</td><td style="text-align:center"><code>:mountain_cableway:</code></td><td style="text-align:center">🚜</td><td style="text-align:center"><code>:tractor:</code></td><td style="text-align:center">🚙</td><td style="text-align:center"><code>:blue_car:</code></td></tr><tr><td style="text-align:center">🚘</td><td style="text-align:center"><code>:oncoming_automobile:</code></td><td style="text-align:center">🚗</td><td style="text-align:center"><code>:car:</code></td><td style="text-align:center">🚗</td><td style="text-align:center"><code>:red_car:</code></td></tr><tr><td style="text-align:center">🚕</td><td style="text-align:center"><code>:taxi:</code></td><td style="text-align:center">🚖</td><td style="text-align:center"><code>:oncoming_taxi:</code></td><td style="text-align:center">🚛</td><td style="text-align:center"><code>:articulated_lorry:</code></td></tr><tr><td style="text-align:center">🚌</td><td style="text-align:center"><code>:bus:</code></td><td style="text-align:center">🚍</td><td style="text-align:center"><code>:oncoming_bus:</code></td><td style="text-align:center">🚨</td><td style="text-align:center"><code>:rotating_light:</code></td></tr><tr><td style="text-align:center">🚓</td><td style="text-align:center"><code>:police_car:</code></td><td style="text-align:center">🚔</td><td style="text-align:center"><code>:oncoming_police_car:</code></td><td style="text-align:center">🚒</td><td style="text-align:center"><code>:fire_engine:</code></td></tr><tr><td style="text-align:center">🚑</td><td style="text-align:center"><code>:ambulance:</code></td><td style="text-align:center">🚐</td><td style="text-align:center"><code>:minibus:</code></td><td style="text-align:center">🚚</td><td style="text-align:center"><code>:truck:</code></td></tr><tr><td style="text-align:center">🚋</td><td style="text-align:center"><code>:train:</code></td><td style="text-align:center">🚉</td><td style="text-align:center"><code>:station:</code></td><td style="text-align:center">🚆</td><td style="text-align:center"><code>:train2:</code></td></tr><tr><td style="text-align:center">🚅</td><td style="text-align:center"><code>:bullettrain_front:</code></td><td style="text-align:center">🚄</td><td style="text-align:center"><code>:bullettrain_side:</code></td><td style="text-align:center">🚈</td><td style="text-align:center"><code>:light_rail:</code></td></tr><tr><td style="text-align:center">🚝</td><td style="text-align:center"><code>:monorail:</code></td><td style="text-align:center">🚃</td><td style="text-align:center"><code>:railway_car:</code></td><td style="text-align:center">🚎</td><td style="text-align:center"><code>:trolleybus:</code></td></tr><tr><td style="text-align:center">🎫</td><td style="text-align:center"><code>:ticket:</code></td><td style="text-align:center">⛽️</td><td style="text-align:center"><code>:fuelpump:</code></td><td style="text-align:center">🚦</td><td style="text-align:center"><code>:vertical_traffic_light:</code></td></tr><tr><td style="text-align:center">🚥</td><td style="text-align:center"><code>:traffic_light:</code></td><td style="text-align:center">⚠️</td><td style="text-align:center"><code>:warning:</code></td><td style="text-align:center">🚧</td><td style="text-align:center"><code>:construction:</code></td></tr><tr><td style="text-align:center">🔰</td><td style="text-align:center"><code>:beginner:</code></td><td style="text-align:center">🏧</td><td style="text-align:center"><code>:atm:</code></td><td style="text-align:center">🎰</td><td style="text-align:center"><code>:slot_machine:</code></td></tr><tr><td style="text-align:center">🚏</td><td style="text-align:center"><code>:busstop:</code></td><td style="text-align:center">💈</td><td style="text-align:center"><code>:barber:</code></td><td style="text-align:center">♨️</td><td style="text-align:center"><code>:hotsprings:</code></td></tr><tr><td style="text-align:center">🏁</td><td style="text-align:center"><code>:checkered_flag:</code></td><td style="text-align:center">🎌</td><td style="text-align:center"><code>:crossed_flags:</code></td><td style="text-align:center">🏮</td><td style="text-align:center"><code>:izakaya_lantern:</code></td></tr><tr><td style="text-align:center">🗿</td><td style="text-align:center"><code>:moyai:</code></td><td style="text-align:center">🎪</td><td style="text-align:center"><code>:circus_tent:</code></td><td style="text-align:center">🎭</td><td style="text-align:center"><code>:performing_arts:</code></td></tr><tr><td style="text-align:center">📍</td><td style="text-align:center"><code>:round_pushpin:</code></td><td style="text-align:center">🚩</td><td style="text-align:center"><code>:triangular_flag_on_post:</code></td><td style="text-align:center">🇯🇵</td><td style="text-align:center"><code>:jp:</code></td></tr><tr><td style="text-align:center">🇰🇷</td><td style="text-align:center"><code>:kr:</code></td><td style="text-align:center">🇨🇳</td><td style="text-align:center"><code>:cn:</code></td><td style="text-align:center">🇺🇸</td><td style="text-align:center"><code>:us:</code></td></tr><tr><td style="text-align:center">🇫🇷</td><td style="text-align:center"><code>:fr:</code></td><td style="text-align:center">🇪🇸</td><td style="text-align:center"><code>:es:</code></td><td style="text-align:center">🇮🇹</td><td style="text-align:center"><code>:it:</code></td></tr><tr><td style="text-align:center">🇷🇺</td><td style="text-align:center"><code>:ru:</code></td><td style="text-align:center">🇬🇧</td><td style="text-align:center"><code>:gb:</code></td><td style="text-align:center">🇬🇧</td><td style="text-align:center"><code>:uk:</code></td></tr><tr><td style="text-align:center">🇩🇪</td><td style="text-align:center"><code>:de:</code></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><h1 id="symbols"><a class="markdownIt-Anchor" href="#symbols"></a> Symbols</h1><table><thead><tr><th style="text-align:center">预览</th><th style="text-align:center">语法</th><th style="text-align:center">预览</th><th style="text-align:center">语法</th><th style="text-align:center">预览</th><th style="text-align:center">语法</th></tr></thead><tbody><tr><td style="text-align:center">1️⃣</td><td style="text-align:center"><code>:one:</code></td><td style="text-align:center">2️⃣</td><td style="text-align:center"><code>:two:</code></td><td style="text-align:center">3️⃣</td><td style="text-align:center"><code>:three:</code></td></tr><tr><td style="text-align:center">4️⃣</td><td style="text-align:center"><code>:four:</code></td><td style="text-align:center">5️⃣</td><td style="text-align:center"><code>:five:</code></td><td style="text-align:center">6️⃣</td><td style="text-align:center"><code>:six:</code></td></tr><tr><td style="text-align:center">7️⃣</td><td style="text-align:center"><code>:seven:</code></td><td style="text-align:center">8️⃣</td><td style="text-align:center"><code>:eight:</code></td><td style="text-align:center">9️⃣</td><td style="text-align:center"><code>:nine:</code></td></tr><tr><td style="text-align:center">🔟</td><td style="text-align:center"><code>:keycap_ten:</code></td><td style="text-align:center">🔢</td><td style="text-align:center"><code>:1234:</code></td><td style="text-align:center">0️⃣</td><td style="text-align:center"><code>:zero:</code></td></tr><tr><td style="text-align:center">#️⃣</td><td style="text-align:center"><code>:hash:</code></td><td style="text-align:center">🔣</td><td style="text-align:center"><code>:symbols:</code></td><td style="text-align:center">◀️</td><td style="text-align:center"><code>:arrow_backward:</code></td></tr><tr><td style="text-align:center">⬇️</td><td style="text-align:center"><code>:arrow_down:</code></td><td style="text-align:center">▶️</td><td style="text-align:center"><code>:arrow_forward:</code></td><td style="text-align:center">⬅️</td><td style="text-align:center"><code>:arrow_left:</code></td></tr><tr><td style="text-align:center">🔠</td><td style="text-align:center"><code>:capital_abcd:</code></td><td style="text-align:center">🔡</td><td style="text-align:center"><code>:abcd:</code></td><td style="text-align:center">🔤</td><td style="text-align:center"><code>:abc:</code></td></tr><tr><td style="text-align:center">↙️</td><td style="text-align:center"><code>:arrow_lower_left:</code></td><td style="text-align:center">↘️</td><td style="text-align:center"><code>:arrow_lower_right:</code></td><td style="text-align:center">➡️</td><td style="text-align:center"><code>:arrow_right:</code></td></tr><tr><td style="text-align:center">⬆️</td><td style="text-align:center"><code>:arrow_up:</code></td><td style="text-align:center">↖️</td><td style="text-align:center"><code>:arrow_upper_left:</code></td><td style="text-align:center">↗️</td><td style="text-align:center"><code>:arrow_upper_right:</code></td></tr><tr><td style="text-align:center">⏬</td><td style="text-align:center"><code>:arrow_double_down:</code></td><td style="text-align:center">⏫</td><td style="text-align:center"><code>:arrow_double_up:</code></td><td style="text-align:center">🔽</td><td style="text-align:center"><code>:arrow_down_small:</code></td></tr><tr><td style="text-align:center">⤵️</td><td style="text-align:center"><code>:arrow_heading_down:</code></td><td style="text-align:center">⤴️</td><td style="text-align:center"><code>:arrow_heading_up:</code></td><td style="text-align:center">↩️</td><td style="text-align:center"><code>:leftwards_arrow_with_hook:</code></td></tr><tr><td style="text-align:center">↪️</td><td style="text-align:center"><code>:arrow_right_hook:</code></td><td style="text-align:center">↔️</td><td style="text-align:center"><code>:left_right_arrow:</code></td><td style="text-align:center">↕️</td><td style="text-align:center"><code>:arrow_up_down:</code></td></tr><tr><td style="text-align:center">🔼</td><td style="text-align:center"><code>:arrow_up_small:</code></td><td style="text-align:center">🔃</td><td style="text-align:center"><code>:arrows_clockwise:</code></td><td style="text-align:center">🔄</td><td style="text-align:center"><code>:arrows_counterclockwise:</code></td></tr><tr><td style="text-align:center">⏪</td><td style="text-align:center"><code>:rewind:</code></td><td style="text-align:center">⏩</td><td style="text-align:center"><code>:fast_forward:</code></td><td style="text-align:center">ℹ️</td><td style="text-align:center"><code>:information_source:</code></td></tr><tr><td style="text-align:center">🆗</td><td style="text-align:center"><code>:ok:</code></td><td style="text-align:center">🔀</td><td style="text-align:center"><code>:twisted_rightwards_arrows:</code></td><td style="text-align:center">🔁</td><td style="text-align:center"><code>:repeat:</code></td></tr><tr><td style="text-align:center">🔂</td><td style="text-align:center"><code>:repeat_one:</code></td><td style="text-align:center">🆕</td><td style="text-align:center"><code>:new:</code></td><td style="text-align:center">🔝</td><td style="text-align:center"><code>:top:</code></td></tr><tr><td style="text-align:center">🆙</td><td style="text-align:center"><code>:up:</code></td><td style="text-align:center">🆒</td><td style="text-align:center"><code>:cool:</code></td><td style="text-align:center">🆓</td><td style="text-align:center"><code>:free:</code></td></tr><tr><td style="text-align:center">🆖</td><td style="text-align:center"><code>:ng:</code></td><td style="text-align:center">🎦</td><td style="text-align:center"><code>:cinema:</code></td><td style="text-align:center">🈁</td><td style="text-align:center"><code>:koko:</code></td></tr><tr><td style="text-align:center">📶</td><td style="text-align:center"><code>:signal_strength:</code></td><td style="text-align:center">:u5272:</td><td style="text-align:center"><code>:u5272:</code></td><td style="text-align:center">:u5408:</td><td style="text-align:center"><code>:u5408:</code></td></tr><tr><td style="text-align:center">:u55b6:</td><td style="text-align:center"><code>:u55b6:</code></td><td style="text-align:center">:u6307:</td><td style="text-align:center"><code>:u6307:</code></td><td style="text-align:center">:u6708:</td><td style="text-align:center"><code>:u6708:</code></td></tr><tr><td style="text-align:center">:u6709:</td><td style="text-align:center"><code>:u6709:</code></td><td style="text-align:center">🈵</td><td style="text-align:center"><code>:u6e80:</code></td><td style="text-align:center">:u7121:</td><td style="text-align:center"><code>:u7121:</code></td></tr><tr><td style="text-align:center">:u7533:</td><td style="text-align:center"><code>:u7533:</code></td><td style="text-align:center">:u7a7a:</td><td style="text-align:center"><code>:u7a7a:</code></td><td style="text-align:center">:u7981:</td><td style="text-align:center"><code>:u7981:</code></td></tr><tr><td style="text-align:center">🈂️</td><td style="text-align:center"><code>:sa:</code></td><td style="text-align:center">🚻</td><td style="text-align:center"><code>:restroom:</code></td><td style="text-align:center">🚹</td><td style="text-align:center"><code>:mens:</code></td></tr><tr><td style="text-align:center">🚺</td><td style="text-align:center"><code>:womens:</code></td><td style="text-align:center">🚼</td><td style="text-align:center"><code>:baby_symbol:</code></td><td style="text-align:center">🚭</td><td style="text-align:center"><code>:no_smoking:</code></td></tr><tr><td style="text-align:center">🅿️</td><td style="text-align:center"><code>:parking:</code></td><td style="text-align:center">♿️</td><td style="text-align:center"><code>:wheelchair:</code></td><td style="text-align:center">🚇</td><td style="text-align:center"><code>:metro:</code></td></tr><tr><td style="text-align:center">🛄</td><td style="text-align:center"><code>:baggage_claim:</code></td><td style="text-align:center">🉑</td><td style="text-align:center"><code>:accept:</code></td><td style="text-align:center">🚾</td><td style="text-align:center"><code>:wc:</code></td></tr><tr><td style="text-align:center">🚰</td><td style="text-align:center"><code>:potable_water:</code></td><td style="text-align:center">🚮</td><td style="text-align:center"><code>:put_litter_in_its_place:</code></td><td style="text-align:center">㊙️</td><td style="text-align:center"><code>:secret:</code></td></tr><tr><td style="text-align:center">㊗️</td><td style="text-align:center"><code>:congratulations:</code></td><td style="text-align:center">Ⓜ️</td><td style="text-align:center"><code>:m:</code></td><td style="text-align:center">🛂</td><td style="text-align:center"><code>:passport_control:</code></td></tr><tr><td style="text-align:center">🛅</td><td style="text-align:center"><code>:left_luggage:</code></td><td style="text-align:center">🛃</td><td style="text-align:center"><code>:customs:</code></td><td style="text-align:center">🉐</td><td style="text-align:center"><code>:ideograph_advantage:</code></td></tr><tr><td style="text-align:center">🆑</td><td style="text-align:center"><code>:cl:</code></td><td style="text-align:center">🆘</td><td style="text-align:center"><code>:sos:</code></td><td style="text-align:center">🆔</td><td style="text-align:center"><code>:id:</code></td></tr><tr><td style="text-align:center">🚫</td><td style="text-align:center"><code>:no_entry_sign:</code></td><td style="text-align:center">🔞</td><td style="text-align:center"><code>:underage:</code></td><td style="text-align:center">📵</td><td style="text-align:center"><code>:no_mobile_phones:</code></td></tr><tr><td style="text-align:center">🚯</td><td style="text-align:center"><code>:do_not_litter:</code></td><td style="text-align:center">🚱</td><td style="text-align:center"><code>:non-potable_water:</code></td><td style="text-align:center">🚳</td><td style="text-align:center"><code>:no_bicycles:</code></td></tr><tr><td style="text-align:center">🚷</td><td style="text-align:center"><code>:no_pedestrians:</code></td><td style="text-align:center">🚸</td><td style="text-align:center"><code>:children_crossing:</code></td><td style="text-align:center">⛔️</td><td style="text-align:center"><code>:no_entry:</code></td></tr><tr><td style="text-align:center">✳️</td><td style="text-align:center"><code>:eight_spoked_asterisk:</code></td><td style="text-align:center">❇️</td><td style="text-align:center"><code>:sparkle:</code></td><td style="text-align:center">✴️</td><td style="text-align:center"><code>:eight_pointed_black_star:</code></td></tr><tr><td style="text-align:center">💟</td><td style="text-align:center"><code>:heart_decoration:</code></td><td style="text-align:center">🆚</td><td style="text-align:center"><code>:vs:</code></td><td style="text-align:center">📳</td><td style="text-align:center"><code>:vibration_mode:</code></td></tr><tr><td style="text-align:center">📴</td><td style="text-align:center"><code>:mobile_phone_off:</code></td><td style="text-align:center">💹</td><td style="text-align:center"><code>:chart:</code></td><td style="text-align:center">💱</td><td style="text-align:center"><code>:currency_exchange:</code></td></tr><tr><td style="text-align:center">♈️</td><td style="text-align:center"><code>:aries:</code></td><td style="text-align:center">♉️</td><td style="text-align:center"><code>:taurus:</code></td><td style="text-align:center">♊️</td><td style="text-align:center"><code>:gemini:</code></td></tr><tr><td style="text-align:center">♋️</td><td style="text-align:center"><code>:cancer:</code></td><td style="text-align:center">♌️</td><td style="text-align:center"><code>:leo:</code></td><td style="text-align:center">♍️</td><td style="text-align:center"><code>:virgo:</code></td></tr><tr><td style="text-align:center">♎️</td><td style="text-align:center"><code>:libra:</code></td><td style="text-align:center">♏️</td><td style="text-align:center"><code>:scorpius:</code></td><td style="text-align:center">♐️</td><td style="text-align:center"><code>:sagittarius:</code></td></tr><tr><td style="text-align:center">♑️</td><td style="text-align:center"><code>:capricorn:</code></td><td style="text-align:center">♒️</td><td style="text-align:center"><code>:aquarius:</code></td><td style="text-align:center">♓️</td><td style="text-align:center"><code>:pisces:</code></td></tr><tr><td style="text-align:center">⛎</td><td style="text-align:center"><code>:ophiuchus:</code></td><td style="text-align:center">🔯</td><td style="text-align:center"><code>:six_pointed_star:</code></td><td style="text-align:center">❎</td><td style="text-align:center"><code>:negative_squared_cross_mark:</code></td></tr><tr><td style="text-align:center">🅰️</td><td style="text-align:center"><code>:a:</code></td><td style="text-align:center">🅱️</td><td style="text-align:center"><code>:b:</code></td><td style="text-align:center">🆎</td><td style="text-align:center"><code>:ab:</code></td></tr><tr><td style="text-align:center">🅾️</td><td style="text-align:center"><code>:o2:</code></td><td style="text-align:center">💠</td><td style="text-align:center"><code>:diamond_shape_with_a_dot_inside:</code></td><td style="text-align:center">♻️</td><td style="text-align:center"><code>:recycle:</code></td></tr><tr><td style="text-align:center">🔚</td><td style="text-align:center"><code>:end:</code></td><td style="text-align:center">🔙</td><td style="text-align:center"><code>:back:</code></td><td style="text-align:center">🔛</td><td style="text-align:center"><code>:on:</code></td></tr><tr><td style="text-align:center">🔜</td><td style="text-align:center"><code>:soon:</code></td><td style="text-align:center">🕐</td><td style="text-align:center"><code>:clock1:</code></td><td style="text-align:center">🕜</td><td style="text-align:center"><code>:clock130:</code></td></tr><tr><td style="text-align:center">🕙</td><td style="text-align:center"><code>:clock10:</code></td><td style="text-align:center">🕥</td><td style="text-align:center"><code>:clock1030:</code></td><td style="text-align:center">🕚</td><td style="text-align:center"><code>:clock11:</code></td></tr><tr><td style="text-align:center">🕦</td><td style="text-align:center"><code>:clock1130:</code></td><td style="text-align:center">🕛</td><td style="text-align:center"><code>:clock12:</code></td><td style="text-align:center">🕧</td><td style="text-align:center"><code>:clock1230:</code></td></tr><tr><td style="text-align:center">🕑</td><td style="text-align:center"><code>:clock2:</code></td><td style="text-align:center">🕝</td><td style="text-align:center"><code>:clock230:</code></td><td style="text-align:center">🕒</td><td style="text-align:center"><code>:clock3:</code></td></tr><tr><td style="text-align:center">🕞</td><td style="text-align:center"><code>:clock330:</code></td><td style="text-align:center">🕓</td><td style="text-align:center"><code>:clock4:</code></td><td style="text-align:center">🕟</td><td style="text-align:center"><code>:clock430:</code></td></tr><tr><td style="text-align:center">🕔</td><td style="text-align:center"><code>:clock5:</code></td><td style="text-align:center">🕠</td><td style="text-align:center"><code>:clock530:</code></td><td style="text-align:center">🕕</td><td style="text-align:center"><code>:clock6:</code></td></tr><tr><td style="text-align:center">🕡</td><td style="text-align:center"><code>:clock630:</code></td><td style="text-align:center">🕖</td><td style="text-align:center"><code>:clock7:</code></td><td style="text-align:center">🕢</td><td style="text-align:center"><code>:clock730:</code></td></tr><tr><td style="text-align:center">🕗</td><td style="text-align:center"><code>:clock8:</code></td><td style="text-align:center">🕣</td><td style="text-align:center"><code>:clock830:</code></td><td style="text-align:center">🕘</td><td style="text-align:center"><code>:clock9:</code></td></tr><tr><td style="text-align:center">🕤</td><td style="text-align:center"><code>:clock930:</code></td><td style="text-align:center">💲</td><td style="text-align:center"><code>:heavy_dollar_sign:</code></td><td style="text-align:center">©️</td><td style="text-align:center"><code>:copyright:</code></td></tr><tr><td style="text-align:center">®️</td><td style="text-align:center"><code>:registered:</code></td><td style="text-align:center">™️</td><td style="text-align:center"><code>:tm:</code></td><td style="text-align:center">❌</td><td style="text-align:center"><code>:x:</code></td></tr><tr><td style="text-align:center">❗️</td><td style="text-align:center"><code>:heavy_exclamation_mark:</code></td><td style="text-align:center">‼️</td><td style="text-align:center"><code>:bangbang:</code></td><td style="text-align:center">⁉️</td><td style="text-align:center"><code>:interrobang:</code></td></tr><tr><td style="text-align:center">⭕️</td><td style="text-align:center"><code>:o:</code></td><td style="text-align:center">✖️</td><td style="text-align:center"><code>:heavy_multiplication_x:</code></td><td style="text-align:center">➕</td><td style="text-align:center"><code>:heavy_plus_sign:</code></td></tr><tr><td style="text-align:center">➖</td><td style="text-align:center"><code>:heavy_minus_sign:</code></td><td style="text-align:center">➗</td><td style="text-align:center"><code>:heavy_division_sign:</code></td><td style="text-align:center">💮</td><td style="text-align:center"><code>:white_flower:</code></td></tr><tr><td style="text-align:center">💯</td><td style="text-align:center"><code>:100:</code></td><td style="text-align:center">✔️</td><td style="text-align:center"><code>:heavy_check_mark:</code></td><td style="text-align:center">☑️</td><td style="text-align:center"><code>:ballot_box_with_check:</code></td></tr><tr><td style="text-align:center">🔘</td><td style="text-align:center"><code>:radio_button:</code></td><td style="text-align:center">🔗</td><td style="text-align:center"><code>:link:</code></td><td style="text-align:center">➰</td><td style="text-align:center"><code>:curly_loop:</code></td></tr><tr><td style="text-align:center">〰️</td><td style="text-align:center"><code>:wavy_dash:</code></td><td style="text-align:center">〽️</td><td style="text-align:center"><code>:part_alternation_mark:</code></td><td style="text-align:center">🔱</td><td style="text-align:center"><code>:trident:</code></td></tr><tr><td style="text-align:center">▪️</td><td style="text-align:center"><code>:black_small_square:</code></td><td style="text-align:center">▫️</td><td style="text-align:center"><code>:white_small_square:</code></td><td style="text-align:center">◾️</td><td style="text-align:center"><code>:black_medium_small_square:</code></td></tr><tr><td style="text-align:center">◽️</td><td style="text-align:center"><code>:white_medium_small_square:</code></td><td style="text-align:center">◼️</td><td style="text-align:center"><code>:black_medium_square:</code></td><td style="text-align:center">◻️</td><td style="text-align:center"><code>:white_medium_square:</code></td></tr><tr><td style="text-align:center">⬛️</td><td style="text-align:center"><code>:black_large_square:</code></td><td style="text-align:center">⬜️</td><td style="text-align:center"><code>:white_large_square:</code></td><td style="text-align:center">✅</td><td style="text-align:center"><code>:white_check_mark:</code></td></tr><tr><td style="text-align:center">🔲</td><td style="text-align:center"><code>:black_square_button:</code></td><td style="text-align:center">🔳</td><td style="text-align:center"><code>:white_square_button:</code></td><td style="text-align:center">⚫️</td><td style="text-align:center"><code>:black_circle:</code></td></tr><tr><td style="text-align:center">⚪️</td><td style="text-align:center"><code>:white_circle:</code></td><td style="text-align:center">🔴</td><td style="text-align:center"><code>:red_circle:</code></td><td style="text-align:center">🔵</td><td style="text-align:center"><code>:large_blue_circle:</code></td></tr><tr><td style="text-align:center">🔷</td><td style="text-align:center"><code>:large_blue_diamond:</code></td><td style="text-align:center">🔶</td><td style="text-align:center"><code>:large_orange_diamond:</code></td><td style="text-align:center">🔹</td><td style="text-align:center"><code>:small_blue_diamond:</code></td></tr><tr><td style="text-align:center">🔸</td><td style="text-align:center"><code>:small_orange_diamond:</code></td><td style="text-align:center">🔺</td><td style="text-align:center"><code>:small_red_triangle:</code></td><td style="text-align:center">🔻</td><td style="text-align:center"><code>:small_red_triangle_down:</code></td></tr><tr><td style="text-align:center">:shipit:</td><td style="text-align:center"><code>:shipit:</code></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;这张表用来便于预览和复制Emoji语法，&lt;a href=&quot;https://gitee.com/yeshang5/emoji-cheat-sheet&quot;&gt;源地址&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="其他" scheme="http://beta.azusemisa.top/categories/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="工具" scheme="http://beta.azusemisa.top/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>【洛谷 P6195】 迫害</title>
    <link href="http://beta.azusemisa.top/posts/3896288680.html"/>
    <id>http://beta.azusemisa.top/posts/3896288680.html</id>
    <published>2020-03-08T08:46:02.000Z</published>
    <updated>2020-08-17T12:42:45.271Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P6195">题目传送门</a></p><p>这道题，乍一看很难，但其实就是一道推结论的数学题。</p><!--more--><p>相信大家在小学的时候都做过这样一道数学题吧：大意就是如何用最少的正整数凑出最多的连续的正整数（随便口胡了一下，差不多就行了），其思路大致如下：</p><ul><li>先取<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，因为这是最小的正整数。</li><li>再取<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>，因为一个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>凑不出<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>。</li><li>再取<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn></mrow><annotation encoding="application/x-tex">4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span>，因为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>+</mo><mn>2</mn><mo>=</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">1+2=3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>，无法凑出<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn></mrow><annotation encoding="application/x-tex">4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span>。</li><li>再取<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>8</mn></mrow><annotation encoding="application/x-tex">8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">8</span></span></span></span>，因为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>+</mo><mn>4</mn><mo>=</mo><mn>5</mn><mo separator="true">,</mo><mn>2</mn><mo>+</mo><mn>4</mn><mo>=</mo><mn>6</mn><mo separator="true">,</mo><mn>1</mn><mo>+</mo><mn>2</mn><mo>+</mo><mn>4</mn><mo>=</mo><mn>7</mn></mrow><annotation encoding="application/x-tex">1+4=5,2+4=6,1+2+4=7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">6</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">7</span></span></span></span>，凑不出<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>8</mn></mrow><annotation encoding="application/x-tex">8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">8</span></span></span></span>。</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⋯</mo></mrow><annotation encoding="application/x-tex">\cdots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.31em;vertical-align:0em;"></span><span class="minner">⋯</span></span></span></span></li></ul><p>由此，我们可以看出一个规律，当每次取前面取过的所有数的和再加一时，可以凑出最多的正整数，即：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>m</mi><mi>i</mi></msub><mo>=</mo><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></munderover><msub><mi>m</mi><mi>j</mi></msub><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">m_i=\sum\limits_{j=1}^{i-1}m_j+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.2254460000000007em;vertical-align:-1.4137769999999998em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8116690000000006em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4137769999999998em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p><p>铺垫完毕。</p><h1 id="过程"><a class="markdownIt-Anchor" href="#过程"></a> 过程</h1><p>接下来我们进入这道题的分析。</p><p>根据上述规律，我们可以看出，这道题其实也有着异曲同工之妙，由于有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span>个数可以取任意值，我们就按照以上策略来取（由于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>代表的是有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，所以可以当成是补漏的），设<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>表示第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>次取的值，则有：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>=</mo><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">x_1=n+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mn>2</mn></msub><mo>=</mo><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo>=</mo><mn>2</mn><mo>⋅</mo><mi>n</mi><mo>+</mo><mn>2</mn><mo>=</mo><mn>2</mn><mo>⋅</mo><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">x_2=x_1+n+1=2\cdot n+2=2\cdot(n+1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mn>3</mn></msub><mo>=</mo><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>x</mi><mn>2</mn></msub><mo>+</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo>=</mo><mn>4</mn><mo>⋅</mo><mi>n</mi><mo>+</mo><mn>4</mn><mo>=</mo><mn>4</mn><mo>⋅</mo><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">x_3=x_1+x_2+n+1=4\cdot n+4=4\cdot(n+1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mn>4</mn></msub><mo>=</mo><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>x</mi><mn>2</mn></msub><mo>+</mo><msub><mi>x</mi><mn>3</mn></msub><mo>+</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo>=</mo><mn>8</mn><mo>⋅</mo><mi>n</mi><mo>+</mo><mn>8</mn><mo>=</mo><mn>8</mn><mo>⋅</mo><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">x_4=x_1+x_2+x_3+n+1=8\cdot n+8=8\cdot(n+1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">8</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">8</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">8</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⋯</mo></mrow><annotation encoding="application/x-tex">\cdots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.31em;vertical-align:0em;"></span><span class="minner">⋯</span></span></span></span></span></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>m</mi></msub><mo>=</mo><msup><mn>2</mn><mrow><mi>m</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>⋅</mo><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">x_m=2^{m-1}\cdot(n+1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.864108em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p><p>此时，我们能表示出来的从<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>开始的连续的正整数就有这么多：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><msub><mi>x</mi><mi>i</mi></msub><mo>+</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">\sum\limits_{i=1}^m x_i+n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span></span></p><p>即：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mn>2</mn><mo>+</mo><mn>4</mn><mo>+</mo><mn>8</mn><mo>+</mo><mo>⋯</mo><mo>+</mo><msup><mn>2</mn><mrow><mi>m</mi><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">)</mo><mo>⋅</mo><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">(1+2+4+8+\cdots+2^{m-1})\cdot(n+1)+n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">8</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span></span></p><p>怎么样，前面那个式子是不是似曾相识？没错，这是我们小学所学的等比数列！只要把最后的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>变成<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n+1-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，并把<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>合并到前面的那一坨东西里面，就可以弄出这个式子：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>m</mi></msup><mo>⋅</mo><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^m\cdot(n+1)-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7143919999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p><p>具体过程我不详细解释了，比较简单，手推一下就行了。既然都弄出了这个式子，那我们就可以偷税地去算了。</p><p>对了，由于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">m\le 10^9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span>，直接暴力算乘方明显会超时，所以我们需要用快速幂（不会的同学建议去做一下<a href="https://www.luogu.com.cn/problem/P1226">这道题</a>）。</p><h1 id="参考代码"><a class="markdownIt-Anchor" href="#参考代码"></a> 参考代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> p 1000000007</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">ll n,m,t;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">input</span><span class="params">()</span><span class="comment">//读入优化</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> c=getchar();</span><br><span class="line">    <span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">f=<span class="number">-1</span>;</span><br><span class="line">        c=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">        x=x*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">ksm</span><span class="params">(ll b,ll k)</span><span class="comment">//快速幂</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(k&amp;<span class="number">1</span>)<span class="comment">//快速幂里面的位运算，相当于k%2==1</span></span><br><span class="line">ans=ans*b%p;</span><br><span class="line">b=b*b%p;</span><br><span class="line">k&gt;&gt;=<span class="number">1</span>;<span class="comment">//同上，相当于k/=2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> n=input();<span class="comment">//读入优化不解释</span></span><br><span class="line"> m=input();</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ksm(<span class="number">2</span>,m)*(n+<span class="number">1</span>)%p<span class="number">-1</span>);<span class="comment">//记得取模啊！！！</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="后记"><a class="markdownIt-Anchor" href="#后记"></a> 后记</h1><p>这道题其实不算很难吧，主要就是推式子那里麻烦了一点，然后要用到快速幂，其他的也并不是很麻烦，不想用读入优化也是可以的，只是因为比赛的时候想优化一下（<s>其实我还加了八聚氧只不过太长了所以就删掉了</s>）。</p>]]></content>
    
    
    <summary type="html">基本纯数论，且过程让人觉得十分眼熟</summary>
    
    
    
    <category term="题解" scheme="http://beta.azusemisa.top/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="贪心" scheme="http://beta.azusemisa.top/tags/%E8%B4%AA%E5%BF%83/"/>
    
    <category term="数论" scheme="http://beta.azusemisa.top/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>【CodeForces 827A】 String Reconstruction</title>
    <link href="http://beta.azusemisa.top/posts/1841004241.html"/>
    <id>http://beta.azusemisa.top/posts/1841004241.html</id>
    <published>2020-02-22T11:06:50.000Z</published>
    <updated>2020-08-17T12:43:59.859Z</updated>
    
    <content type="html"><![CDATA[<p>其实说实话，在看到这道题时，我并没有想到要用并查集做，我觉得，这道题其实可以暴力。</p><!--more--><p>当然并不是说每输入一个字符串的起始位置就开始暴力更改这个区间，这样肯定是会T的。</p><p>我所说的暴力呢，是说在每个区间开始的位置标记这个区间是第几个字符串，如果有多个，就取其中最长的一个（因为根据题目要求一定存在符合要求的字符串，所以最长的一定包含了短的），然后最后在输出的时候判断一下该输出哪个字符串就行了。</p><p>那么不属于任何一个区间的地方呢？直接输出<code>a</code>不就完了！还有什么小写字母字符串是比全是<code>a</code>的字符串的字典序还要小呢？</p><p>注意！在输出过程中，如果遇到这个区间还没输出完，又到了另外一个区间的开始位置时，一定要判断当前正在输出的这个字符串能否将遇到的这个区间的字符串完全包含！如果不能，就立马退出，再输出从这个位置开始的字符串。</p><p>思路还是很简单的，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,k,x,m,a[<span class="number">10000001</span>];<span class="comment">//a数组标记每个区间所对应的字符串的下标，这个数组一定要开大一点，否则会RE</span></span><br><span class="line"><span class="built_in">string</span> t[<span class="number">100001</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;t[i]&gt;&gt;k;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=k;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line"><span class="keyword">if</span>(t[a[x]].length()&lt;t[i].length())<span class="comment">//如果已有区间从x开始，则比较两字符串的长度</span></span><br><span class="line">a[x]=i;</span><br><span class="line">m=max(m,x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!a[i])<span class="comment">//如果当前点不属于任何一个区间，输出&#x27;a&#x27;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;t[a[i]].length();j++)<span class="comment">//输出当前区间的字符串</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(t[a[i+j]].length()+j&gt;t[a[i]].length())<span class="comment">//如果遇到另一个区间的开始，且无法完全包含，则退出，因为a默认为0，所以即使不是另一个区间的开始也没有问题</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,t[a[i]][j]);</span><br><span class="line">&#125;</span><br><span class="line">i+=j;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">一道可以暴力解决的并查集</summary>
    
    
    
    <category term="题解" scheme="http://beta.azusemisa.top/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="字符串" scheme="http://beta.azusemisa.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="模拟" scheme="http://beta.azusemisa.top/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>【洛谷 P3385】 【模板】负环</title>
    <link href="http://beta.azusemisa.top/posts/1479545610.html"/>
    <id>http://beta.azusemisa.top/posts/1479545610.html</id>
    <published>2020-02-19T10:43:41.000Z</published>
    <updated>2020-08-17T12:43:44.365Z</updated>
    
    <content type="html"><![CDATA[<p>本题其实就是最短路的延伸版本，如果不了解最短路的可以看我这篇文章：<a href="/posts/1960909489.html" title="【笔记】图论-最短路径算法">【笔记】图论-最短路径算法</a>。</p><!--more--><p>如果了解最短路的一定知道， Bellman-Ford 算法是可以判断负环的，方法也很简单，就是在两重循环结束后再遍历每一条边（下文通称称这条边的起点为点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>，终点为点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>），如果从点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>到点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>比<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>i</mi><msub><mi>s</mi><mi>v</mi></msub></mrow><annotation encoding="application/x-tex">dis_v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>还要短，那么就存在负环。</p><p>为什么呢？我们来看下面这张图：</p><p><img src="https://i.loli.net/2020/02/19/7JRoHMgNWS4tfie.png" alt="" /></p><p>假设从点1出发，手动模拟一下 Bellman-ford 的两重循环可以算出：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>i</mi><msub><mi>s</mi><mn>1</mn></msub><mo>=</mo><mo>−</mo><mn>2</mn><mo separator="true">,</mo><mi>d</mi><mi>i</mi><msub><mi>s</mi><mn>2</mn></msub><mo>=</mo><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mi>d</mi><mi>i</mi><msub><mi>s</mi><mn>3</mn></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">dis_1=-2,dis_2=-1,dis_3=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">−</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，但此时，很明显可以看出，从点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn></mrow><annotation encoding="application/x-tex">3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>到点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">-3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">3</span></span></span></span>，比<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>i</mi><msub><mi>s</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">dis_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>还要小，所以此时是存在负环的。</p><p>因为如果存在负环，那么每在环中转一圈，就会减小一定的值，这样就不存在最短路了，不论你转多少圈，再转一圈始终会比当前的最短距离短，如果不存在负环，那么最短路就是确定的，也就是说经过<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>×</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">n\times m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span>次循环一定能求出最短的路径。</p><p>根据以上思路，我打出了一段代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> t,n,m,k,u[<span class="number">6001</span>],v[<span class="number">6001</span>],c[<span class="number">6001</span>],dis[<span class="number">2001</span>];<span class="comment">//因为有可能全都是双向边，所以数组要开成m的两倍</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(dis,<span class="number">0x3f3f3f</span>,<span class="keyword">sizeof</span>(dis));</span><br><span class="line">k=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line">k++;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;u[k],&amp;v[k],&amp;c[k]);<span class="comment">//Bellman-Ford这样存边更方便</span></span><br><span class="line"><span class="keyword">if</span>(c[k]&gt;=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">k++;</span><br><span class="line">u[k]=v[k<span class="number">-1</span>];</span><br><span class="line">v[k]=u[k<span class="number">-1</span>];</span><br><span class="line">c[k]=c[k<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dis[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=k;j++)<span class="comment">//Bellman-Ford朴素算法</span></span><br><span class="line">dis[v[j]]=min(dis[v[j]],dis[u[j]]+c[j]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line"><span class="keyword">if</span>(dis[v[i]]&gt;dis[u[i]]+c[i])<span class="comment">//判断负环</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;YE5\n&quot;</span>);<span class="comment">//毒瘤出题人解释一下为什么是YE5！！！</span></span><br><span class="line"><span class="keyword">goto</span> l;<span class="comment">//懒得写flag，直接跳出循环到l:处</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;N0\n&quot;</span>);</span><br><span class="line">l:;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你看到上面这段代码就很高兴地回去改了，那么很遗憾地告诉你，这是90pts的代码。</p><p>为什么呢？我们看题目：</p><p>寻找一个<strong>从顶点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>所能到达的</strong>负环。</p><p>上面那段代码判断的是有没有负环，但题目要求是求从点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>能到的负环，所以会错。</p><p>什么意思呢？意思是从点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>开始，要能到这个负环才行，如果点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>与这个负环不连通，那么就还是输出<code>N0</code>。</p><p>怎么改呢？很简单，用一个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span>数组表示每个点能否从点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>到达，就像 Dijkstra 一样，枚举每条边时，我们判断一下这条边的出发点是否能从点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>到达就行了，如果出发点目前不能从点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>到达，就不管这条边，如果可以，就把这条边的终点也标记为可以从点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>到达。同时，最后在判断负环时，也要判断当前边的出发点是否能从点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>到达。这样不能从点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>到达的负环就不会被判断到了。</p><p>那么，这么做会不会影响<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>i</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">dis</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span></span></span></span>数组的更新呢？当然不会，我们本来就是为了避免误将没有更新过的点当成已更新过的，才会把<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>i</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">dis</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span></span></span></span>数组设成无穷大的，现在只是另开了一个数组来代替这个功能而已。</p><p>还是比较简单吧，加了几行代码而已：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> t,n,m,k,u[<span class="number">6001</span>],v[<span class="number">6001</span>],c[<span class="number">6001</span>],dis[<span class="number">2001</span>],b[<span class="number">2001</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="keyword">sizeof</span>(b));</span><br><span class="line">k=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line">k++;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;u[k],&amp;v[k],&amp;c[k]);</span><br><span class="line"><span class="keyword">if</span>(c[k]&gt;=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">k++;</span><br><span class="line">u[k]=v[k<span class="number">-1</span>];</span><br><span class="line">v[k]=u[k<span class="number">-1</span>];</span><br><span class="line">c[k]=c[k<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dis[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">b[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=k;j++)</span><br><span class="line"><span class="keyword">if</span>(b[u[j]])</span><br><span class="line">&#123;</span><br><span class="line">dis[v[j]]=min(dis[v[j]],dis[u[j]]+c[j]);</span><br><span class="line">b[v[j]]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line"><span class="keyword">if</span>((b[u[i]]||b[v[i]])&amp;&amp;dis[v[i]]&gt;dis[u[i]]+c[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;YE5\n&quot;</span>);</span><br><span class="line"><span class="keyword">goto</span> l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;N0\n&quot;</span>);</span><br><span class="line">l:;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，没有套路了，这就是 AC 的代码。</p><p>评测记录：</p><p><img src="https://i.loli.net/2020/02/19/f3OHZjP2wItT9oh.png" alt="" /></p><p><s>Bellman-Ford 真香。</s></p>]]></content>
    
    
    <summary type="html">Bellman-Ford判环</summary>
    
    
    
    <category term="题解" scheme="http://beta.azusemisa.top/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="最短路" scheme="http://beta.azusemisa.top/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>【洛谷 P6101】 出言不逊</title>
    <link href="http://beta.azusemisa.top/posts/570467942.html"/>
    <id>http://beta.azusemisa.top/posts/570467942.html</id>
    <published>2020-02-15T09:03:58.000Z</published>
    <updated>2020-08-17T12:42:58.400Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P6101">谔谔的题目传送门</a></p><p><strong>题意：</strong></p><p>每次操作使字符串中的一种字符数量增加一倍，问最少几次操作后字符串长度能大于等于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi></mrow><annotation encoding="application/x-tex">L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">L</span></span></span></span>。</p><!--more--><p><strong>思路：</strong></p><p>根据这个题意，我们可以看出，其实这个题就是一个贪心的思想，只要一开始选数量最多的那种字符，然后一直将其倍增就好了，为什么呢？因为既然是要求最少的操作次数，那么每次操作能增加的字符数量一定要尽量多，所以我们一开始就选最多的那种字符，就能使每次操作增加的字符数量最大化，这样最后的次数一定是最少的。同时这样倍增一次后，该字符数量还是最多的，那么我们下一次操作就还是选这种字符。</p><p>举个例子，在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext mathvariant="monospace">AKIOI</mtext></mrow><annotation encoding="application/x-tex">\texttt{AKIOI}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61111em;vertical-align:0em;"></span><span class="mord text"><span class="mord texttt">AKIOI</span></span></span></span></span> 这个字符串中，字符 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext mathvariant="monospace">I</mtext></mrow><annotation encoding="application/x-tex">\texttt{I}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61111em;vertical-align:0em;"></span><span class="mord text"><span class="mord texttt">I</span></span></span></span></span> 的个数显然是最多的，那么我们一直将其数量倍增，最后能达到的总长度一定比选其他字符要长。</p><p>同时我们也可以看出，这道题不可能暴力模拟，因为根据<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi><mo>≤</mo><msup><mn>2</mn><mn>64</mn></msup></mrow><annotation encoding="application/x-tex">L\le2^{64}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">L</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span></span>这个数据就能看出，谁想暴力，谁就爆零。</p><p>那么我们该怎么办呢？推规律呗！</p><p>设<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mo>=</mo><mi mathvariant="normal">∣</mi><mi>S</mi><mi mathvariant="normal">∣</mi><mo>−</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">s=|S|-x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>（也就是除开我们要倍增的那种字符以外的字符个数），<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>L</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">L_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>次操作后的字符串长度。</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>L</mi><mn>1</mn></msub><mo>=</mo><mi>s</mi><mo>+</mo><mn>2</mn><mo>⋅</mo><mi>x</mi><mo>=</mo><mi>s</mi><mo>+</mo><msup><mn>2</mn><mn>1</mn></msup><mo>⋅</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">L_1=s+2\cdot x=s+2^1\cdot x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span></span></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>L</mi><mn>2</mn></msub><mo>=</mo><mi>s</mi><mo>+</mo><mn>2</mn><mo>⋅</mo><mn>2</mn><mo>⋅</mo><mi>x</mi><mo>=</mo><mi>s</mi><mo>+</mo><msup><mn>2</mn><mn>2</mn></msup><mo>⋅</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">L_2=s+2\cdot 2\cdot x=s+2^2\cdot x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span></span></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>L</mi><mn>3</mn></msub><mo>=</mo><mi>s</mi><mo>+</mo><mn>2</mn><mo>⋅</mo><mn>2</mn><mo>⋅</mo><mn>2</mn><mo>⋅</mo><mi>x</mi><mo>=</mo><mi>s</mi><mo>+</mo><msup><mn>2</mn><mn>3</mn></msup><mo>⋅</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">L_3=s+2\cdot 2\cdot 2\cdot x=s+2^3\cdot x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span></span></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⋯</mo></mrow><annotation encoding="application/x-tex">\cdots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.31em;vertical-align:0em;"></span><span class="minner">⋯</span></span></span></span></span></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>L</mi><mi>n</mi></msub><mo>=</mo><mi>s</mi><mo>+</mo><msup><mn>2</mn><mi>n</mi></msup><mo>⋅</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">L_n=s+2^n\cdot x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7143919999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span></span></p><p>由此，这个式子就推出来了，有人可能会说，你这个计算的是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>次操作后的字符串长度啊，不符合题意啊！这好办，既然要求字符串长度大于等于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi></mrow><annotation encoding="application/x-tex">L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">L</span></span></span></span>，也就是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>L</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">L_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>要大于等于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi></mrow><annotation encoding="application/x-tex">L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">L</span></span></span></span>，那我们列个不等式就行了。</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mo>+</mo><msup><mn>2</mn><mi>n</mi></msup><mo>⋅</mo><mi>x</mi><mo>≥</mo><mi>L</mi></mrow><annotation encoding="application/x-tex">s+2^n\cdot x\ge L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7143919999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">L</span></span></span></span></span></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup><mo>≥</mo><mfrac><mrow><mi>L</mi><mo>−</mo><mi>s</mi></mrow><mi>x</mi></mfrac></mrow><annotation encoding="application/x-tex">2^n\ge\dfrac{L-s}{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.850362em;vertical-align:-0.13597em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.04633em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>≥</mo><mi>log</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><mfrac><mrow><mi>L</mi><mo>−</mo><mi>s</mi></mrow><mi>x</mi></mfrac><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">n\ge \log\left(\dfrac{L-s}{x}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span></span></span></span></span></p><p>完事。</p><p>关于计算字符个数，其实也很简单，题目明确说了，一共只有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>62</mn></mrow><annotation encoding="application/x-tex">62</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span><span class="mord">2</span></span></span></span>种字符，那么我们开个数组，桶排就好了，比如说大写字母个数就存在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>b</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">b_{1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>b</mi><mn>26</mn></msub></mrow><annotation encoding="application/x-tex">b_{26}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，小写字母个数就存在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>b</mi><mn>27</mn></msub></mrow><annotation encoding="application/x-tex">b_{27}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>b</mi><mn>52</mn></msub></mrow><annotation encoding="application/x-tex">b_{52}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，而数字个数就存在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>b</mi><mn>53</mn></msub></mrow><annotation encoding="application/x-tex">b_{53}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>b</mi><mn>62</mn></msub></mrow><annotation encoding="application/x-tex">b_{62}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。</p><p>对了，还有一点重要提醒：<strong>开 long long 还是会炸，要开 long double 或 unsigned long long！！！</strong>，本题还特别提醒，要注意数据范围，结果我因为没开 long double 调了半小时……。long long 的范围是到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>63</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{63}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span><span class="mord mtight">3</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，但本题的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi></mrow><annotation encoding="application/x-tex">L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">L</span></span></span></span>是到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>64</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{64}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span><span class="mord mtight">4</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，所以用了 long long 还是不行。</p><p><strong>代码：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> maxn,ans,b[<span class="number">63</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">double</span> l;<span class="comment">//再次提醒，一定要开 long double 或 unsigned long long。</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">my_log</span><span class="params">(<span class="keyword">long</span> <span class="keyword">double</span> x)</span><span class="comment">//我个人不太信得过 cmath 里的函数，所以能自己写的我还是自己写好了。</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> s=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x&gt;<span class="number">1</span>)<span class="comment">//当x为1时，表示长度已经等于L了，所以不能再累加了。</span></span><br><span class="line">&#123;</span><br><span class="line">s++;</span><br><span class="line">x/=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s&gt;&gt;l;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]&gt;=<span class="string">&#x27;A&#x27;</span>&amp;&amp;s[i]&lt;=<span class="string">&#x27;Z&#x27;</span>)<span class="comment">//分段存，判断当前字符属于哪一类，然后对应的下标+1</span></span><br><span class="line">b[s[i]-<span class="string">&#x27;A&#x27;</span>+<span class="number">1</span>]++;</span><br><span class="line"><span class="keyword">if</span>(s[i]&gt;=<span class="string">&#x27;a&#x27;</span>&amp;&amp;s[i]&lt;=<span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">b[s[i]-<span class="string">&#x27;a&#x27;</span>+<span class="number">27</span>]++;</span><br><span class="line"><span class="keyword">if</span>(s[i]&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;s[i]&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">b[s[i]-<span class="string">&#x27;0&#x27;</span>+<span class="number">53</span>]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">62</span>;i++)<span class="comment">//找出最数量最多的字符</span></span><br><span class="line">maxn=max(maxn,b[i]);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;my_log((l-s.length()+maxn)*<span class="number">1.0</span>/maxn);<span class="comment">//这里的1.0主要起转化类型的作用</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//谔谔完毕</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就这样，如果还有不懂的，可以在评论里问，如果有什么不对的地方，还请大佬指出，谢谢！</p>]]></content>
    
    
    <summary type="html">数据坑人但的确很简单的贪心</summary>
    
    
    
    <category term="题解" scheme="http://beta.azusemisa.top/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="字符串" scheme="http://beta.azusemisa.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="贪心" scheme="http://beta.azusemisa.top/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>【笔记】图论-拓扑排序</title>
    <link href="http://beta.azusemisa.top/posts/2563015957.html"/>
    <id>http://beta.azusemisa.top/posts/2563015957.html</id>
    <published>2020-02-05T10:38:31.000Z</published>
    <updated>2020-08-17T12:59:31.237Z</updated>
    
    <content type="html"><![CDATA[<p>拓扑排序，是一种听上去很高级的算法，但其实它是很简单的（<s>就基础算法而言</s>）。</p><p>本文主要介绍一下拓扑排序最基本的概念和实现过程。（<s>也就是说是一篇入门文章，大佬们可以不用看了</s>）</p><!--more--><h1 id="什么是拓扑排序"><a class="markdownIt-Anchor" href="#什么是拓扑排序"></a> 什么是拓扑排序？</h1><p>在生活中<s>和数学题中</s>，我们常常会遇到需要完成很多件事的情况<s>比如写很多作业</s>，这些事件之间各有先后顺序，即你必须先完成这件事，才能完成另外的事，我们可以根据这些事来画张图（只是个例子）：</p><p><img src="https://i.loli.net/2020/02/05/JtwFci1XBxgO9Wr.png" alt="" /></p><p>在这张图中，每条有向边代表要想完成v，就必须完成u，比如要想打开洛谷，就必须先打开电脑<s>废话</s>。</p><p>能不能给这些事排个序，让我按照这个顺序来做事不会冲突呢（比如不会出现先水犇犇再打开洛谷的情况）？</p><p>当然可以，我们可以看出，按照<code>ABCDEFGH</code>这个顺序做事就不会冲突。</p><p>说了这么多，究竟什么是拓扑排序呢？相信你也看出来了，拓扑排序就是对一张图进行排序，使得每一条路径的起点永远出现在终点的前面，也就是安排一个顺序，使得做事不会冲突。最后的这个顺序，就被称为是拓扑序列，而得出这个序列的过程被称为拓扑排序。</p><p>当然，一张图的拓扑序列可能不止一种，比如在上图中<code>BACEDGFH</code>也是一个拓扑序列。</p><p>对于要进行排序的图，它必须是一个DAG（有向无环图），即不会出现要做A，先做B，但要做B，又要先做A的情况。</p><h1 id="算法思路"><a class="markdownIt-Anchor" href="#算法思路"></a> 算法思路</h1><p>拓扑排序其实很简单，对于一个点，如果它没有父亲（即与其相连的入边的起点）或是其父亲都被排在序列里了，那么这个点就可以放进序列，因为它既然没有先决条件，就是可以做的。</p><p>概括一下，不断地去做那些没有先决条件或是先决条件被满足的事情，最后所有事情都会做完<s>这句话不适用于我的作业</s>（满足是DAG的情况下）。</p><p>那么怎么判断一个点有无先决条件呢？很简单，我们在建图时就统计好每个点的入度，入度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>就说明没有先决条件，就是可以做的，在排序时，每做完一件事，就删掉这个点，同时其出边相连的点入度减<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，如果一个点的先决条件都被满足了，那么它的入度也就为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>了。</p><p>**注意：**不是真的要在图里把这个结点删去，而是只用将其相邻的点入度减<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>就行了，这样就和删去这个点效果是一样的了。</p><p>拓扑排序主要有两种实现方法，可以分别类比为BFS和DFS（因为真的很像啊！），我个人比较喜欢用BFS，因为要开的数组较少。</p><h2 id="bfs"><a class="markdownIt-Anchor" href="#bfs"></a> BFS</h2><p>这种方法的思路是：每找到一个入度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>的点,就将其入队，然后拓展与其相连的点，将这些点入度减<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，因为当前这个点入度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，所以我们要完成它，完成了它之后，与它相连的点都少了一个先决条件，所以入度减<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>（<s>这TM跟BFS有什么区别？</s>）。</p><p>这里我们就不用开一个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mi>i</mi><mi>s</mi><mi>i</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">visit</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span></span></span></span>数组来记录到没到达过了，因为既然一个点入度都为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>了，怎么可能还有路径到达它呢？所以不需要。</p><p>由于太简单，我就不手动模拟了，就是和BFS一模一样的。</p><p>PS：由于没有拓扑排序的模板题，所以我就自己出了一道。</p><p><strong>输入格式：</strong></p><p>第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>行两个整数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span>，表示在这张图中共有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>个点，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span>条边。</p><p>第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>行到第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">m+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>行，每行两个数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>，表示从<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>有一条边。</p><p>输入保证没有环。</p><p><strong>输出格式：</strong></p><p>输出共一行，为这个图的拓扑序列，每两个数字之间一个空格。</p><p><strong>输入数据：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">8 11</span><br><span class="line">1 3</span><br><span class="line">2 3</span><br><span class="line">1 5</span><br><span class="line">2 5</span><br><span class="line">3 4</span><br><span class="line">4 6</span><br><span class="line">4 7</span><br><span class="line">5 6</span><br><span class="line">5 7</span><br><span class="line">6 8</span><br><span class="line">7 8</span><br></pre></td></tr></table></figure><p><strong>输出数据：</strong></p><p>答案不唯一！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 2 3 4 5 6 7 8</span><br></pre></td></tr></table></figure><p><s>不用看了就是上面那张图</s></p><p><strong>参考代码：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> next;</span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line">&#125;;</span><br><span class="line">Edge edge[<span class="number">100001</span>];<span class="comment">//静态链式前向星存图</span></span><br><span class="line"><span class="keyword">int</span> n,m,cnt,tot,head[<span class="number">10001</span>],in[<span class="number">10001</span>],ans[<span class="number">10001</span>];<span class="comment">//in记录每个点的入度，ans存答案</span></span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;<span class="comment">//我比较喜欢用STL，如果不会的可以百度一下，很简单的，几分钟就会了</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cnt++;</span><br><span class="line">edge[cnt].next=head[u];</span><br><span class="line">edge[cnt].to=v;</span><br><span class="line">head[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">topo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">if</span>(!in[i])</span><br><span class="line">q.push(i);<span class="comment">//一开始检测哪些点入度为0，从这些点开始干♂。</span></span><br><span class="line"><span class="keyword">while</span>(!q.empty())<span class="comment">//如果队列不为空</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u=q.front();<span class="comment">//取出队头元素</span></span><br><span class="line">q.pop();<span class="comment">//队头元素出队</span></span><br><span class="line">ans[++tot]=u;<span class="comment">//因为这个点被放进队列，有且只有一种情况，即它的入度为0，这种情况下我们当然是可以来做这件事的</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=edge[i].next)<span class="comment">//枚举与这个点相连的所有点。</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=edge[i].to;</span><br><span class="line">in[v]--;<span class="comment">//这些点的入度减1</span></span><br><span class="line"><span class="keyword">if</span>(!in[v])<span class="comment">//如果这个点入度为0了，就可以入队了，没有必要枚举完了再判断哪些点入度为0</span></span><br><span class="line">q.push(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">add_edge(a,b);</span><br><span class="line">        in[b]++;</span><br><span class="line">&#125;</span><br><span class="line">topo();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,ans[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是不是很简单啊？只要会BFS就应该能看懂了。</p><h2 id="dfs"><a class="markdownIt-Anchor" href="#dfs"></a> DFS</h2><p>这种方法相对来说就要麻烦一些，因为要开一个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mi>i</mi><mi>s</mi><mi>i</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">visit</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span></span></span></span>数组，但其实也没麻烦到哪去。</p><p>思路：从一个入度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>的点开始遍历，先一直走到底，在回溯的时候，将当前点压入栈中，也就是说，最后的出度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>的点将会最先被压入栈中，也就会最后被输出。同时，我们不再走之前走过的点了，因为这些点已经被压入栈中。</p><p><strong>注意！</strong> 要遍历所有点，找到入度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>的点，从这一点开始进行遍历，因为入度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>的点不可能从其他点到达，所以要从每一个初始入度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>的点都遍历一次。</p><p><strong>参考代码：</strong>（题目如上）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> next;</span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line">&#125;;</span><br><span class="line">Edge edge[<span class="number">100001</span>];</span><br><span class="line"><span class="keyword">int</span> n,m,cnt,tot,head[<span class="number">10001</span>],in[<span class="number">10001</span>],ans[<span class="number">10001</span>],visit[<span class="number">10001</span>];</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;<span class="comment">//还是STL模板</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cnt++;</span><br><span class="line">edge[cnt].next=head[u];</span><br><span class="line">edge[cnt].to=v;</span><br><span class="line">head[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">topo</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">visit[u]=<span class="number">1</span>;<span class="comment">//标记当前点</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=edge[i].next)<span class="comment">//枚举所有出边</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=edge[i].to;</span><br><span class="line"><span class="keyword">if</span>(!visit[v])</span><br><span class="line">topo(v);<span class="comment">//继续遍历</span></span><br><span class="line">&#125;</span><br><span class="line">s.push(u);<span class="comment">//将这一点压入栈</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">add_edge(a,b);</span><br><span class="line">        in[b]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="comment">//一定要从每一个入度为0的点都遍历一次</span></span><br><span class="line"><span class="keyword">if</span>(!in[i])</span><br><span class="line">topo(i);</span><br><span class="line"><span class="keyword">while</span>(!s.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,s.top());</span><br><span class="line">s.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很简单是不是啊？</p><p>拓扑排序由于保证了每个点、每条边只会被遍历一次，所以其时间复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n+m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span>，还是很不错了。</p><hr /><p>在最开始，我们曾提到拓扑排序只能处理没有环的图，但其实，它还可以用来判断是否存在环。</p><p>思路很简单，如果一张图中存在环，那么我们是不可能将所有的点都放进答案数组里的，组成环的那些点因为入度怎么都不可能为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>（试想一下让你在穿裤子之前必须穿上衣，但在穿上衣之前又必须穿裤子，那么最后你一定什么也穿不了），所以它们不会被放进数组。</p><p>简单来说，在BFS完之后，加一条语句判断<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mi>o</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">tot</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">o</span><span class="mord mathdefault">t</span></span></span></span>是否小于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>，如果是，那么一定存在环。</p><p>就像这样：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(tot&lt;n)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;有环啊啊啊啊！！！&quot;</span>);</span><br></pre></td></tr></table></figure><p>这只是用BFS的思路，DFS的你们可以自己想一下，我就不再说了。</p><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>emmm……没有什么好总结的了，都很简单，关键是做题（<s>基础算法和题目可是两回事，蒟蒻亲身体验QAQ</s>）</p><p>推荐几道题目吧：</p><p>全都是<a href="https://www.luogu.com.cn/">你谷</a>上的哦（<s>没办法窝太菜了只有你谷账号没有CF和AT之类的账号QAQ</s>）</p><p><a href="https://www.luogu.com.cn/problem/P4017">P4017 最大食物链计数</a>（拓扑排序+动归，极其简单，看题就切）</p><p><a href="https://www.luogu.com.cn/problem/P1137">P1137 旅行计划</a>（简单明了，DFS一遍就过）</p><p><a href="https://www.luogu.com.cn/problem/P1038">P1038 神经网络</a>（版子题，简单）</p><p><a href="https://www.luogu.com.cn/problem/P1983">P1983 车站分级 </a>（有难度，但主要是在如何建图上，建好了跑一遍拓扑就好了）</p><p><a href="https://www.luogu.com.cn/problem/P1347">P1347 排序</a>（也差不多是版子题，迄今为止做过最简单的一道蓝题）</p><p>由于我是个菜鸡，所以这些题保证你只要学懂了拓扑排序都是可以做的，只是有些要稍微思考一下。</p><p>如果有哪里不对请大佬在评论里指出，蒟蒻感谢之极qwq。</p>]]></content>
    
    
    <summary type="html">一种非常简单易懂的图论算法</summary>
    
    
    
    <category term="学习笔记" scheme="http://beta.azusemisa.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="图论" scheme="http://beta.azusemisa.top/tags/%E5%9B%BE%E8%AE%BA/"/>
    
    <category term="拓扑排序" scheme="http://beta.azusemisa.top/tags/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>【笔记】图论-Tarjan算法</title>
    <link href="http://beta.azusemisa.top/posts/1282189380.html"/>
    <id>http://beta.azusemisa.top/posts/1282189380.html</id>
    <published>2020-01-31T02:27:40.000Z</published>
    <updated>2020-08-17T12:41:43.003Z</updated>
    
    <content type="html"><![CDATA[<p>Tarjan是一种求强连通分量、双连通分量的常用算法，其拓展例如求缩点、割点、割桥以及2-SAT等都是非常实用的。</p><p>这篇文章主要讲一下Tarjan的朴素算法及其在缩点、求割点等方面的应用（<s>主要是因为其他的都不会了QAQ</s>）</p><h1 id="什么是强连通分量"><a class="markdownIt-Anchor" href="#什么是强连通分量"></a> 什么是强连通分量？</h1><blockquote><p>在有向图G中，如果两个顶点vi,vj间（vi&gt;vj）有一条从vi到vj的有向路径，同时还有一条从vj到vi的有向路径，则称两个顶点强连通。如果有向图G的每两个顶点都强连通，称G是一个强连通图。有向图的极大强连通子图，称为强连通分量。——来自某度的解释</p></blockquote><p>什么意思呢？</p><p>就是说在一个有向图中，有一个或几个子图，从它们中的任何一个点都可以到另外的任意一个点，这个子图就被称为是强连通分量（一个点也可以被称作是强连通分量哦）</p><p>另外，这张子图一定要是最大的，即要把所有满足条件的点全部加进这张子图，才能称为是强连通分量。</p><p>举个例子：</p><p><img src="https://i.loli.net/2020/01/28/hF2AvUIecDYOfLR.png" alt="举个栗子" /></p><p>在这张图中，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">1,2,3,4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>5</mn></mrow><annotation encoding="application/x-tex">5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span></span></span></span>还有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>6</mn></mrow><annotation encoding="application/x-tex">6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span></span></span></span>是三个强连通分量，但<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">1,3,4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span></span></span></span>并不能被称为是强连通分量，因为它不是最大的满足条件的子图，必须要加入点2才算。</p><h1 id="简单介绍tarjan算法"><a class="markdownIt-Anchor" href="#简单介绍tarjan算法"></a> 简单介绍Tarjan算法</h1><p>Tarjan算法是一种基于DFS（深度优先搜索）的求图的强连通分量的算法，非常常用（<s>还有就是活在《信奥一本通》上的Kosaraju和活在百度百科中的Gabow算法</s>），同时，其时间复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，算是非常优秀的了。</p><h2 id="一些变量"><a class="markdownIt-Anchor" href="#一些变量"></a> 一些变量</h2><ul><li><p>tot：当前点是第几个被遍历的。</p></li><li><p>dfn[]：记录每个点是第几个被遍历的，可以理解为一个时间戳。</p></li><li><p>low[]：记录每个点不经过祖先节点能到达最早的祖先的时间戳（下称”返祖“<s>好名字</s>）。</p><p>PS:这里大部分人写的都是能到达的最早的祖先，但这样就和下面有一个公式不符，所以我改了一下，如果不对希望大佬在评论里指出，谢谢！</p></li><li><p>stack[]：一个栈，存放强连通分量（不是直接存哦，有一些方法的）。</p></li><li><p>vis[]：标记每个点是否在栈中。</p></li><li><p>color[]：记录每个点属于第几个强连通分量。</p></li><li><p>p[]：记录每个强连通分量有几个点。（最后这两个都是缩点时用的）</p></li></ul><h2 id="算法思路"><a class="markdownIt-Anchor" href="#算法思路"></a> 算法思路</h2><ol><li><p>从一个点出发，遍历整张图。</p></li><li><p>dfn[]数组初始化为当前点（下称u）被遍历的顺序，同时将u入栈。</p></li><li><p>初始化low[u]=dfn[u]，因为一个点一定能到达它自己。</p></li><li><p>枚举所有出边（链式前向星存图），如果这条边到达的点（下称v）还没有被遍历过，则遍历点v，然后更新low[u]，公式为：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>w</mi><mo stretchy="false">[</mo><mi>u</mi><mo stretchy="false">]</mo><mo>=</mo><mi>min</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>w</mi><mo stretchy="false">[</mo><mi>u</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>l</mi><mi>o</mi><mi>w</mi><mo stretchy="false">[</mo><mi>v</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">low[u]= \min (low[u],low[v])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathdefault">u</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">min</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathdefault">u</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span></span></p><p>因为点v能到达的祖先节点，点u也一定能到达（<s>废话</s>），所以应该更新点u的low值。</p><p>如果v已被遍历过，且v在栈中，也要更新low值公式为：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>w</mi><mo stretchy="false">[</mo><mi>u</mi><mo stretchy="false">]</mo><mo>=</mo><mi>min</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>w</mi><mo stretchy="false">[</mo><mi>u</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>d</mi><mi>f</mi><mi>n</mi><mo stretchy="false">[</mo><mi>v</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">low[u]= \min (low[u],dfn[v])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathdefault">u</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">min</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathdefault">u</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">n</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span></span></p><p>因为到达之前到过的点（也就是祖先），说明这个点可以返祖，那么肯定是要更新low值的（更详细的请看下面的“一些可能的问题”）</p></li><li><p>枚举完所有出边后，如果<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>f</mi><mi>n</mi><mo stretchy="false">[</mo><mi>u</mi><mo stretchy="false">]</mo><mo>=</mo><mi>l</mi><mi>o</mi><mi>w</mi><mo stretchy="false">[</mo><mi>u</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dfn[u]=low[u]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">n</span><span class="mopen">[</span><span class="mord mathdefault">u</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathdefault">u</span><span class="mclose">]</span></span></span></span>则说明这个点是一个强连通分量的开始点（<s>梦开始的地方</s>）它不可能属于其他任何一个强连通分量，因为它无法返祖，所以不可能和之前的点组成一个强连通分量，因而它属于一个独立的强连通分量，这时，将栈中在这个点之后入栈的点全部出栈（包括这个点），因为这些点也不属于其他任何一个强连通分量，如果属于，那么u就不可能无法返祖，所以，它们都是同一个强连通分量。</p></li></ol><p>看起来很麻烦是不是？<s>我也觉得</s>下面用图来手模一下就清楚了。</p><p>上图：</p><p><img src="https://i.loli.net/2020/01/28/hF2AvUIecDYOfLR.png" alt="" /></p><p><s>资源缺乏，凑合着看吧</s></p><p>我们从点1开始遍历，下面是模拟过程：</p><ol><li>从点1开始！<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mi>d</mi><mi>f</mi><mi>n</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mi>l</mi><mi>o</mi><mi>w</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>c</mi><mi>k</mi><mo>=</mo><mo stretchy="false">{</mo><mn>1</mn><mo stretchy="false">}</mo><mo separator="true">,</mo><mi>v</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">u=1,dfn[1]=1,low[1]=1,stack=\{1\},vis[1]=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">n</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">1</span><span class="mclose">}</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，先遍历点3。</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi><mo>=</mo><mn>3</mn><mo separator="true">,</mo><mi>d</mi><mi>f</mi><mi>n</mi><mo stretchy="false">[</mo><mn>3</mn><mo stretchy="false">]</mo><mo>=</mo><mn>2</mn><mo separator="true">,</mo><mi>l</mi><mi>o</mi><mi>w</mi><mo stretchy="false">[</mo><mn>3</mn><mo stretchy="false">]</mo><mo>=</mo><mn>2</mn><mo separator="true">,</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>c</mi><mi>k</mi><mo>=</mo><mo stretchy="false">{</mo><mn>1</mn><mo separator="true">,</mo><mn>3</mn><mo stretchy="false">}</mo><mo separator="true">,</mo><mi>v</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>3</mn><mo stretchy="false">]</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">u=3,dfn[3]=2,low[3]=2,stack=\{1,3\},vis[3]=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">n</span><span class="mopen">[</span><span class="mord">3</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord">3</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mclose">}</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">3</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，再遍历点5。</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi><mo>=</mo><mn>5</mn><mo separator="true">,</mo><mi>d</mi><mi>f</mi><mi>n</mi><mo stretchy="false">[</mo><mn>5</mn><mo stretchy="false">]</mo><mo>=</mo><mn>3</mn><mo separator="true">,</mo><mi>l</mi><mi>o</mi><mi>w</mi><mo stretchy="false">[</mo><mn>5</mn><mo stretchy="false">]</mo><mo>=</mo><mn>3</mn><mo separator="true">,</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>c</mi><mi>k</mi><mo>=</mo><mo stretchy="false">{</mo><mn>1</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>5</mn><mo stretchy="false">}</mo><mo separator="true">,</mo><mi>v</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>5</mn><mo stretchy="false">]</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">u=5,dfn[5]=3,low[5]=3,stack=\{1,3,5\},vis[5]=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">n</span><span class="mopen">[</span><span class="mord">5</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord">5</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">5</span><span class="mclose">}</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">5</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，遍历点6。</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi><mo>=</mo><mn>6</mn><mo separator="true">,</mo><mi>d</mi><mi>f</mi><mi>n</mi><mo stretchy="false">[</mo><mn>6</mn><mo stretchy="false">]</mo><mo>=</mo><mn>4</mn><mo separator="true">,</mo><mi>l</mi><mi>o</mi><mi>w</mi><mo stretchy="false">[</mo><mn>6</mn><mo stretchy="false">]</mo><mo>=</mo><mn>4</mn><mo separator="true">,</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>c</mi><mi>k</mi><mo>=</mo><mo stretchy="false">{</mo><mn>1</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>5</mn><mo separator="true">,</mo><mn>6</mn><mo stretchy="false">}</mo><mo separator="true">,</mo><mi>v</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>6</mn><mo stretchy="false">]</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">u=6,dfn[6]=4,low[6]=4,stack=\{1,3,5,6\},vis[6]=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">6</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">n</span><span class="mopen">[</span><span class="mord">6</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord">6</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">6</span><span class="mclose">}</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">6</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，此时没有出边了，开始<s>硬核</s>出栈。</li><li>检测到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>f</mi><mi>n</mi><mo stretchy="false">[</mo><mn>6</mn><mo stretchy="false">]</mo><mo>=</mo><mi>l</mi><mi>o</mi><mi>w</mi><mo stretchy="false">[</mo><mn>6</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dfn[6]=low[6]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">n</span><span class="mopen">[</span><span class="mord">6</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord">6</span><span class="mclose">]</span></span></span></span>，将栈中点6及其之后的点全部出栈（其实只有一个点），<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>t</mi><mi>a</mi><mi>c</mi><mi>k</mi><mo>=</mo><mo stretchy="false">{</mo><mn>1</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>5</mn><mo stretchy="false">}</mo><mo separator="true">,</mo><mi>v</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>6</mn><mo stretchy="false">]</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">stack=\{1,3,5\},vis[6]=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">5</span><span class="mclose">}</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">6</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>6</mn></mrow><annotation encoding="application/x-tex">6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span></span></span></span>为一个强连通分量。</li><li>回溯到点5，没有出边了，出栈。<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>t</mi><mi>a</mi><mi>c</mi><mi>k</mi><mo>=</mo><mo stretchy="false">{</mo><mn>1</mn><mo separator="true">,</mo><mn>3</mn><mo stretchy="false">}</mo><mo separator="true">,</mo><mi>v</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>5</mn><mo stretchy="false">]</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">stack=\{1,3\},vis[5]=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mclose">}</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">5</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>5</mn></mrow><annotation encoding="application/x-tex">5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span></span></span></span>为一个强连通分量。</li><li>回溯到点3，遍历点4。</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi><mo>=</mo><mn>4</mn><mo separator="true">,</mo><mi>d</mi><mi>f</mi><mi>n</mi><mo stretchy="false">[</mo><mn>4</mn><mo stretchy="false">]</mo><mo>=</mo><mn>5</mn><mo separator="true">,</mo><mi>l</mi><mi>o</mi><mi>w</mi><mo stretchy="false">[</mo><mn>4</mn><mo stretchy="false">]</mo><mo>=</mo><mn>5</mn><mo separator="true">,</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>c</mi><mi>k</mi><mo>=</mo><mo stretchy="false">{</mo><mn>1</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>4</mn><mo stretchy="false">}</mo><mi>v</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>4</mn><mo stretchy="false">]</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">u=4,dfn[4]=5,low[4]=5,stack=\{1,3,4\}vis[4]=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">n</span><span class="mopen">[</span><span class="mord">4</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord">4</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mclose">}</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">4</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，接下来遍历点1，发现已经遍历过了，说明点4返祖了（！！！），此时更新<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>w</mi><mo stretchy="false">[</mo><mn>4</mn><mo stretchy="false">]</mo><mo>=</mo><mi>d</mi><mi>f</mi><mi>n</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">low[4]=dfn[1]=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord">4</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">n</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>。再遍历点6，发现点6已经遍历过了，但又不在栈中，说明点6不属于点4所在的强连通分量，所以不管。此时所有出边枚举完了，回溯到点3。</li><li>更新<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>w</mi><mo stretchy="false">[</mo><mn>3</mn><mo stretchy="false">]</mo><mo>=</mo><mi>min</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>w</mi><mo stretchy="false">[</mo><mn>3</mn><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>l</mi><mi>o</mi><mi>w</mi><mo stretchy="false">[</mo><mn>4</mn><mo stretchy="false">]</mo><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">low[3]=\min(low[3],low[4])=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord">3</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">min</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord">3</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord">4</span><span class="mclose">]</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>（意思是点3能到达点1），没有出边了，回溯到点1。</li><li>遍历点2，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi><mo>=</mo><mn>2</mn><mo separator="true">,</mo><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo><mo>=</mo><mn>6</mn><mo separator="true">,</mo><mi>l</mi><mi>o</mi><mi>w</mi><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo><mo>=</mo><mn>6</mn><mo separator="true">,</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>c</mi><mi>k</mi><mo>=</mo><mo stretchy="false">{</mo><mn>1</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>4</mn><mo separator="true">,</mo><mn>2</mn><mo stretchy="false">}</mo><mo separator="true">,</mo><mi>v</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">u=2,dis[2]=6,low[2]=6,stack=\{1,3,4,2\},vis[2]=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">2</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">6</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord">2</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">6</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mclose">}</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">2</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，枚举出边，只有一个点4已经被遍历了，且点4在栈里，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>w</mi><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo><mo>=</mo><mi>min</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>w</mi><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>d</mi><mi>f</mi><mi>n</mi><mo stretchy="false">[</mo><mn>4</mn><mo stretchy="false">]</mo><mo stretchy="false">)</mo><mo>=</mo><mn>5</mn></mrow><annotation encoding="application/x-tex">low[2]=\min(low[2],dfn[4])=5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord">2</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">min</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord">2</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">n</span><span class="mopen">[</span><span class="mord">4</span><span class="mclose">]</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span></span></span></span>，枚举完毕，回溯。</li><li>点1出边枚举完毕，开始出栈，stack清空，vis清空，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>4</mn><mo separator="true">,</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">1,3,4,2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span></span></span></span>为一个强连通分量。自此，遍历完毕，三个强连通分量全部被求出（<s>完结撒花，感谢陪伴</s>）。</li></ol><h3 id="一些可能的问题"><a class="markdownIt-Anchor" href="#一些可能的问题"></a> 一些可能的问题</h3><p><strong>Q：</strong> 如果这张有向图不连通怎么办？也就是说，如果从一个点出发不能遍历完整张图怎么办？</p><p><strong>A：</strong> 废话，那就从点1枚举到点n，如果当前点没有被遍历过，就从这一点开始遍历。</p><p><strong>Q：</strong> 如何判断当前点有没有被遍历过？</p><p><strong>A：</strong> dfn数组是干嘛的？记录每个点被遍历的顺序啊！如果dfn数组不为0，则表示它已经被更新，也被遍历过了。</p><p><strong>Q：</strong> 还是没有搞懂为什么遍历完一个点后要把low更新为当前点和这条边的终点的low值中的较小值啊。</p><p><strong>A：</strong> low数组记录的是能到达的最早的祖先，既然这条边的终点能到达，那起点肯定也能到达啊，同时要取最早的祖先，所以要取较小的值。</p><p><strong>Q：</strong> 既然许多大佬都说low[]是记录能到的最早的祖先，那为什么出现”返祖“情况时不取祖先的能到达的最早时间戳，而要取祖先的时间戳呢？换句话说，为什么遍历到被遍历过的又在栈里的点（就是祖先嘛）时不用公式<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>w</mi><mo stretchy="false">[</mo><mi>u</mi><mo stretchy="false">]</mo><mo>=</mo><mi>min</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>w</mi><mo stretchy="false">[</mo><mi>u</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>l</mi><mi>o</mi><mi>w</mi><mo stretchy="false">[</mo><mi>v</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">low[u]= \min (low[u],low[v])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathdefault">u</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">min</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathdefault">u</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span>，而要用公式<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>w</mi><mo stretchy="false">[</mo><mi>u</mi><mo stretchy="false">]</mo><mo>=</mo><mi>min</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>w</mi><mo stretchy="false">[</mo><mi>u</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>d</mi><mi>f</mi><mi>n</mi><mo stretchy="false">[</mo><mi>v</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">low[u]= \min(low[u],dfn[v])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathdefault">u</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">min</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathdefault">u</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">n</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span>呢？</p><p><strong>A：</strong> 这个问题其实有点复杂，理论上来说用前者是绝对没有问题的（仅限于求强连通分量的时候），但后面在求割点时，第一个公式就会出bug，所以我将low[]数组定义为不经过祖先节点能到达的最早祖先，详细情况请看后面讲求割点的部分。</p><p>（大概就是这些了，如果还有什么问题后面再补充）</p><h2 id="参考代码"><a class="markdownIt-Anchor" href="#参考代码"></a> 参考代码</h2><p><strong>题目：</strong> 洛谷 P2863 [USACO06JAN]牛的舞会The Cow Prom</p><p><a href="https://www.luogu.com.cn/problem/P2863">传送门</a></p><p>（PS：我没有用<a href="https://www.luogu.com.cn/problem/P2341">P2341 【模板】强连通分量 / [HAOI2006]受欢迎的牛</a>，是因为这道题虽然写的是强连通分量的模板，但其实还用到了缩点的知识，不便于朴素算法的理解）</p><p><strong>题目大意：</strong> 求子图内点的个数大于1的强连通分量个数。</p><p><strong>代码：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(a,b) a&lt;b?a:b</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>//链式前向星存图</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> next;</span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line">&#125;;</span><br><span class="line">Edge edge[<span class="number">50001</span>];</span><br><span class="line"><span class="keyword">int</span> n,m,s,head[<span class="number">10001</span>];</span><br><span class="line"><span class="keyword">int</span> cnt,k,ans,dfn[<span class="number">10001</span>],low[<span class="number">10001</span>],<span class="built_in">stack</span>[<span class="number">10001</span>],v[<span class="number">10001</span>];<span class="comment">//我这里的代码时间和这篇笔记的时间隔了将近5天</span></span><br><span class="line">                                                          <span class="comment">//所以有些变量名可能不太一样</span></span><br><span class="line">                                                          <span class="comment">//这里v数组就是上面的vis</span></span><br><span class="line">                                                          <span class="comment">//cnt是上面的tot</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cnt++;</span><br><span class="line">dfn[x]=low[x]=cnt;</span><br><span class="line"><span class="built_in">stack</span>[++k]=x;</span><br><span class="line">v[x]=<span class="number">1</span>;<span class="comment">//初始化各种数组，包括dfn和low初始化为x被遍历到的次序，x入栈，v标记x入栈</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i!=<span class="number">-1</span>;i=edge[i].next)</span><br><span class="line"><span class="keyword">if</span>(!dfn[edge[i].to])<span class="comment">//如果没有搜过</span></span><br><span class="line">&#123;</span><br><span class="line">tarjan(edge[i].to);</span><br><span class="line">low[x]=min(low[x],low[edge[i].to]);<span class="comment">//取自己能到的最早祖先和终点能到的最早祖先</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">if</span>(v[edge[i].to])<span class="comment">//如果搜过了，且这个点在栈里，说明返祖了</span></span><br><span class="line">low[x]=min(low[x],dfn[edge[i].to]);<span class="comment">//详情见上面</span></span><br><span class="line"><span class="keyword">if</span>(dfn[x]==low[x])<span class="comment">//如果dfn[x]=low[x]，说明这个点为整个强连通分量中的最老的祖先，也说明整个强连通分量已经遍历完了</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">stack</span>[k]!=x)</span><br><span class="line">&#123;</span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line">v[<span class="built_in">stack</span>[k]]=<span class="number">0</span>;</span><br><span class="line">k--;</span><br><span class="line">&#125;</span><br><span class="line">v[x]=<span class="number">0</span>;</span><br><span class="line">k--;</span><br><span class="line"><span class="keyword">if</span>(flag)<span class="comment">//这里是判断这个强连通分量点的个数是否大于1（题目要求）</span></span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">edge[s].next=head[u];</span><br><span class="line">edge[s].to=v;</span><br><span class="line">head[u]=s;</span><br><span class="line">s++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">add_edge(a,b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">if</span>(!dfn[i])</span><br><span class="line">tarjan(i);<span class="comment">//不确定从一个点开始就能遍历完整张图，所以要每个点都试一下</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="tarjan缩点"><a class="markdownIt-Anchor" href="#tarjan缩点"></a> Tarjan+缩点</h1><h2 id="what-means-缩点"><a class="markdownIt-Anchor" href="#what-means-缩点"></a> What means 缩点？</h2><p>一张有向图中，如果存在环，就会造成很多不方便的地方，比如不方便进行动归计算，这时，就可以用缩点来解决问题，所谓缩点，就是将这张有向图中所有的强连通分量变成一个一个的团，然后给这些团加边，形成一张DAG（有向无环图），就便于解决问题了。</p><p>这张图会让你更明白一些：</p><p><img src="https://i.loli.net/2020/01/30/W6PkyDZeHVzfQBh.png" alt="" /></p><p>这张图中共有四个强连通分量，已经用红色圈出来了，对其进行缩点操作以后，就会变成下面这个样子：</p><p><img src="https://i.loli.net/2020/01/30/pRzyYMsiA2tWhnN.png" alt="" /></p><p><s>是不是很棒棒啊</s>仔细研究一番以后，可以发现：点1对应强连通分量<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">1,2,3,4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span></span></span></span>，点2对应强连通分量<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>8</mn><mo separator="true">,</mo><mn>9</mn></mrow><annotation encoding="application/x-tex">8,9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">8</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">9</span></span></span></span>，点3对应强连通分量<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>5</mn><mo separator="true">,</mo><mn>6</mn><mo separator="true">,</mo><mn>7</mn></mrow><annotation encoding="application/x-tex">5,6,7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">6</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">7</span></span></span></span>，点4对应强连通分量<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>10</mn></mrow><annotation encoding="application/x-tex">10</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span></span></span></span>，此时，这张图中已经不存在环了，可以放心地尽情搞♂事♂情。</p><h2 id="算法思路-2"><a class="markdownIt-Anchor" href="#算法思路-2"></a> 算法思路</h2><ol><li>Tarjan求出强连通分量，并在出栈时更新color和p。</li><li>遍历所有边，如果这条边连接的两个点不在同一个强连通分量中，就连边。</li></ol><p>看起来很简单是不？没错，就是这么简单，没有别的了，只是有些细节可以再优化一下，下面的代码中会讲到。</p><h2 id="参考代码-2"><a class="markdownIt-Anchor" href="#参考代码-2"></a> 参考代码</h2><p><strong>题目：</strong> 洛谷 P3387 【模板】缩点</p><p><a href="https://www.luogu.com.cn/problem/P3387">传送门</a></p><p><strong>题目大意：</strong> 将一张有向图缩点，然后在新的图上跑一遍记忆化DFS（DP也行），求出一条经过的点权值和最大的路径。</p><p>为什么知道这道题是缩点呢？<s>废话这题目写了是缩点模板的嘛</s></p><p>既然题目告诉我们，可以重复经过一个点或一条边，但权值只计算一次，那么，既然是同一个强连通分量，取了一个，为什么不能取其他的呢？反正可以重复经过，取完一个强连通分量再回到之前的点就行了，完全不影响啊，这样缩完点后，一个强连通分量就是一个点，到达这个点，相当于就是到达了整个强连通分量，同时，在DAG图上跑记忆化，可以做到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>啊，如果不缩点，那就要重复经过一个点，这样时间复杂度就大大提升了，所以为什么不先用Tarjan跑一遍<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，再用记忆化跑一遍<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>呢，这样更优啊。</p><p><strong>代码：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> next;</span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line">&#125;;</span><br><span class="line">Edge edge[<span class="number">100001</span>];</span><br><span class="line"><span class="keyword">int</span> x[<span class="number">100001</span>],y[<span class="number">100001</span>]; </span><br><span class="line"><span class="keyword">int</span> n,m,s,a[<span class="number">10001</span>],head[<span class="number">10001</span>];</span><br><span class="line"><span class="keyword">int</span> cnt,cur,top,dfn[<span class="number">10001</span>],low[<span class="number">10001</span>],<span class="built_in">stack</span>[<span class="number">10001</span>],v[<span class="number">10001</span>];<span class="comment">//cur是统计强连通分量个数的</span></span><br><span class="line"><span class="keyword">int</span> np[<span class="number">10001</span>],b[<span class="number">10001</span>];<span class="comment">//这里的np相当于是上面的p，b则是color</span></span><br><span class="line"><span class="keyword">int</span> ans,f[<span class="number">10001</span>];<span class="comment">//f[i]记录的是从第i个强连通分量开始遍历所能取到的最大值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">edge[s].next=head[u];</span><br><span class="line">edge[s].to=v;</span><br><span class="line">head[u]=s;</span><br><span class="line">s++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cnt++;</span><br><span class="line">dfn[x]=low[x]=cnt;</span><br><span class="line"><span class="built_in">stack</span>[++top]=x;</span><br><span class="line">v[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i!=<span class="number">-1</span>;i=edge[i].next)</span><br><span class="line"><span class="keyword">if</span>(!dfn[edge[i].to])</span><br><span class="line">&#123;</span><br><span class="line">tarjan(edge[i].to);</span><br><span class="line">low[x]=min(low[x],low[edge[i].to]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">if</span>(v[edge[i].to])</span><br><span class="line">low[x]=min(low[x],dfn[edge[i].to]);</span><br><span class="line"><span class="keyword">if</span>(dfn[x]==low[x])</span><br><span class="line">&#123;</span><br><span class="line">cur++;<span class="comment">//当前强连通分量遍历完毕，cur加一</span></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">stack</span>[top+<span class="number">1</span>]!=x)<span class="comment">//这里之所以用top+1是为了把x也弹出来</span></span><br><span class="line">&#123;</span><br><span class="line">v[<span class="built_in">stack</span>[top]]=<span class="number">0</span>;</span><br><span class="line">b[<span class="built_in">stack</span>[top]]=cur;<span class="comment">//标记栈顶的点属于第cur个强连通分量</span></span><br><span class="line">np[cur]+=a[<span class="built_in">stack</span>[top]];<span class="comment">//p为这一强连通分量中所有点权值之和</span></span><br><span class="line">top--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(f[x])</span><br><span class="line"><span class="keyword">return</span>;<span class="comment">//搜过了，就不再搜了</span></span><br><span class="line"><span class="keyword">int</span> maxn=np[x];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i!=<span class="number">-1</span>;i=edge[i].next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!f[edge[i].to])</span><br><span class="line">dfs(edge[i].to);</span><br><span class="line">maxn=max(maxn,f[edge[i].to]+np[x]);<span class="comment">//取所有出边的终点中f的最大值</span></span><br><span class="line">&#125;</span><br><span class="line">f[x]=maxn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x[i],&amp;y[i]);</span><br><span class="line">add_edge(x[i],y[i]);<span class="comment">//优化：将之前的边存下来，便于后面重新建图</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">if</span>(!dfn[i])</span><br><span class="line">tarjan(i);</span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line"><span class="built_in">memset</span>(edge,<span class="number">0</span>,<span class="keyword">sizeof</span>(edge));</span><br><span class="line">s=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)<span class="comment">//为什么不用链式前向星遍历：为了节省内存，我们将之前的edge清空</span></span><br><span class="line">                         <span class="comment">//因为链式前向星不是线性存图，所以一边遍历edge一边用edge来存图会冲突</span></span><br><span class="line"><span class="keyword">if</span>(b[x[i]]!=b[y[i]])<span class="comment">//b[x[i]]和b[y[i]]分别表示x[i]和y[i]所在的强连通分量</span></span><br><span class="line">add_edge(b[x[i]],b[y[i]]);<span class="comment">//添加第b[x[i]]个强连通分量和第b[y[i]]个强连通分量之间的边</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cur;i++)<span class="comment">//缩点后的图不一定从一点出发就能到达所有的点，因此要一个一个枚举</span></span><br><span class="line">&#123;</span><br><span class="line">dfs(i);<span class="comment">//记忆化深搜</span></span><br><span class="line">ans=max(ans,f[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="tarjan割点"><a class="markdownIt-Anchor" href="#tarjan割点"></a> Tarjan+割点</h1><h2 id="何为割点"><a class="markdownIt-Anchor" href="#何为割点"></a> 何为割点？</h2><p>在一张无向图中，有一个或几个点，删去之后整张图就不连通了，这样的点称为割点，也就是说，如果没有这个点，一张连通图就会变成几张连通图。</p><p>还是举个例子：</p><p><img src="https://i.loli.net/2020/01/30/cskwbzhiqPVYydI.png" alt="举个栗子" /></p><p>在这张无向图中，很容易看出，如果删去点3，整张图就会变成<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo separator="true">,</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">1,2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn><mo separator="true">,</mo><mn>5</mn><mo separator="true">,</mo><mn>6</mn></mrow><annotation encoding="application/x-tex">4,5,6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">6</span></span></span></span>两张连通图，因此，点3为这张无向图的割点，同时，如果删去点4，整张图会变成<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">1,2,3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>5</mn><mo separator="true">,</mo><mn>6</mn></mrow><annotation encoding="application/x-tex">5,6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">6</span></span></span></span>两张连通图，因此，点4也是这张图的割点。</p><h2 id="算法思路-3"><a class="markdownIt-Anchor" href="#算法思路-3"></a> 算法思路</h2><ol><li><p>从一个根节点出发，遍历全图。</p></li><li><p>一边遍历，一边判断当前点是否为割点。</p><p>关于如何判断割点，我们分成两部分来考虑。</p><ol><li><p>如果这个点是根节点，那好办，如果它连接两个及以上的连通图，这个点就是割点，因为如果去掉这一点，这些连通图就不连通了（之所以会有两张及以上的连通图，就是因为这些图彼此两两不连通，而只通过根节点连接彼此，所以，如果根节点炸了，这些图就失去了唯一的连通途径，就不连通了）</p></li><li><p>如果这个点不是根节点，就要判断它下面的点不通过它能否返祖，如果全都可以，则这个点不为割点，因为它的儿子都可以不通过它返祖，那要它也没什么用，但只要有一个儿子必须经过它才能返祖，这个点就是割点，因为去掉它后它的儿子就不能与上面的图连通。</p><p>如何判断？</p><p>用这个！<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mi>f</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>w</mi><mo stretchy="false">[</mo><mi>v</mi><mo stretchy="false">]</mo><mo>≥</mo><mi>d</mi><mi>f</mi><mi>n</mi><mo stretchy="false">[</mo><mi>u</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">if(low[v]\ge dfn[u])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">n</span><span class="mopen">[</span><span class="mord mathdefault">u</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span>，low记录的是不经过祖先节点所能访问到的最早的祖先的时间戳，如果儿子的low值比当前节点的时间戳要小（或正好等于它），就说明这个儿子不经过它，是无法访问到更早的点的，所以去掉这个点后，它的儿子和祖先节点的连接就会断掉，就不连通了，所以这个点是割点。</p><p>用图来模拟一下好了。</p><p><img src="https://i.loli.net/2020/01/31/kjxbavPcH9QLOSA.png" alt="Tarjan图5.png" /></p><p>我们从点1开始遍历，因此点1为根节点，它连接了两张连通图（即<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">2,3,4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>5</mn></mrow><annotation encoding="application/x-tex">5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span></span></span></span>），如果它炸了，两张连通图就不再相互连通，所以它是割点。再看点2，因为点3和点4不经过点2就无法访问点1，所以，点2如果炸了，点3和点4就不能与点1连通，所以点2也是割点。</p></li></ol></li></ol><h3 id="一个非常重要的地方"><a class="markdownIt-Anchor" href="#一个非常重要的地方"></a> 一个非常重要的地方</h3><p>这里就可以看出为什么当遍历时遇到祖先节点时的公式为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>w</mi><mo stretchy="false">[</mo><mi>u</mi><mo stretchy="false">]</mo><mo>=</mo><mi>min</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>w</mi><mo stretchy="false">[</mo><mi>u</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>d</mi><mi>f</mi><mi>n</mi><mo stretchy="false">[</mo><mi>v</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">low[u]=\min(low[u],dfn[v])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathdefault">u</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">min</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathdefault">u</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">n</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span>而不是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>w</mi><mo stretchy="false">[</mo><mi>u</mi><mo stretchy="false">]</mo><mo>=</mo><mi>min</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>w</mi><mo stretchy="false">[</mo><mi>u</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>l</mi><mi>o</mi><mi>w</mi><mo stretchy="false">[</mo><mi>v</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">low[u]=\min(low[u],low[v])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathdefault">u</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">min</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathdefault">u</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span>了，因为如果是后者的话则计算的是不管怎样到，总之能到达的最早的祖先，这样无法判断这个点最直接的能回到的祖先，也就无法判断割点。在上面的图中，如果用后面那个公式，low[3]和low[4]就都会变成1，此时再判断点2，就不能看出点2是割点了。</p><h2 id="参考代码-3"><a class="markdownIt-Anchor" href="#参考代码-3"></a> 参考代码</h2><p><strong>题目：</strong> 洛谷 P3388 【模板】割点（割顶）</p><p><a href="https://www.luogu.com.cn/problem/P3388">传送门</a></p><p><strong>题目大意：</strong> 求一张无向图中的割点（注意：是从小到大输出节点！）</p><p><strong>参考代码：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> next;</span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line">&#125;;</span><br><span class="line">Edge edge[<span class="number">200001</span>];</span><br><span class="line"><span class="keyword">int</span> n,m,s,head[<span class="number">20001</span>];</span><br><span class="line"><span class="keyword">int</span> cnt,top,cur,dfn[<span class="number">20001</span>],low[<span class="number">20001</span>],<span class="built_in">stack</span>[<span class="number">20001</span>],v[<span class="number">20001</span>],b[<span class="number">20001</span>];<span class="comment">//b用来存放割点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">edge[s].next=head[u];</span><br><span class="line">edge[s].to=v;</span><br><span class="line">head[u]=s;</span><br><span class="line">s++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> root)</span><span class="comment">//root是当前连通图的根节点，也就是最先被遍历的那个点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> son_cnt=<span class="number">0</span>,flag=<span class="number">0</span>;<span class="comment">//son_cnt统计连接的连通图个数</span></span><br><span class="line">cnt++;</span><br><span class="line">dfn[x]=low[x]=cnt;</span><br><span class="line"><span class="built_in">stack</span>[++top]=x;</span><br><span class="line">v[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i!=<span class="number">-1</span>;i=edge[i].next)</span><br><span class="line"><span class="keyword">if</span>(!dfn[edge[i].to])</span><br><span class="line">&#123;</span><br><span class="line">tarjan(edge[i].to,root);</span><br><span class="line">low[x]=min(low[x],low[edge[i].to]);</span><br><span class="line"><span class="keyword">if</span>(low[edge[i].to]&gt;=dfn[x]&amp;&amp;x!=root)</span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x==root)</span><br><span class="line">son_cnt++;<span class="comment">//遍历完一个点后，这个点所在的连通图也就遍历完了，所以加一</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">if</span>(v[edge[i].to])</span><br><span class="line">low[x]=min(low[x],dfn[edge[i].to]);<span class="comment">//注意！原因上面讲过了，不这样写的话就会WA</span></span><br><span class="line"><span class="keyword">if</span>(son_cnt&gt;=<span class="number">2</span>)<span class="comment">//如果连接的连通图个数大于一，则这个点为割点</span></span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(flag)</span><br><span class="line">b[++cur]=x;</span><br><span class="line"><span class="keyword">if</span>(dfn[x]!=low[x])</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">stack</span>[top+<span class="number">1</span>]!=x)</span><br><span class="line">&#123;</span><br><span class="line">v[<span class="built_in">stack</span>[top]]=<span class="number">0</span>;</span><br><span class="line">top--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">add_edge(x,y);</span><br><span class="line">add_edge(y,x);<span class="comment">//无向图要添加两条边</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">if</span>(!dfn[i])</span><br><span class="line">tarjan(i,i);<span class="comment">//枚举所有点，如果没有被遍历过，就从这一点开始遍历</span></span><br><span class="line">sort(b+<span class="number">1</span>,b+<span class="number">1</span>+cur);<span class="comment">//排序！！</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,cur);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cur;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,b[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>Tarjan算法真的很常用，而且应该算是比较难的一个东西了，它有很多应用，还有很多的扩展，所以一定要把最基础的东西弄牢固，否则会对后面的练习造成困难。</p><h2 id="一些相关的题目"><a class="markdownIt-Anchor" href="#一些相关的题目"></a> 一些相关的题目</h2><p><a href="https://www.luogu.com.cn/problem/P1656">洛谷 P1656 炸铁路</a>（割边，与割点的求法有一个很小的不同，看一下题解就知道了）</p><p><a href="https://www.luogu.com.cn/problem/P2341">洛谷 P2341 【模板】强连通分量 / [HAOI2006]受欢迎的牛</a>（缩点）</p><p><a href="https://www.luogu.com.cn/problem/P2746">洛谷 P2746 [USACO5.3]校园网Network of Schools</a>（缩点，有点考智商）</p><p><a href="https://www.luogu.com.cn/problem/P3469">洛谷 P3469 [POI2008]BLO-Blockade</a>（有难度的割点+数学）</p><p><a href="https://www.luogu.com.cn/problem/P5058">洛谷 P5058 [ZJOI2004]嗅探器</a>（有些难度的割点）</p>]]></content>
    
    
    <summary type="html">一种用来求强连通分量的有趣的算法</summary>
    
    
    
    <category term="学习笔记" scheme="http://beta.azusemisa.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="图论" scheme="http://beta.azusemisa.top/tags/%E5%9B%BE%E8%AE%BA/"/>
    
    <category term="Tarjan" scheme="http://beta.azusemisa.top/tags/Tarjan/"/>
    
  </entry>
  
  <entry>
    <title>【洛谷 P6014】 斗牛</title>
    <link href="http://beta.azusemisa.top/posts/1392144638.html"/>
    <id>http://beta.azusemisa.top/posts/1392144638.html</id>
    <published>2020-01-28T13:36:01.000Z</published>
    <updated>2020-08-17T12:43:13.192Z</updated>
    
    <content type="html"><![CDATA[<p>看到这道题的时候，其实我第一反应是“天哪，这道题这么难，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>这么大，不是dp就是记忆化吧”（<s>蒟蒻之言，大佬勿喷QAQ</s>）</p><!--more--><p>然后再仔细读了一下题，发现几件事情：</p><ul><li>不管<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>有多大，始终会有两张牌不被选。</li><li>因为被选上的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">n-2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>张牌是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>10</mn></mrow><annotation encoding="application/x-tex">10</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span></span></span></span>的倍数，因此个位为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，所以剩下<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>张牌的个位和这<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>个数之和的个位是一样的。</li><li>牌的值仅为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>至<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>10</mn></mrow><annotation encoding="application/x-tex">10</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span></span></span></span>。</li></ul><p>于是，我突然想到，既然正着算这<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">n-2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>个数不容易，那就反过来算剩下的两个数呗！</p><p>所以，最后我的办法是，算出<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>个数的和，桶排每种数值的个数，暴力枚举出两个数，这两个数的和的个位等于所有数总和的个位。</p><p>有一个问题，有可能存在多个不同的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">n-2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>个数的组合，比如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mo separator="true">,</mo><mn>8</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mn>9</mn></mrow><annotation encoding="application/x-tex">{2,8,1,9}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">8</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">9</span></span></span></span></span>这组数，既可以选出<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mo separator="true">,</mo><mn>8</mn></mrow><annotation encoding="application/x-tex">{2,8}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">8</span></span></span></span></span>，又可以选出<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo separator="true">,</mo><mn>9</mn></mrow><annotation encoding="application/x-tex">{1,9}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">9</span></span></span></span></span>，怎么办呢？</p><p>其实仔细想一下，不管怎么选，其答案是唯一的，因为所有数的和是唯一的，其个位也是唯一的，所以点数也是唯一的。</p><p>还是证明一下吧（蒟蒻用不来数学公式，只能语言描述QAQ）：</p><p>令s1=n个数的总和，s2=符合要求的n-2个数的和，s3=剩下2个数的和</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∵</mo><mi>s</mi><mn>1</mn><mo>≡</mo><mi>b</mi><mspace></mspace><mspace width="0.4444444444444444em"/><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mspace width="0.3333333333333333em"/><mn>10</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>s</mi><mn>2</mn><mo>≡</mo><mn>0</mn><mspace></mspace><mspace width="0.4444444444444444em"/><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mspace width="0.3333333333333333em"/><mn>10</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\because s1\equiv b\pmod{10},s2\equiv0\pmod{10}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mrel amsrm">∵</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.4444444444444444em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.3333333333333333em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">s</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.4444444444444444em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.3333333333333333em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mclose">)</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∴</mo><mi>s</mi><mn>3</mn><mo>≡</mo><mi>s</mi><mn>1</mn><mo>−</mo><mi>s</mi><mn>2</mn><mo>≡</mo><mi>b</mi><mo>−</mo><mn>0</mn><mo>≡</mo><mi>b</mi><mspace></mspace><mspace width="0.4444444444444444em"/><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mspace width="0.3333333333333333em"/><mn>10</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\therefore s3\equiv s1-s2\equiv b-0 \equiv b\pmod{10}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mrel amsrm">∴</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">s</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.4444444444444444em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.3333333333333333em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mclose">)</span></span></span></span></p><p>综上所述，要求的2个数之和的个位与n个数之和的个位相同，所以点数是唯一的</p><h1 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,sum,b[<span class="number">11</span>];<span class="comment">//这个题数据较小，sum用int也不会爆</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br><span class="line">sum+=a;</span><br><span class="line">b[a]++;<span class="comment">//桶排计算各种牌值的个数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">10</span>; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=<span class="number">10</span>; j++)<span class="comment">//两重循环暴力求剩下的两个数</span></span><br><span class="line"><span class="keyword">if</span>(((i==j&amp;&amp;b[i]&gt;=<span class="number">2</span>)||(i!=j&amp;&amp;b[i]&gt;=<span class="number">1</span>&amp;&amp;b[j]&gt;=<span class="number">1</span>))&amp;&amp;(i+j)%<span class="number">10</span>==sum%<span class="number">10</span>)<span class="comment">//判断牌的个数够不够，以及这两张牌的和的个位是否与所有牌的和的个位相同</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((i+j)%<span class="number">10</span>==<span class="number">0</span>)<span class="comment">//记得特判！！！</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;10&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,(i+j)%<span class="number">10</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//找到了就直接退出，因为点数是唯一的</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实这两重循环还可以再优化，但我觉得没有太大的必要了，毕竟这也只循环了<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>100</mn></mrow><annotation encoding="application/x-tex">100</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span></span></span></span>次而已。</p><p>蒟蒻求赞qwq</p>]]></content>
    
    
    <summary type="html">需要一点思维的贪心</summary>
    
    
    
    <category term="题解" scheme="http://beta.azusemisa.top/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="贪心" scheme="http://beta.azusemisa.top/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>【笔记】图论-最短路径算法</title>
    <link href="http://beta.azusemisa.top/posts/1960909489.html"/>
    <id>http://beta.azusemisa.top/posts/1960909489.html</id>
    <published>2020-01-20T13:55:00.000Z</published>
    <updated>2020-08-17T12:41:18.135Z</updated>
    
    <content type="html"><![CDATA[<p>在图论中，有一类算法，是专门拿来算两点之间最短距离的，被称之为最短路算法。</p><p>一共有四种最短路算法，分别是：Floyd，Dijkstra，Bellman-Ford和SPFA，它们时间复杂度各不相同，同时也具有各自的缺陷，今天就来介绍一下这四种算法。</p><a id="more"></a><p>参考题目：<a href="https://www.luogu.com.cn/problem/P1744">P1744 采购特价商品</a>（四种算法参考代码均为这道题）</p><p>PS：因为图论刚起步，所以为了熟悉一下，代码都是用的链式前向星存图，其实这四种都有自己的方式，下面会讲到。</p><h1 id="floyed"><a class="markdownIt-Anchor" href="#floyed"></a> Floyed</h1><p>Floyd和其它三种不一样，是一种全源最短路径算法，也就是说，它能求出任意点为起点，任意点为终点的最短距离，而其它三种只能求出以某一点为起点，任意点为终点的最短距离，即单源最短路径。</p><p>Floyd算法时间复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^{3})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，核心代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            dis[i][j]=min(dis[i][j],dis[i][k]+dis[k][j]);</span><br></pre></td></tr></table></figure><p>其中，k为中间点，i和j为起点和终点。</p><p>关于为什么要把k放在最外层，我也是纠结了很久（<s>那肯定啊强迫症看了会很不舒服的嘛</s>），直到看到了这张图片。</p><p><img src="https://i.loli.net/2020/01/20/oWV8KXbgLkBPtYJ.jpg" alt="Floyed算法" /></p><p>这东西把这个算法解释的很清楚了，我就不再说了。</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(a,b) a&lt;b?a:b</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line">Point a[<span class="number">101</span>];</span><br><span class="line"><span class="keyword">int</span> n,m,s,t,cnt,h[<span class="number">101</span>],b[<span class="number">101</span>];</span><br><span class="line"><span class="keyword">double</span> dis[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a[i].x,&amp;a[i].y);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">dis[i][j]=<span class="number">10000000</span>;<span class="comment">//初始化dis数组为无穷大，这样才能避免算的时候加入不存在的边</span></span><br><span class="line">                               <span class="comment">//因为是取最小值，所以这么大的数不会被考虑</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;u,&amp;v);</span><br><span class="line">dis[u][v]=dis[v][u]=<span class="built_in">sqrt</span>((a[u].x-a[v].x)*(a[u].x-a[v].x)+(a[u].y-a[v].y)*(a[u].y-a[v].y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;s,&amp;t);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)<span class="comment">//切记：中间点一定要放在最外层，原因上面已经讲过了</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">dis[i][j]=min(dis[i][j],dis[i][k]+dis[j][k]);<span class="comment">//这里如果没有边，则默认为无穷大</span></span><br><span class="line">                                                             <span class="comment">//由于是无穷大，所以这里不可能取到不存在的边</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2lf&quot;</span>,dis[s][t]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>事实上Floyd算法并不用链式前向星，而是邻接矩阵，毕竟它是求任意点为起点和终点的最短路径，所以必须用邻接矩阵。</p><p>优点：简单易懂，全源最短路</p><p>缺点：很明显啊……时间复杂度太感人了，空间复杂度也很棒棒啊</p><h1 id="dijkstra"><a class="markdownIt-Anchor" href="#dijkstra"></a> Dijkstra</h1><p>正如上面所说，Dijkstra是一种单源最短路径算法，时间复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^{2})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，比较稳定。</p><p>Dijkstra的核心思想是不停地找距离起点最近又没有更新过的点，然后对其所有相连的点进行更新。</p><p>因为从一个点到另一个点，中间必定经过至少一个中转点（把起点也算上），Dijkstra就是不停地把距离起点最近的点作为中转点，来更新与之相连的点。</p><p>Dijkstra默认不可能出现起点到A比起点到B距离长，但从起点经过A再到B距离却比直接到B短的情况，所以无法处理存在负边权的情况。</p><p>下面用图片来具体说明一下（标粗的点表示没有更新过）：</p><p>第一步：</p><p><img src="https://i.loli.net/2020/01/21/Bb7rZkdwc92yH5K.png" alt="" /></p><p>此时，初始化<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">dis[1]=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>4</mn><mo separator="true">,</mo><mn>5</mn><mo stretchy="false">]</mo><mo>=</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">dis[2,3,4,5]=\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">5</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span>，全部标记为未更新。</p><p>第二步：</p><p><img src="https://i.loli.net/2020/01/21/iHwEsXaxTB75Urq.png" alt="" /></p><p>此时，因为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">dis[1]=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，距离起点最近，因此更新点1，标记一下。然后，修改与点1相连的所有点，于是，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo><mo>=</mo><mn>2</mn><mo separator="true">,</mo><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>3</mn><mo stretchy="false">]</mo><mo>=</mo><mn>4</mn><mo separator="true">,</mo><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>4</mn><mo stretchy="false">]</mo><mo>=</mo><mn>7</mn></mrow><annotation encoding="application/x-tex">dis[2]=2,dis[3]=4,dis[4]=7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">2</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">3</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">4</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">7</span></span></span></span>，但这时并不标记这些点，因为它们不一定是最短路径。</p><p>数据：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>=</mo><mn>0</mn><mo separator="true">,</mo><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo><mo>=</mo><mn>2</mn><mo separator="true">,</mo><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>3</mn><mo stretchy="false">]</mo><mo>=</mo><mn>4</mn><mo separator="true">,</mo><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>4</mn><mo stretchy="false">]</mo><mo>=</mo><mn>7</mn><mo separator="true">,</mo><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>5</mn><mo stretchy="false">]</mo><mo>=</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">dis[1]=0,dis[2]=2,dis[3]=4,dis[4]=7,dis[5]=\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">2</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">3</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">4</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">7</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">5</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span></p><p>第三步：</p><p><img src="https://i.loli.net/2020/01/21/Hq8wM4QIhEjFdxs.png" alt="" /></p><p>第二轮循环后，找到点2距离起点最近且目前未被更新过，更新点2，并循环与点2相连的所有点，即点1，点3，点5，同样，这轮修改不标记，原因如上所述。因为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>=</mo><mn>0</mn><mo>&lt;</mo><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo><mo>+</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">dis[1]=0&lt;dis[2]+2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">2</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>，所以不修改点1。</p><p>数据：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>=</mo><mn>0</mn><mo separator="true">,</mo><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo><mo>=</mo><mn>2</mn><mo separator="true">,</mo><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>3</mn><mo stretchy="false">]</mo><mo>=</mo><mn>3</mn><mo separator="true">,</mo><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>4</mn><mo stretchy="false">]</mo><mo>=</mo><mn>7</mn><mo separator="true">,</mo><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>5</mn><mo stretchy="false">]</mo><mo>=</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">dis[1]=0,dis[2]=2,dis[3]=3,dis[4]=7,dis[5]=4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">2</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">3</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">4</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">7</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">5</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span></p><p>第四步：</p><p><img src="https://i.loli.net/2020/01/21/r8qBbkRTvasdXg9.png" alt="" /></p><p>第三轮循环，找到未被更新过的点中点3距起点最近，因此标记点3，并修改与点3相连的点，即点1，点2，点4，点5，但因为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>=</mo><mn>0</mn><mo>&lt;</mo><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>3</mn><mo stretchy="false">]</mo><mo>+</mo><mn>4</mn><mo separator="true">,</mo><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo><mo>=</mo><mn>2</mn><mo>&lt;</mo><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>3</mn><mo stretchy="false">]</mo><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>5</mn><mo stretchy="false">]</mo><mo>=</mo><mn>4</mn><mo>&lt;</mo><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>3</mn><mo stretchy="false">]</mo><mo>+</mo><mn>6</mn></mrow><annotation encoding="application/x-tex">dis[1]=0&lt;dis[3]+4,dis[2]=2&lt;dis[3]+1,dis[5]=4&lt;dis[3]+6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">3</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">2</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">3</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">5</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">3</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span></span></span></span>，因此这三个点不管，只有点4被修改（同样不标记）</p><p>数据：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>=</mo><mn>0</mn><mo separator="true">,</mo><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo><mo>=</mo><mn>2</mn><mo separator="true">,</mo><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>3</mn><mo stretchy="false">]</mo><mo>=</mo><mn>3</mn><mo separator="true">,</mo><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>4</mn><mo stretchy="false">]</mo><mo>=</mo><mn>4</mn><mo separator="true">,</mo><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>5</mn><mo stretchy="false">]</mo><mo>=</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">dis[1]=0,dis[2]=2,dis[3]=3,dis[4]=4,dis[5]=4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">2</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">3</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">4</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">5</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span></p><p>最后两轮更新将点4和点5更新，手动模拟一下发现没有点再修改了，循环结束。</p><p><strong>综上所述，Dijkstra算法简单来说就是，找距起点最近的点，用它来修改相连的点</strong></p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(a,b) a&lt;b?a:b</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> next;</span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line"><span class="keyword">double</span> w;</span><br><span class="line">&#125;;</span><br><span class="line">Point a[<span class="number">101</span>];</span><br><span class="line">Edge edge[<span class="number">2001</span>];</span><br><span class="line"><span class="keyword">int</span> n,m,s,t,cnt,h[<span class="number">101</span>],b[<span class="number">101</span>];</span><br><span class="line"><span class="keyword">double</span> dis[<span class="number">101</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">edge[cnt].next=h[u];</span><br><span class="line">edge[cnt].to=v;</span><br><span class="line">edge[cnt].w=<span class="built_in">sqrt</span>((a[u].x-a[v].x)*(a[u].x-a[v].x)+(a[u].y-a[v].y)*(a[u].y-a[v].y));</span><br><span class="line">h[u]=cnt;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span>(h));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a[i].x,&amp;a[i].y);</span><br><span class="line">dis[i]=<span class="number">100000000</span>;<span class="comment">//初始化dis数组无穷大</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;u,&amp;v);</span><br><span class="line">add_edge(u,v);</span><br><span class="line">add_edge(v,u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;s,&amp;t);</span><br><span class="line">dis[s]=<span class="number">0</span>;<span class="comment">//这里只初始化距离，不标记起点，否则就无法用起点去修改与之相邻的点了</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">double</span> minn=<span class="number">100000000</span>;</span><br><span class="line"><span class="keyword">int</span> mj=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)<span class="comment">//找距离起点最近的未更新的点</span></span><br><span class="line"><span class="keyword">if</span>(b[j]==<span class="number">0</span>&amp;&amp;dis[j]&lt;minn)</span><br><span class="line">&#123;</span><br><span class="line">minn=dis[j];</span><br><span class="line">mj=j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(mj==<span class="number">0</span>)<span class="comment">//如果没有找到，就说明要么是所有点都更新完成了，要么是没有点和起点相连</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">b[mj]=<span class="number">1</span>;<span class="comment">//更新最近的点</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=h[mj];j!=<span class="number">-1</span>;j=edge[j].next)<span class="comment">//用这个点去修改相邻的点</span></span><br><span class="line">dis[edge[j].to]=min(dis[edge[j].to],dis[mj]+edge[j].w);<span class="comment">//要判断一下通过这个点到达是否为最短路径</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2lf&quot;</span>,dis[t]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dijkstra算法可以用链式前向星，也可以用邻接矩阵，但个人认为链式前向星会更快一些，因为可以省去判断是否与当前点相连。</p><p>应当注意的是，Dijkstra不能处理存在负边权的情况，如下图：</p><p><img src="https://i.loli.net/2020/01/20/LnJG4ZibDrK9Y65.png" alt="" /></p><p>如图，从A到C最短应该是A—&gt;B—&gt;C，长度为-7，但Dijkstra在第一轮循环的时候，就会先更新点C为1，再用点C去修改点B，然后更新点B为-9，所以无法求出最短路径。</p><p>优点：时间复杂度稳定，不容易被卡</p><p>缺点：无法处理存在<strong>负边权</strong>的情况</p><h1 id="bellman-ford"><a class="markdownIt-Anchor" href="#bellman-ford"></a> Bellman-Ford</h1><p>Bellman-Ford也是一种单源最短路径，其时间复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nm)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span>，较Dijkstra来说没有那么稳定，容易被卡。</p><p>与Dijkstra不同，Bellman-Ford的核心思想是，在一个图中，总有边是连接着修改过的点和未修改过的点的，通过枚举这些边，来不断修改未修改过的点的值。</p><p>具体我也不好直接说明，还是用图来手动模拟一下清晰。</p><p>PS：加粗的表示值未被修改过。</p><p>第一步：</p><p><img src="https://i.loli.net/2020/01/21/e84uNEtonXFLIZB.png" alt="" /></p><p>老规矩，初始化所有点的值为无穷大，但点1不用，默认为0。</p><p>数据：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>=</mo><mn>0</mn><mo separator="true">,</mo><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>4</mn><mo separator="true">,</mo><mn>5</mn><mo stretchy="false">]</mo><mo>=</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">dis[1]=0,dis[2,3,4,5]=\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">5</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span></p><p>第二步：</p><p><img src="https://i.loli.net/2020/01/21/byqEZwGl1PKA2Mn.png" alt="" /></p><p>枚举所有的边，发现<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>+</mo><mn>2</mn><mo>&lt;</mo><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>+</mo><mn>4</mn><mo>&lt;</mo><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>3</mn><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>+</mo><mn>7</mn><mo>&lt;</mo><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>4</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dis[1]+2&lt;dis[2],dis[1]+4&lt;dis[3],dis[1]+7&lt;dis[4]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">2</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">3</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="mord">7</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">4</span><span class="mclose">]</span></span></span></span>，因此修改这些点的值<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo><mo>=</mo><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>+</mo><mn>2</mn><mo>=</mo><mn>2</mn><mo separator="true">,</mo><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>3</mn><mo stretchy="false">]</mo><mo>=</mo><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>+</mo><mn>4</mn><mo>=</mo><mn>4</mn><mo separator="true">,</mo><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>4</mn><mo stretchy="false">]</mo><mo>=</mo><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>+</mo><mn>7</mn><mo>=</mo><mn>7</mn></mrow><annotation encoding="application/x-tex">dis[2]=dis[1]+2=2,dis[3]=dis[1]+4=4,dis[4]=dis[1]+7=7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">2</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">3</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">4</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">7</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">7</span></span></span></span>，但在接下来的循环中，又发现<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo><mo>+</mo><mn>1</mn><mo>&lt;</mo><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>3</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dis[2]+1&lt;dis[3]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">2</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">3</span><span class="mclose">]</span></span></span></span>，修改<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>3</mn><mo stretchy="false">]</mo><mo>=</mo><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo><mo>+</mo><mn>1</mn><mo>=</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">dis[3]=dis[2]+1=3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">3</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">2</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>3</mn><mo stretchy="false">]</mo><mo>+</mo><mn>1</mn><mo>&lt;</mo><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>4</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dis[3]+1&lt;dis[4]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">3</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">4</span><span class="mclose">]</span></span></span></span>，于是修改<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>4</mn><mo stretchy="false">]</mo><mo>=</mo><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>3</mn><mo stretchy="false">]</mo><mo>+</mo><mn>1</mn><mo>=</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">dis[4]=dis[3]+1=4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">4</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">3</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span>。</p><p>数据：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>=</mo><mn>0</mn><mo separator="true">,</mo><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo><mo>=</mo><mn>2</mn><mo separator="true">,</mo><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>3</mn><mo stretchy="false">]</mo><mo>=</mo><mn>3</mn><mo separator="true">,</mo><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>4</mn><mo stretchy="false">]</mo><mo>=</mo><mn>4</mn><mo separator="true">,</mo><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>5</mn><mo stretchy="false">]</mo><mo>=</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">dis[1]=0,dis[2]=2,dis[3]=3,dis[4]=4,dis[5]=\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">2</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">3</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">4</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">5</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span></p><p>第三步：</p><p><img src="https://i.loli.net/2020/01/21/PD6xi3HwEKzQ2aR.png" alt="" /></p><p>再次枚举所有的边，发现<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo><mo>+</mo><mn>2</mn><mo>&lt;</mo><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>5</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dis[2]+2&lt;dis[5]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">2</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">5</span><span class="mclose">]</span></span></span></span>，于是修改<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>5</mn><mo stretchy="false">]</mo><mo>=</mo><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo><mo>+</mo><mn>2</mn><mo>=</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">dis[5]=dis[2]+2=4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">5</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">2</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span>，而后又发现<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>3</mn><mo stretchy="false">]</mo><mo>+</mo><mn>6</mn><mo>&gt;</mo><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>5</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dis[3]+6&gt;dis[5]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">3</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="mord">6</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">5</span><span class="mclose">]</span></span></span></span>，于是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mn>5</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dis[5]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">5</span><span class="mclose">]</span></span></span></span>修改完毕，至此，所有的点都修改完了。</p><p>关于为什么Bellman-Ford要循环<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>次，其实很简单，虽然上面这个图只用了3次就完成了，但不能排除有链的情况，比如这样：</p><p><img src="https://i.loli.net/2020/01/21/UG2uOFfWMDyibrm.png" alt="" /></p><p>这时，每次循环所有边就只能改变一个点的值，所以至少要循环5次。</p><p>参考代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(a,b) a&lt;b?a:b</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> next;</span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line"><span class="keyword">double</span> w;</span><br><span class="line">&#125;;</span><br><span class="line">Point a[<span class="number">101</span>];</span><br><span class="line">Edge edge[<span class="number">2001</span>];</span><br><span class="line"><span class="keyword">int</span> n,m,s,t,cnt,h[<span class="number">101</span>];</span><br><span class="line"><span class="keyword">double</span> dis[<span class="number">101</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">edge[cnt].next=h[u];</span><br><span class="line">edge[cnt].to=v;</span><br><span class="line">edge[cnt].w=<span class="built_in">sqrt</span>((a[u].x-a[v].x)*(a[u].x-a[v].x)+(a[u].y-a[v].y)*(a[u].y-a[v].y));</span><br><span class="line">h[u]=cnt;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span>(h));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a[i].x,&amp;a[i].y);</span><br><span class="line">dis[i]=<span class="number">100000000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;u,&amp;v);</span><br><span class="line">add_edge(u,v);</span><br><span class="line">add_edge(v,u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;s,&amp;t);</span><br><span class="line">dis[s]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)<span class="comment">//链式前向星遍历所有边</span></span><br><span class="line">                             <span class="comment">//其实也可以用一个f[2*m][2]的数组来存每条边的起点与终点，会更方便</span></span><br><span class="line">                             <span class="comment">//之所以是2*m，是因为这是无向图，每条边要存两次</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=h[j];k!=<span class="number">-1</span>;k=edge[k].next)</span><br><span class="line">dis[edge[k].to]=min(dis[j]+edge[k].w,dis[edge[k].to]);<span class="comment">//判断通过当前这条边到达这个点会不会更短</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2lf&quot;</span>,dis[t]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Bellman-Ford可以不用链式前向星，而直接单纯地存边的起讫点，在时间上区别个人认为不大，但空间的话还是后者要优秀一点。</p><p>Bellman-Ford无法处理存在负权回路的情况，即这条回路上所有边的权值加起来为负数的回路（<s>废话这样一直转下去每次减一点值就无穷小了呀</s>），就像这样：</p><p><img src="https://i.loli.net/2020/01/21/gqB7nCmR89ALrdT.png" alt="" /></p><p>尽管Bellman-Ford无法处理负权回路的情况，但可以判断是否存在负权回路，如果全部循环完了，还存在某条边使得从点A到点B的距离更小，就存在负权回路。</p><p>直接在两重循环完了后面加上这样几行代码即可：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=head[i];j!=<span class="number">-1</span>;j=edge[j].next)<span class="comment">//链式前向星遍历</span></span><br><span class="line">        <span class="keyword">if</span>(dis[edge[j].to]&gt;dis[i]+edge[j].w)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;啊啊啊有负权回路啊！！！&quot;</span>);</span><br></pre></td></tr></table></figure><p>优点：可以处理负边权的情况，可以检测负权回路</p><p>缺点：<strong>容易被卡！！！</strong></p><h1 id="spfa"><a class="markdownIt-Anchor" href="#spfa"></a> SPFA</h1><p>SPFA是Bellman-Ford的队列优化版本，时间复杂度和Bellman-Ford一样，是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nm)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span>（不要信《信息学奥赛一本通》上的鬼话，它说时间复杂度是O(km)，其中k是常数，约为2，根本不对，详见<a href="https://baike.baidu.com/item/SPFA%E7%AE%97%E6%B3%95/8297411?fromtitle=SPFA&amp;fromid=11018124&amp;fr=aladdin">百度</a>）</p><p>SPFA的思路非常简单，每次从队头取一个点出来，判断从这个点到相邻的点是否更短，如果是，则将这个相邻的点入队，其实就和BFS很像，但不同的是，SPFA中的点可以多次入队，因为第一次找到的最短路径不一定就是真正的最短路径。同时，也正因为可以多次入队，所以它无法像普通的BFS一样估算队列的长度，所以在实现时，要么采用循环队列（即把队列当成一个圆环，当队尾到达一定位置时，就把尾指针移到队头，相当于从头再开始存，一般是用一个取模来完成，这样比较方便），这时队列只需开到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mo>∗</mo><mi>n</mi><mo>+</mo><mn>5</mn></mrow><annotation encoding="application/x-tex">2*n+5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span></span></span></span>即可（《信息学奥赛一本通》原话，具体证明我也不会，如果哪位大佬知道的话麻烦在评论里指出，蟹蟹！），要么还可以用STL库中的queue容器，这里我用的是queue，但也要学会手打队列，不能养成STL依赖症。</p><p>参考代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(a,b) a&lt;b?a:b</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> next;</span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line"><span class="keyword">double</span> w;</span><br><span class="line">&#125;;</span><br><span class="line">Point a[<span class="number">101</span>];</span><br><span class="line">Edge edge[<span class="number">2001</span>];</span><br><span class="line"><span class="keyword">int</span> n,m,s,t,cnt,head[<span class="number">101</span>];</span><br><span class="line"><span class="keyword">double</span> dis[<span class="number">101</span>];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">edge[cnt].next=head[u];</span><br><span class="line">edge[cnt].to=v;</span><br><span class="line">edge[cnt].w=<span class="built_in">sqrt</span>((a[u].x-a[v].x)*(a[u].x-a[v].x)+(a[u].y-a[v].y)*(a[u].y-a[v].y));</span><br><span class="line">head[u]=cnt;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a[i].x,&amp;a[i].y);</span><br><span class="line">dis[i]=<span class="number">10000000</span>;</span><br><span class="line">head[i]=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;u,&amp;v);</span><br><span class="line">add_edge(u,v);</span><br><span class="line">add_edge(v,u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;s,&amp;t);</span><br><span class="line">q.push(s);<span class="comment">//一开始起点入队</span></span><br><span class="line">dis[s]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[q.front()];i!=<span class="number">-1</span>;i=edge[i].next)</span><br><span class="line"><span class="keyword">if</span>(dis[q.front()]+edge[i].w&lt;dis[edge[i].to])<span class="comment">//判断相邻的点通过当前点到达是否更短</span></span><br><span class="line">&#123;</span><br><span class="line">dis[edge[i].to]=dis[q.front()]+edge[i].w;</span><br><span class="line">q.push(edge[i].to);<span class="comment">//如果是，则当前点的值修改，并入队</span></span><br><span class="line">&#125;</span><br><span class="line">q.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2lf&quot;</span>,dis[t]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个过程其实和BFS几乎完全一样，这里我介绍一下queue容器的使用。</p><p>使用queue容器要包含<code>#include&lt;queue&gt;</code>这个头文件。</p><p>queue的定义格式是<code>queue&lt;元素类型&gt;队列名称</code>，如：<code>queue&lt;int&gt;qwq</code>就是定义了一个名字为qwq，元素类型为int的队列</p><p>queue一共有6个常用函数：</p><ol><li><p><code>qwq.push(x)</code>：将x元素入队</p></li><li><p><code>qwq.pop()</code>：将队头元素出队</p></li><li><p><code>qwq.front()</code>：返回队头元素的值（但不出队）</p></li><li><p><code>qwq.back()</code>：返回队尾元素的值（个人觉得用处不大）</p></li><li><p><code>qwq.empty()</code>：判断队列是否为空，如果为空，则返回<code>true</code></p></li><li><p><code>qwq.size()</code>：返回队列中元素个数</p></li></ol><p>差不多就是这些了，如果还有什么，我后面再补充。</p><p><strong>特别注意：SPFA容易被卡！</strong></p><p>在此放上一张经久不衰的图片：</p><p><img src="https://i.loli.net/2020/01/21/e1Ks84HBnA5pjfP.jpg" alt="" /></p><blockquote><p>2018 年 7 月 19 日，某位同学在NOI Day 1 T1里非常熟练地使用了一个广为人知的算法SPFA求最短路。</p><p>然后呢？</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>100</mn><mo>→</mo><mn>60</mn></mrow><annotation encoding="application/x-tex">100 \rightarrow 60</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span><span class="mord">0</span></span></span></span>；</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>g</mi><mo>→</mo><mi>C</mi><mi>u</mi></mrow><annotation encoding="application/x-tex">Ag \rightarrow Cu</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault">u</span></span></span></span>；</p><p>最终，他因此没能与理想的大学达成契约。</p></blockquote><p>由于SPFA“优秀”的时间复杂度，所以它经常在各大OJ和OI上被卡，再引用一个人的话。</p><blockquote><p>卡SPFA已经是一个共识了好吧……</p></blockquote><p>所以在比赛时，最好还是不要用SPFA了……</p><p>优点：比较简单易懂，而且可以处理负边权的情况</p><p>缺点：容易被卡</p><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>四种最短路径算法个人觉得还是根据具体的题目来看吧，但一般来说我觉得应该是没有负边权就用Dijkstra（实在不行加个堆优化），有负边权就用SPFA好了，也没有必要一味地说SPFA死了，毕竟既然这玩意还没有完全被淘汰不用，就说明它还是有自己的用途的。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在图论中，有一类算法，是专门拿来算两点之间最短距离的，被称之为最短路算法。&lt;/p&gt;
&lt;p&gt;一共有四种最短路算法，分别是：Floyd，Dijkstra，Bellman-Ford和SPFA，它们时间复杂度各不相同，同时也具有各自的缺陷，今天就来介绍一下这四种算法。&lt;/p&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="http://beta.azusemisa.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="图论" scheme="http://beta.azusemisa.top/tags/%E5%9B%BE%E8%AE%BA/"/>
    
    <category term="最短路" scheme="http://beta.azusemisa.top/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>【洛谷 P3958】 奶酪</title>
    <link href="http://beta.azusemisa.top/posts/3619596124.html"/>
    <id>http://beta.azusemisa.top/posts/3619596124.html</id>
    <published>2020-01-03T05:24:02.000Z</published>
    <updated>2020-08-17T12:43:06.783Z</updated>
    
    <content type="html"><![CDATA[<p>当我这样一个蒟蒻看到题解区里都是类似并查集、dfs、bfs这种高深的东西时，真的很难受（<s>因为看不懂</s>）</p><p>于是我整了一个小时，终于整出一个<s>人畜无害老少皆宜即使是蒟蒻也能看懂的</s>代码了</p><p><s>以上是废话</s></p><!--more--><h1 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h1><p>简单来说，先按高矮（即z）从小到大排序，如果一个洞能和它前面任何一个洞相连或是直接与下表面相连，就存进一个数组，如果数组中有哪个能和上表面相连，就输出Yes，反之，输出No。</p><p>因为事先已经排过了序，所以可以保证数组中的数都是与下表面相连的，就像a1与下底面相连，a2与a1相连，所以a2也是和下底面相连的，<s>所以不用管它和哪个相连，知道是连着的就对了</s></p><p>附上喜闻乐见的AC代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">qwq</span>//结构体定义数组</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ll x;</span><br><span class="line">ll y;</span><br><span class="line">ll z;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(qwq a,qwq b)</span><span class="comment">//自定义结构体sort排序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a.z!=b.z) <span class="keyword">return</span> a.z&lt;b.z;<span class="comment">//一定记得以高矮优先</span></span><br><span class="line"><span class="keyword">if</span>(a.x!=b.x) <span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line"><span class="keyword">if</span>(a.y!=b.y) <span class="keyword">return</span> a.y&lt;b.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">dist</span><span class="params">(ll x1,ll y1,ll z1,ll x2,ll y2,ll z2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)+(z1-z2)*(z1-z2);</span><br><span class="line">&#125;</span><br><span class="line">ll t,n,h,r,s,flag;</span><br><span class="line">qwq tree[<span class="number">1010</span>],g[<span class="number">1010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;t);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> c=<span class="number">1</span>;c&lt;=t;c++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;n,&amp;h,&amp;r);</span><br><span class="line">s=<span class="number">0</span>;</span><br><span class="line">flag=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(tree,<span class="number">0</span>,<span class="keyword">sizeof</span>(tree));<span class="comment">//以上是初始化</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;g[i].x,&amp;g[i].y,&amp;g[i].z);</span><br><span class="line">sort(g+<span class="number">1</span>,g+<span class="number">1</span>+n,cmp);<span class="comment">//排序</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(g[i].z-r&lt;=<span class="number">0</span>)<span class="comment">//如果与下底面相连就直接存入数组</span></span><br><span class="line">&#123;</span><br><span class="line">s++;</span><br><span class="line">tree[s].x=g[i].x;</span><br><span class="line">tree[s].y=g[i].y;</span><br><span class="line">tree[s].z=g[i].z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=s;j++)</span><br><span class="line"><span class="keyword">if</span>(dist(g[i].x,g[i].y,g[i].z,tree[j].x,tree[j].y,tree[j].z)&lt;=<span class="number">4</span>*r*r)<span class="comment">//判断是否相切或相交</span></span><br><span class="line">&#123;</span><br><span class="line">s++;</span><br><span class="line">tree[s].x=g[i].x;</span><br><span class="line">tree[s].y=g[i].y;</span><br><span class="line">tree[s].z=g[i].z;</span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//只要有一个与其相连，就退出循环</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tree[s].z+r&gt;=h)<span class="comment">//判断是否与上顶面相连</span></span><br><span class="line">&#123;</span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果哪里做的不对，请各位大佬帮忙指出，十分感谢</p>]]></content>
    
    
    <summary type="html">非正解的并查集经典题型</summary>
    
    
    
    <category term="题解" scheme="http://beta.azusemisa.top/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="并查集" scheme="http://beta.azusemisa.top/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>回顾2019</title>
    <link href="http://beta.azusemisa.top/posts/1276451225.html"/>
    <id>http://beta.azusemisa.top/posts/1276451225.html</id>
    <published>2019-12-31T16:05:30.000Z</published>
    <updated>2020-08-17T12:43:30.052Z</updated>
    
    <content type="html"><![CDATA[<p>唉，又过去一年了，离初三毕业又近了一点了</p><p>这一年过的好悲惨啊</p><p>文化课凉凉~~，OI也没什么太大的进展，怎么说呢，很不如意吧</p><p><s>PS：这是蒟蒻第一次写年终总结，所以可能有点水，请不要介意</s></p><a id="more"></a><h1 id="oi方面"><a class="markdownIt-Anchor" href="#oi方面"></a> OI方面</h1><p>总体来说今年在OI这块还算不错吧，参加了人生中第一次CSP，就拿了一个不错<br />的成绩，J组一等，虽然这还很微不足道，但也是算一个小小的成就吧（<s>毕竟这样就能稳保直升了</s>），而且通过这次比赛，也是拓宽了眼界，见到了很多巨佬，同时也学到了很多。</p><p>给一些<strong>还未参加过OI</strong>的同学一些建议（<s>纯属个人主观意见</s>）：</p><ul><li>首先，在考试前，不要太紧张，J组没什么难的，只要有一些基础，会模拟、简单dp，最好是再来一点图论知识，只要不出大问题，一般一等是稳的</li><li>其次，不要觉得骗分是多么不好的行为，只要不是作弊（<s>或卡评测姬</s>）， 没人规定不准骗分，甚至有时骗的比正解还好（比如我今年T4用邻接矩阵加记忆化dfs拿了80pts）</li><li>还有，不要过早地给自己下定义，比如觉得自己铁定凉凉什么的，一切要等尘埃落定后才知道，我今年做T4时，贪心把邻接矩阵开大了一些，结果考完了又记错了，以为自己MLE了（这样就只有100+100+10+0=210pts了，在SC正好拿不到一等），难过了好久，结果发现只是记错了，最后总分是290pts，稳上分数线</li><li>最后，不要就此结束，J组只是一个很小很小的成就，甚至很多学校都不屑去参加，如果你是真正把OI当成一个兴趣爱好或一种以后的谋生手段来搞，那这是远远不够的，至少都要拿个S组一等才行吧。</li></ul><p>（<s>以上内容请dalao勿喷</s>）</p><p>除了参加CSP，今年我也想了很多</p><ul><li>我现在学OI是为了什么？升学？声誉？谋生？我觉得都不是，仿佛就是一瞬间，我就选中了OI，决定把它当成一生为之奋斗的东西，有时就是这么神奇，有人苦苦寻觅一生的东西，你却一下子就找到了，有人直到老了，都不知道自己这一生是在干嘛，而我却很幸运，在最好的年华就找到了自己的路，或许，这就是一种缘分吧。</li><li>我该怎么去学好OI这门竞赛？OI之路说长不长，说短不短，五年时间，也能干很多事了，但如果没有目标，没有计划，就会像dfs没了vis标记，永远停留在函数中直到崩溃，但我现在就属于没有什么触手可及的或是量化的目标来完成，每天都只是跟着老师上课，再在洛谷上刷刷题，红题、橙题、黄题都做了不少，但却没有一点实质性的用处，我希望自学，但却缺乏途径，有了书，又没有时间来练（<s>其实是因为自己时间规划得太差了</s>），这些我现在都没有想清，准备留到寒假再想好了。</li><li>我的终极目标是什么？我的班主任曾说过他很羡慕我有自己的目标，人生规划和计划，但其实细想一下，我根本还没有想清。我想去上姚班，但姚班一年只在全国招不到50个人，还要算上数学和物理竞赛的巨佬，这太难太难了，能靠OI获得清华自招的名额都难，更别提姚班了。撇开上大学不说，工作呢？和程序设计有关的工作数不胜数，从低级码农，到顶级科研，我喜欢的到底是OI的什么？是AC的瞬间？还是一行行代码在IDE中被打出，实现？或许我现在还太年轻，没有这个脑子想清这些问题。</li></ul><p><strong>总的来说，这一年在OI上过的还是挺好的，在机房也结识了很多朋友，毕竟我是个实验班的蒟蒻，又不善于跟人打交道，所以直到今年暑假才开始有点存在感，但有些地方还是跟竞赛班的大佬很不一样，也没有什么共同的语言，对彼此班上的梗都不了解，说了也是白说。</strong></p><h1 id="文化课方面"><a class="markdownIt-Anchor" href="#文化课方面"></a> 文化课方面</h1><p>今年文化课是铁定砸掉了，尤其是历史（<s>政治不清楚，估计也差不多</s>），由于CSP前一两周在机房积极备考，所以逃掉了不少课，再加上开学一个月后历史书又被人不声不响地拿走，我就没好好听过几堂历史课，所以历史肯定是没希望了，只要不在80分以下就行了（80分以下要抄书……）。</p><p>最近这几周一直学习不在状态，老是想<a href="http://yorg.io">颓</a>，周末做完作业就了事，学校里也总是心不在焉，废话多，静不下心。语文、英语模拟考都GG了，最拿手的数学最近也不是很理想，现在感觉很痛苦，想要挣扎出这个泥潭，却又来不及了，只能眼睁睁地看着QMKS一点一点逼近，却又无能为力，幻想着奇迹发生，但理智又告诉我不可能，没有办法，只能硬着头皮去考了。</p><p>但总体来说，今年一整年的文化课搞得还是有声有色，拿了一次年级第七名，一次年级第八名，如果半期以后能再好一点，就比较完美了。</p><p><strong>总结一下，2020年在文化课方面主要注意以下几点：</strong></p><ol><li>上课一定要认真听讲，虽然这很像套话，但事实证明，上课的确很重要</li><li>课后要注意复习，周末时应把平时讲的内容拿出来看一看，至少是把历史看一遍（<s>理工男表示文科真的让我很抓狂</s>）</li><li>周末要注意对手机和电脑的把控，适当<a href="http://yorg.io">颓废</a>有益健康，过度玩乐摧残文化，这个还是不能不管的</li><li>注意刷题，周末和平时都要有计划地<s>水</s>做一些数学和物理，这个到了寒假再具体计划</li></ol><hr /><p>最后再回顾一下，如果要用一个词语概括我的2019年的话，我觉得应该是<strong>遗憾</strong>吧，没能把好成绩一直延续到最后</p><p>希望2020年，我能让自己重新振作起来，不要重蹈2019的覆辙了</p><h1 id="新年加油"><a class="markdownIt-Anchor" href="#新年加油"></a> 新年，加油！</h1><p><strong>Ps：一些新年小计划：</strong></p><ul><li>文化课拿一次年级前五</li><li>语文得一次130分</li><li>数学拿一次150</li><li>学好物理力学，不要挂科</li><li>在机房AK一次</li><li>绿名，绿名，绿名！！！</li><li>AC500道</li></ul><p><strong>Fighting！！！</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;唉，又过去一年了，离初三毕业又近了一点了&lt;/p&gt;
&lt;p&gt;这一年过的好悲惨啊&lt;/p&gt;
&lt;p&gt;文化课凉凉~~，OI也没什么太大的进展，怎么说呢，很不如意吧&lt;/p&gt;
&lt;p&gt;&lt;s&gt;PS：这是蒟蒻第一次写年终总结，所以可能有点水，请不要介意&lt;/s&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="回顾" scheme="http://beta.azusemisa.top/categories/%E5%9B%9E%E9%A1%BE/"/>
    
    
    <category term="文化课" scheme="http://beta.azusemisa.top/tags/%E6%96%87%E5%8C%96%E8%AF%BE/"/>
    
  </entry>
  
</feed>
